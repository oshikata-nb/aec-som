CREATE OR REPLACE PROCEDURE PRO_CLAIM_UPDATE_CSM
	(
		 P_STR_ORGANIZATION_CD	IN	NVARCHAR2
		,P_STR_VENDER_CD		IN	NVARCHAR2
		,P_STR_CREDIT_DATE		IN	NVARCHAR2
		,P_STR_CLOSING_DATE		IN	NVARCHAR2
		,P_STR_TEMP_CLOSING_FLG	IN	NVARCHAR2
		,P_STR_INPUTOR_CD		IN	NVARCHAR2
		,P_NUM_RET				OUT	NUMBER
		,P_ERRCD				OUT	NUMBER
		,P_ERRMSG				OUT	NVARCHAR2
	)
IS
/*----------------------------------------------------------------------------------------------------------------
	種別		:	PROCEDURE
	名称		:	PRO_CLAIM_UPDATE_CSM
	処理内容	:	請求更新処理(カスタマイズ)
					通常請求更新処理＋消込トラン(カスタマイズ)登録処理
	引数		:	P_STR_ORGANIZATION_CD	部署コード			NVARCHAR2型
	引数		:	P_STR_VENDER_CD			請求先コード		NVARCHAR2型
	引数		:	P_STR_CREDIT_DATE		請求締め日			NVARCHAR2型
	引数		:	P_STR_CLOSING_DATE		売掛締め日			NVARCHAR2型
	引数		:	P_STR_TEMP_CLOSING_FLG	仮締区分			NVARCHAR2型
	引数		:	P_STR_INPUTOR_CD		登録者ＩＤ			NVARCHAR2型
	引数(戻値)	:	P_NUM_RET				実行結果			NUMBER型
											(0:正常終了, 99:異常終了)
	引数(戻値)	:	P_ERRCD					SQLエラーコード		NUMBER型
	引数(戻値)	:	P_ERRMSG				SQLエラーメッセージ	NVARCHAR2型
	VERNO.		:	1.00
(history)
	date		ver		name				comments
	----------	------	------------------	----------------------------------------------------------------------
	2008.10.09	1.00	  TOSCO       		    creation
	2009.06.03                              SOM殿向けカスタマイズ
	2009.08.08          okmt.tc             内税でも売上は税抜きとする。
	2009.08.20          okmt.tc             差引繰越額は相殺も考慮する。
	2009.09.12          okmt.tc             グループ間相殺は消込トラン登録処理の対象としない。
	2009.11.30          n.s                 消込のsalesからの売上・返品・値引の取消に対応。
  2015.11.09  1.06    n.s                 テーブルロック時のログを追加
*/----------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------
	--定数・変数宣言
	--------------------------------------------------------------------------------
	c_DataDivUriUriage		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 1;			-- (売上)売上
	c_DataDivUriHenpin		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 2;			-- (売上)返品
	c_DataDivUriNebiki		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 3;			-- (売上)値引
	c_DataDivUriSonota		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 9;			-- (売上)その他
	c_DataDivNyuNyukin		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 1;			-- (入金)入金
	c_DataDivNyuSousai		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 2;			-- (入金)相殺
	c_DataDivNyuSonota		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 9;			-- (入金)その他
	c_DataDivShiSousai		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 2;			-- (支払)相殺
	c_DataDivSouSousai		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 1;			-- (グループ間相殺)グループ間相殺
	c_ClaimTrgDiv1			CONSTANT SALES.CLAIM_TARGET_DIVISION%TYPE		:= 1;			-- 請求対象(処理済)
	c_ClaimTrgDiv9			CONSTANT SALES.CLAIM_TARGET_DIVISION%TYPE		:= 9;			-- 請求対象(対象外)
	c_DeliveryComp2			CONSTANT SALES.DELIVERY_COMP%TYPE				:= 2;			-- 完納区分(完納)
	c_ClaimUpdDiv0			CONSTANT SALES.CLAIM_UPDATE_DIVISION%TYPE		:= 0;			-- 請求更新フラグ(未処理)
	c_ClaimUpdDiv1			CONSTANT SALES.CLAIM_UPDATE_DIVISION%TYPE		:= 1;			-- 請求更新フラグ(更新済)
	c_ClDiv0				CONSTANT CLASSIFICATION.CLAIM_DIVISION%TYPE		:= 0;			-- 請求対象(対象外)
	c_ClDiv1				CONSTANT CLASSIFICATION.CLAIM_DIVISION%TYPE		:= 1;			-- 請求対象(対象)
	c_DepositUpdDiv0		CONSTANT SALES.DEPOSIT_UPDATE_DIVISION%TYPE		:= 0;			-- 売掛更新フラグ(未処理)
	c_DepositUpdDiv1		CONSTANT SALES.DEPOSIT_UPDATE_DIVISION%TYPE		:= 1;			-- 売掛更新フラグ(更新済)
	c_ApprovalSts3			CONSTANT SALES.APPROVAL_STATUS%TYPE				:= 3;			-- 承認ステータス(承認済)
	c_TempClosingFlg1		CONSTANT VARCHAR2(1)							:= '1';			-- 仮締区分(仮締め)
	c_VenderDivTS			CONSTANT VENDER.VENDER_DIVISION%TYPE			:= 'TS';		-- 取引先区分(TS:得意先)
	c_TmpUnitPriceFlg0		CONSTANT SALES.TMP_UNITPRICE_FLG%TYPE			:= 0;			-- 仮単価フラグ(通常)
	DEF_PROC_NAME    CONSTANT    PROC_PARAM.PROC_CD%TYPE := 'PRO_CLAIM_UPDATE_CSM';
	nvAccountYears			SALES.ACCOUNT_YEARS%TYPE;										-- 勘定年月
	daCreditDate			CLAIM_HEADER.CREDIT_DATE%TYPE;									-- 請求締め日
	daClosingDate			DATE;															-- 売掛締め日
	nvClaimNo				CLAIM_HEADER.CLAIM_NO%TYPE;										-- 請求番号
	rtRecWork				CLAIM_HEADER%ROWTYPE;											-- 請求ヘッダー
	nClaimAmount			CLAIM_HEADER.CLAIM_AMOUNT%TYPE;									-- 今回請求額(差引繰越額含まず)
	nvCreditScheDate		NVARCHAR2(8);													-- 入金予定日(YYYYMMDD)
	nvCreditDiv				VENDER.CATEGORY_DIVISION1%TYPE;									-- 入金分類（決済方法）
	nNoteSight				VENDER.NOTE_SIGHT1%TYPE;										-- 手形サイト
	nBillPublish			VENDER.BILL_PUBLISH%TYPE;										-- 請求書発行区分
	nHolidayFlg				VENDER.HOLIDAY_FLG%TYPE;										-- 休日指定フラグ
	nCount					NUMBER											:= 0;			-- カウンター
	vErrMsg					VARCHAR2(256);
	nErrNo					NUMBER;
	vVenderCd				VARCHAR2(15);
	vCreditDiv				VARCHAR2(256);
	nRecCount				NUMBER;															-- レコード件数
	msg     TEMP_BATCH_MSG.MSG%TYPE; 
	--------------------------------------------------------------------------------
	--★カーソル宣言
	--------------------------------------------------------------------------------
	--請求データ抽出 カーソル
	CURSOR curSales(
		p_daCreditDate		IN	DATE
	   ,p_nvAccountYears	IN	SALES.ACCOUNT_YEARS%TYPE
	)	IS
		SELECT
			 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
			,TRN.VENDER_CD AS VENDER_CD											--請求先コード
			,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
			,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
			,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
--			,SUM(CLAIM_AMOUNT_FORWARD - (CREDIT_AMOUNT_FORWARD + OTHER_CREDIT_AMOUNT_FORWARD )) AS BALANCE_FORWARD	--差引繰越額
			,SUM(CLAIM_AMOUNT_FORWARD - (CREDIT_AMOUNT_FORWARD + OTHER_CREDIT_AMOUNT_FORWARD + OFFSET_AMOUNT )) AS BALANCE_FORWARD	--差引繰越額
			,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
			,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
			,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
			,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
			,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
			,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
			,SUM((CLAIM_AMOUNT_FORWARD + SALES_AMOUNT + OTHER_SALES_AMOUNT + TAX_AMOUNT)
				-(SALES_RETURNED_AMOUNT + SALES_DISCOUNT_AMOUNT + CREDIT_AMOUNT_FORWARD
				  + OTHER_CREDIT_AMOUNT_FORWARD + OFFSET_AMOUNT)) AS CLAIM_AMOUNT	--今回請求額
		FROM (
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_AMOUNT	--今回売上額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_AMOUNT
				FROM
					 (SELECT
						 SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.ACCOUNT_YEARS
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 SALES SALES						--売上トラン
						,VENDER VENDER
					  WHERE
					      SALES.ACCOUNT_YEARS <= p_nvAccountYears
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriUriage	--売上
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_RETURNED_AMOUNT	--返品金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,(DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) * -1) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,(DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) * -1) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_AMOUNT
				FROM
					 (SELECT
						 SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.ACCOUNT_YEARS
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 SALES SALES						--売上トラン
						,VENDER VENDER
					  WHERE
					      SALES.ACCOUNT_YEARS <= p_nvAccountYears
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriHenpin	--返品
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_DISCOUNT_AMOUNT	--値引金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,(DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) * -1) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,(DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) * -1) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_AMOUNT
				FROM
					 (SELECT
						 SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.ACCOUNT_YEARS
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 SALES SALES						--売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.ACCOUNT_YEARS <= p_nvAccountYears
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriNebiki	--値引
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS OTHER_SALES_AMOUNT	--その他売上金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS OFFSET_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_AMOUNT
				FROM
					 (SELECT
						 SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.ACCOUNT_YEARS
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 SALES SALES						--売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.ACCOUNT_YEARS <= p_nvAccountYears
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriSonota	--その他売上
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,CREDIT.CREDIT_AMOUNT AS CREDIT_AMOUNT_FORWARD			--前回入金額
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 CREDIT CREDIT						--入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daCreditDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuNyukin		--入金
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,CREDIT.CREDIT_AMOUNT AS OFFSET_AMOUNT					--入金相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 CREDIT CREDIT						--入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daCreditDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuSousai		--相殺
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,CREDIT.CREDIT_AMOUNT AS OTHER_CREDIT_AMOUNT_FORWARD	--前回その他入金額
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 CREDIT CREDIT						--入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daCreditDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuSonota		--その他入金
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 PAYMENT.ORGANIZATION_CD AS ORGANIZATION_CD						--部署コード
					,PAYMENT.SUPPLIER_CD AS VENDER_CD						--仕入先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,PAYMENT.PAYMENT_AMOUNT AS OFFSET_AMOUNT				--支払相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 PAYMENT PAYMENT					--支払トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR PAYMENT.SUPPLIER_CD = P_STR_VENDER_CD)
				AND PAYMENT.PAYMENT_DATE <= p_daCreditDate
				AND PAYMENT.DATA_TOTAL_DIVISION = c_DataDivShiSousai	--相殺
				AND PAYMENT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND PAYMENT.INVOICE_UPDATE_DATE IS NULL
				AND PAYMENT.APPROVAL_STATUS = c_ApprovalSts3			--承認済
				AND PAYMENT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND PAYMENT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 OFFSET.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,OFFSET.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,OFFSET.DEPOSIT_OFFSET_AMOUNT AS OFFSET_AMOUNT			--売掛相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 OFFSET_GROUP_DATA OFFSET				--グループ間トラン
					,CLASSIFICATION CLASSIFICATION			--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR OFFSET.VENDER_CD = P_STR_VENDER_CD)
				AND OFFSET.OFFSET_DATE <= p_daCreditDate
				AND OFFSET.DATA_TOTAL_DIVISION = c_DataDivSouSousai		--グループ間相殺
				AND OFFSET.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND OFFSET.INVOICE_UPDATE_DATE IS NULL
				AND OFFSET.DEPOSIT_OFFSET_AMOUNT IS NOT NULL			--売掛相殺金額
				AND OFFSET.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND OFFSET.VENDER_DIVISION = c_VenderDivTS				--得意先
				AND OFFSET.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND OFFSET.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 HEADER.ORGANIZATION_CD AS ORGANIZATION_CD		--部署コード
					,HEADER.VENDER_CD AS VENDER_CD					--請求先コード
					,HEADER.CLAIM_AMOUNT AS CLAIM_AMOUNT_FORWARD	--前回請求額
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 CLAIM_HEADER HEADER		--請求ヘッダー
					,(SELECT
						 ORGANIZATION_CD
						,VENDER_CD
						,MAX(CREDIT_DATE) MAX_DATE
					  FROM
					  	CLAIM_HEADER
					  WHERE
					  	CREDIT_DATE < p_daCreditDate
					  GROUP BY
						 ORGANIZATION_CD
						,VENDER_CD
					 ) MAX_HEADER
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR HEADER.VENDER_CD = P_STR_VENDER_CD)
				AND	HEADER.CLAIM_AMOUNT <> 0
				AND HEADER.ORGANIZATION_CD = MAX_HEADER.ORGANIZATION_CD
				AND HEADER.VENDER_CD = MAX_HEADER.VENDER_CD
				AND HEADER.CREDIT_DATE = MAX_HEADER.MAX_DATE
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			 ) TRN
			,(
			SELECT
				VENDER_CD
			FROM (
					SELECT
						VENDER_CD
					,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)),
							CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
									THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2))
								 ELSE CLOSING_DATE
							END
						) CLOSING_DATE
					FROM
						VENDER
					WHERE
						('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
					AND ORGANIZATION_CD = P_STR_ORGANIZATION_CD
					AND VENDER_DIVISION = c_VenderDivTS
--					AND (PAYMENT_INVOICE_CD IS NULL OR VENDER.PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
				)
			WHERE
				CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(p_daCreditDate, 'YYYYMMDD'), 7, 2))
			 ) VENDER											-- 請求先.締日と画面の締日が一致する請求先のテーブル
		WHERE
			TRN.VENDER_CD = VENDER.VENDER_CD
		GROUP BY
			 TRN.ORGANIZATION_CD
			,TRN.VENDER_CD
		ORDER BY
			 ORGANIZATION_CD
			,VENDER_CD
	;
	--仮締め請求データ抽出 カーソル
	CURSOR curTempSales(
		p_daCreditDate		IN	DATE
	   ,p_nvAccountYears	IN	TEMPORARY_CLAIM_SALES.ACCOUNT_YEARS%TYPE
	)	IS
		SELECT
			 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
			,TRN.VENDER_CD AS VENDER_CD											--請求先コード
			,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
			,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
			,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
--			,SUM(CLAIM_AMOUNT_FORWARD - (CREDIT_AMOUNT_FORWARD + OTHER_CREDIT_AMOUNT_FORWARD )) AS BALANCE_FORWARD	--差引繰越額
			,SUM(CLAIM_AMOUNT_FORWARD - (CREDIT_AMOUNT_FORWARD + OTHER_CREDIT_AMOUNT_FORWARD + OFFSET_AMOUNT )) AS BALANCE_FORWARD	--差引繰越額
			,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
			,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
			,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
			,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
			,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
			,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
			,SUM((CLAIM_AMOUNT_FORWARD + SALES_AMOUNT + OTHER_SALES_AMOUNT + TAX_AMOUNT)
				-(SALES_RETURNED_AMOUNT + SALES_DISCOUNT_AMOUNT + CREDIT_AMOUNT_FORWARD
				  + OTHER_CREDIT_AMOUNT_FORWARD + OFFSET_AMOUNT)) AS CLAIM_AMOUNT	--今回請求額
		FROM (
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_AMOUNT	--今回売上額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_AMOUNT
				FROM
					 (SELECT
						 SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.ACCOUNT_YEARS
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 TEMPORARY_CLAIM_SALES SALES	--仮締め売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.ACCOUNT_YEARS <= p_nvAccountYears
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriUriage	--売上
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_RETURNED_AMOUNT	--返品金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,(DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) * -1) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,(DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) * -1) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_AMOUNT
				FROM
					 (SELECT
						 SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.ACCOUNT_YEARS
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 TEMPORARY_CLAIM_SALES SALES	--仮締め売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.ACCOUNT_YEARS <= p_nvAccountYears
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriHenpin	--返品
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_DISCOUNT_AMOUNT	--値引金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,(DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) * -1) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,(DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) * -1) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_AMOUNT
				FROM
					 (SELECT
						 SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.ACCOUNT_YEARS
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 TEMPORARY_CLAIM_SALES SALES	--仮締め売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.ACCOUNT_YEARS <= p_nvAccountYears
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriNebiki	--値引
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS OTHER_SALES_AMOUNT	--その他売上金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS OFFSET_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_AMOUNT
				FROM
					 (SELECT
						 SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.ACCOUNT_YEARS
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 TEMPORARY_CLAIM_SALES SALES	--仮締め売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.ACCOUNT_YEARS <= p_nvAccountYears
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriSonota	--その他売上
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,CREDIT.CREDIT_AMOUNT AS CREDIT_AMOUNT_FORWARD			--前回入金額
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 TEMPORARY_CLAIM_CREDIT CREDIT		--仮締め入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daCreditDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuNyukin		--入金
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD			--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD						--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,CREDIT.CREDIT_AMOUNT AS OFFSET_AMOUNT					--入金相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 TEMPORARY_CLAIM_CREDIT CREDIT		--仮締め入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daCreditDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuSousai		--相殺
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD			--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD						--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,CREDIT.CREDIT_AMOUNT AS OTHER_CREDIT_AMOUNT_FORWARD	--前回その他入金額
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 TEMPORARY_CLAIM_CREDIT CREDIT		--仮締め入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daCreditDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuSonota		--その他入金
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 PAYMENT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,PAYMENT.SUPPLIER_CD AS VENDER_CD						--仕入先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,PAYMENT.PAYMENT_AMOUNT AS OFFSET_AMOUNT				--支払相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 TEMPORARY_CLAIM_PAYMENT PAYMENT	--仮締め支払トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR PAYMENT.SUPPLIER_CD = P_STR_VENDER_CD)
				AND PAYMENT.PAYMENT_DATE <= p_daCreditDate
				AND PAYMENT.DATA_TOTAL_DIVISION = c_DataDivShiSousai	--相殺
				AND PAYMENT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND PAYMENT.INVOICE_UPDATE_DATE IS NULL
				AND PAYMENT.APPROVAL_STATUS = c_ApprovalSts3			--承認済
				AND PAYMENT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND PAYMENT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 OFFSET.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,OFFSET.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,OFFSET.DEPOSIT_OFFSET_AMOUNT AS OFFSET_AMOUNT			--売掛相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 TMPCLAIM_OFFSET_GROUP_DATA OFFSET		--仮締めグループ間トラン
					,CLASSIFICATION CLASSIFICATION			--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR OFFSET.VENDER_CD = P_STR_VENDER_CD)
				AND OFFSET.OFFSET_DATE <= p_daCreditDate
				AND OFFSET.DATA_TOTAL_DIVISION = c_DataDivSouSousai		--グループ間相殺
				AND OFFSET.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND OFFSET.INVOICE_UPDATE_DATE IS NULL
				AND OFFSET.DEPOSIT_OFFSET_AMOUNT IS NOT NULL			--売掛相殺金額
				AND OFFSET.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND OFFSET.VENDER_DIVISION = c_VenderDivTS				--得意先
				AND OFFSET.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND OFFSET.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_AMOUNT) AS CLAIM_AMOUNT									--今回請求額
			FROM
				(
				SELECT
					 HEADER.ORGANIZATION_CD AS ORGANIZATION_CD		--部署コード
					,HEADER.VENDER_CD AS VENDER_CD					--請求先コード
					,HEADER.CLAIM_AMOUNT AS CLAIM_AMOUNT_FORWARD	--前回請求額
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_AMOUNT
				FROM
					 CLAIM_HEADER HEADER		--請求ヘッダー
					,(SELECT
						 ORGANIZATION_CD
						,VENDER_CD
						,MAX(CREDIT_DATE) MAX_DATE
					  FROM
					  	CLAIM_HEADER
					  WHERE
					  	CREDIT_DATE < p_daCreditDate
					  GROUP BY
						 ORGANIZATION_CD
						,VENDER_CD
					 ) MAX_HEADER
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR HEADER.VENDER_CD = P_STR_VENDER_CD)
				AND	HEADER.CLAIM_AMOUNT <> 0
				AND HEADER.ORGANIZATION_CD = MAX_HEADER.ORGANIZATION_CD
				AND HEADER.VENDER_CD = MAX_HEADER.VENDER_CD
				AND HEADER.CREDIT_DATE = MAX_HEADER.MAX_DATE
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			 ) TRN
			,(
			SELECT
				VENDER_CD
			FROM (
					SELECT
						VENDER_CD
					,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)),
							CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
									THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2))
								 ELSE CLOSING_DATE
							END
						) CLOSING_DATE
					FROM
						VENDER
					WHERE
						('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
					AND ORGANIZATION_CD = P_STR_ORGANIZATION_CD
					AND VENDER_DIVISION = c_VenderDivTS
--					AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
				)
			WHERE
				CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(p_daCreditDate, 'YYYYMMDD'), 7, 2))
			 ) VENDER											-- 請求先.締日と画面の締日が一致する請求先のテーブル
		WHERE
			TRN.VENDER_CD = VENDER.VENDER_CD
		GROUP BY
			 TRN.ORGANIZATION_CD
			,TRN.VENDER_CD
		ORDER BY
			 ORGANIZATION_CD
			,VENDER_CD
	;
	--請求ヘッダー未作成の請求先抽出 カーソル
	CURSOR curNotClaimVender(
		p_daCreditDate		IN	DATE
	)	IS
		SELECT
				VENDER.VENDER_CD
			,	VENDER.ORGANIZATION_CD
		FROM
			(
				SELECT
					VENDER_CD
				,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)),
						CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
								THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2))
							 ELSE CLOSING_DATE
						END
					) CLOSING_DATE
				,	ORGANIZATION_CD
				FROM
					VENDER
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
				AND ORGANIZATION_CD = P_STR_ORGANIZATION_CD
				AND VENDER_DIVISION = c_VenderDivTS
--				AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
			) VENDER
		WHERE
			VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(p_daCreditDate, 'YYYYMMDD'), 7, 2))
		AND
		(
			SELECT COUNT(VENDER_CD)
			FROM
				CLAIM_HEADER
			WHERE
				CLAIM_HEADER.ORGANIZATION_CD	= 	VENDER.ORGANIZATION_CD
			AND CLAIM_HEADER.VENDER_CD 			= 	VENDER.VENDER_CD
			AND CLAIM_HEADER.CREDIT_DATE		= 	p_daCreditDate
		) = 0;
	--仮締め請求ヘッダー未作成の請求先抽出 カーソル
	CURSOR curTempNotClaimVender(
		p_daCreditDate		IN	DATE
	)	IS
		SELECT
				VENDER.VENDER_CD
			,	VENDER.ORGANIZATION_CD
		FROM
			(
				SELECT
					VENDER_CD
				,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)),
						CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
								THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2))
							 ELSE CLOSING_DATE
						END
					) CLOSING_DATE
				,	ORGANIZATION_CD
				FROM
					VENDER
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
				AND ORGANIZATION_CD = P_STR_ORGANIZATION_CD
				AND VENDER_DIVISION = c_VenderDivTS
--				AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
			) VENDER
		WHERE
			VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(p_daCreditDate, 'YYYYMMDD'), 7, 2))
		AND
		(
			SELECT COUNT(VENDER_CD)
			FROM
				TEMPORARY_CLAIM_HEADER CLAIM_HEADER
			WHERE
				CLAIM_HEADER.ORGANIZATION_CD	= 	VENDER.ORGANIZATION_CD
			AND CLAIM_HEADER.VENDER_CD 			= 	VENDER.VENDER_CD
			AND CLAIM_HEADER.CREDIT_DATE		= 	p_daCreditDate
		) = 0;
BEGIN
    -- ログ出力変数初期化  
    TRNERRMAN.INIT_LOG(DEF_PROC_NAME);

    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '処理開始', P_STR_INPUTOR_CD);
    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '初期処理：実行条件取得', P_STR_INPUTOR_CD);

    msg := '実行条件＝';
    msg := msg || '部署コード：' || P_STR_ORGANIZATION_CD || ',';
    msg := msg || '請求先コード：' || NVL(P_STR_VENDER_CD, '') || ',';
    msg := msg || '請求締め日：' || P_STR_CREDIT_DATE || ',';
    
    IF P_STR_TEMP_CLOSING_FLG = c_TempClosingFlg1 THEN
       msg := msg || '締め処理区分：仮締め';
    ELSE
       msg := msg || '締め処理区分：本締め';
    END IF;

    TRNERRMAN.LOGOUT(DEF_PROC_NAME, msg, P_STR_INPUTOR_CD);
    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理開始', P_STR_INPUTOR_CD);

	-- 文字型をDate型へキャスト
	daCreditDate := TO_DATE(P_STR_CREDIT_DATE, 'YYYYMMDD');
	daClosingDate := TO_DATE(P_STR_CLOSING_DATE, 'YYYYMMDD');
	nvAccountYears := SUBSTR(P_STR_CREDIT_DATE, 1, 6);
	--------------------------------------------------------------------------------
	--仮締めデータ削除処理
	--------------------------------------------------------------------------------

	IF TRNERRMAN.LOCK_PROC(15) = 0 THEN
	    ROLLBACK;
	    P_NUM_RET := 9;
		
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め請求ヘッダーのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
      -- 2015/11/09 insert ログ追加 -->
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
      -- <-----------------------------
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	    RETURN;
	END IF;

	-------------------------------------------------
	--★仮締め請求ヘッダー削除
	-------------------------------------------------
	DELETE FROM TEMPORARY_CLAIM_HEADER
	WHERE
		VENDER_CD IN (
						SELECT
							VENDER_CD
						FROM 
							(
							SELECT
								VENDER_CD
							,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
									CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
											THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
										 ELSE CLOSING_DATE
									END
								) CLOSING_DATE
							,	ORGANIZATION_CD
							FROM
								VENDER
							WHERE
								ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--							AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
				  			AND VENDER_DIVISION = c_VenderDivTS
							AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
							) VENDER
						WHERE
							VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
					);
	IF TRNERRMAN.LOCK_PROC(11) = 0 THEN
	    ROLLBACK;
	    P_NUM_RET := 9;
		
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
      -- 2015/11/09 insert ログ追加 -->
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
      -- <-----------------------------
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	    RETURN;
	END IF;

	-------------------------------------------------
	--★仮締め売上トランザクション削除
	-------------------------------------------------
	DELETE FROM TEMPORARY_CLAIM_SALES
	WHERE
		DECODE(INVOICE_CD, NULL, VENDER_CD, INVOICE_CD) IN 
		(
			SELECT
				VENDER_CD
			FROM 
				(
				SELECT
					VENDER_CD
				,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
						CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
								THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
							 ELSE CLOSING_DATE
						END
					) CLOSING_DATE
				,	ORGANIZATION_CD
				FROM
					VENDER
				WHERE
					ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--				AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
	  			AND VENDER_DIVISION = c_VenderDivTS
				AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
				) VENDER
			WHERE
				VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
		);

	IF TRNERRMAN.LOCK_PROC(12) = 0 THEN
	    ROLLBACK;
	    P_NUM_RET := 9;
		
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
      -- 2015/11/09 insert ログ追加 -->
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
      -- <-----------------------------
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	    RETURN;
	END IF;

	-------------------------------------------------
	--★仮締め入金トランザクション削除
	-------------------------------------------------
	DELETE FROM TEMPORARY_CLAIM_CREDIT
	WHERE
		VENDER_CD IN
		(
			SELECT
				VENDER_CD
			FROM 
				(
				SELECT
					VENDER_CD
				,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
						CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
								THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
							 ELSE CLOSING_DATE
						END
					) CLOSING_DATE
				,	ORGANIZATION_CD
				FROM
					VENDER
				WHERE
					ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--				AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
	  			AND VENDER_DIVISION = c_VenderDivTS
				AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
				) VENDER
			WHERE
				VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
		);

	IF TRNERRMAN.LOCK_PROC(13) = 0 THEN
	    ROLLBACK;
	    P_NUM_RET := 9;
		
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
      -- 2015/11/09 insert ログ追加 -->
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
      -- <-----------------------------
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	    RETURN;
	END IF;

	-------------------------------------------------
	--★仮締め支払トランザクション削除
	-------------------------------------------------
	DELETE FROM TEMPORARY_CLAIM_PAYMENT
	WHERE
		SUPPLIER_CD IN
		(
			SELECT
				VENDER_CD
			FROM 
				(
				SELECT
					VENDER_CD
				,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
						CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
								THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
							 ELSE CLOSING_DATE
						END
					) CLOSING_DATE
				,	ORGANIZATION_CD
				FROM
					VENDER
				WHERE
					ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--				AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
	  			AND VENDER_DIVISION = c_VenderDivTS
				AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
				) VENDER
			WHERE
				VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
		);

	IF TRNERRMAN.LOCK_PROC(14) = 0 THEN
	    ROLLBACK;
	    P_NUM_RET := 9;
		
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締めグループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
      -- 2015/11/09 insert ログ追加 -->
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
      -- <-----------------------------
	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	    RETURN;
	END IF;

	-------------------------------------------------
	--★仮締めグループ間相殺トランザクション削除
	-------------------------------------------------
	DELETE FROM TMPCLAIM_OFFSET_GROUP_DATA
	WHERE
		VENDER_CD IN
		(
			SELECT
				VENDER_CD
			FROM 
				(
				SELECT
					VENDER_CD
				,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
						CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
								THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
							 ELSE CLOSING_DATE
						END
					) CLOSING_DATE
				,	ORGANIZATION_CD
				FROM
					VENDER
				WHERE
					ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--				AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
	  			AND VENDER_DIVISION = c_VenderDivTS
				AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
				) VENDER
			WHERE
				VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
		);
	--------------------------------------------------------------------------------
	--【仮締め】の場合
	--------------------------------------------------------------------------------
	IF P_STR_TEMP_CLOSING_FLG = c_TempClosingFlg1 THEN
	    IF TRNERRMAN.LOCK_PROC(11) = 0 THEN
	        ROLLBACK;
	        P_NUM_RET := 9;
	
	        TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
          -- 2015/11/09 insert ログ追加 -->
	        TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
          -- <-----------------------------
	        TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	       RETURN;
	    END IF;

		-------------------------------------------------
		--★仮締め売上トランザクション登録
		-------------------------------------------------
		INSERT INTO TEMPORARY_CLAIM_SALES
			SELECT SALES.*
			FROM
				 (SELECT
					 SALES.SALES_DATE
					,SALES.SALES_NO
					,SALES.CANCEL_SALES_NO
					,SALES.ITEM_CD
					,SALES.ORGANIZATION_CD
					,SALES.VENDER_CD
					,SALES.BALANCE_CD
					,SALES.INPUT_TANTO_CD
					,SALES.SALES_TANTO_CD
					,SALES.PRODUCT_LOTNO
					,SALES.ORDER_NO
					,SALES.ORDER_ROW_NO
					,SALES.SALES_QUANTITY
					,SALES.SALES_UNITPRICE
					,SALES.STANDARD_UNITPRICE
					,SALES.STANDARD_DISCOUNT
					,SALES.SPECIAL_DISCOUNT
					,SALES.TMP_UNITPRICE_FLG
					,SALES.REMARK
					,SALES.DISBURSEMENT_LOCATION_CD
					,SALES.DELIVERY_COMP
					,SALES.DELIVERY_UPDATE_DATE
					,SALES.INVOICE_UPDATE_DATE
					,SALES.INPUT_DIVISION
					,SALES.DELIVERY_CD
					,SALES.TAX_DIVISION
					,SALES.TAX_AMOUNT
					,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
					,SALES.SALES_AMOUNT
					,SALES.SALES_BASIC
					,SALES.TAX_RATIO
					,SALES.UPDATE_FLG
					,SALES.CONFIG_EXP_RATIO
					,SALES.RATIO_NOTAPPLY_SALES_UNITPRICE
					,SALES.SHIPPING_NO
					,SALES.SALES_SLIP_NO
					,SALES.SALES_SLIP_ROW_NO
					,SALES.SLIP_PUBLISH_COMP
					,SALES.SLIP_PUBLISH_DATE
					,SALES.TRANSMISSION_DATE
					,SALES.LEDGER_POST_DATE
					,SALES.LEDGER_POST_NO
					,SALES.SALES_CONVERT_QUANTITY
					,SALES.ACCEPT_CONVERT_QUANTITY
					,SALES.DATA_TYPE
					,SALES.DATA_TOTAL_DIVISION
					,SALES.CATEGORY_DIVISION
					,SALES.ACCOUNT_YEARS
					,SALES.ACCOUNT_DEBIT_SECTION_CD
					,SALES.ACCOUNT_CREDIT_SECTION_CD
					,SALES.DEBIT_TITLE_CD
					,SALES.DEBIT_SUB_TITLE_CD
					,SALES.CREDIT_TITLE_CD
					,SALES.CREDIT_SUB_TITLE_CD
					,SALES.DEPOSIT_TARGET_DIVISION
					,SALES.CLAIM_TARGET_DIVISION
					,SALES.SUMMARY_CD
					,SALES.SUMMARY
					,SALES.DEPOSIT_UPDATE_DIVISION
					,SALES.DEPOSIT_NO
					,SALES.CLAIM_UPDATE_DIVISION
					,SALES.CLAIM_NO
					,SALES.ERASER_COMPLETE_DIVISION
					,SALES.ERASER_COMPLETE_DATE
					,SALES.APPROVAL_STATUS
					,SALES.APPROVEDBY
					,SALES.APPROVALDATE
					,SALES.CHARGE_ORGANIZATION_CD
					,SALES.KEEP_FLAG
					,SALES.RY_CD
					,SALES.HOUSING_LOCATION_CD
					,SALES.PACKAGE_DIRECTION_NO
					,SALES.INPUT_DATE
					,SALES.INPUTOR_CD
					,SALES.UPDATE_DATE
					,SALES.UPDATOR_CD
				  FROM
					 SALES SALES	--仮締め売上トラン
					,(
/*						SELECT
							VENDER_CD
						,	PAYMENT_INVOICE_CD
						FROM 
							VENDER
						WHERE
							ORGANIZATION_CD = P_STR_ORGANIZATION_CD
						AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
				  		AND VENDER_DIVISION = c_VenderDivTS
*/
						SELECT
							VENDER_CD
						,	PAYMENT_INVOICE_CD
						FROM 
							(
							SELECT
								VENDER_CD
							,	PAYMENT_INVOICE_CD
							,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
									CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
											THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
										 ELSE CLOSING_DATE
									END
								) CLOSING_DATE
							,	ORGANIZATION_CD
							FROM
								VENDER
							WHERE
								ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--							AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
				  			AND VENDER_DIVISION = c_VenderDivTS
							AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
							) VENDER
						WHERE
							VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
					) VENDER
				  WHERE
					  (SALES.SALES_DATE <= daClosingDate OR SALES.ACCOUNT_YEARS <= nvAccountYears)
				  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
				  AND SALES.INVOICE_UPDATE_DATE IS NULL
				  AND DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) = VENDER.VENDER_CD
				 ) SALES
--			WHERE
--				('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
--				 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
--				 SALES.INVOICE_CD = P_STR_VENDER_CD
--				)
		;

		IF TRNERRMAN.LOCK_PROC(12) = 0 THEN
	            ROLLBACK;
	            P_NUM_RET := 9;
	
	            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
              -- 2015/11/09 insert ログ追加 -->
	            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
              -- <-----------------------------
	            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	       	    RETURN;
	    	END IF;

		-------------------------------------------------
		--★仮締め入金トランザクション登録
		-------------------------------------------------
		INSERT INTO TEMPORARY_CLAIM_CREDIT
			SELECT CREDIT.*
			FROM
				CREDIT CREDIT						--入金トラン
			,(
				SELECT
					VENDER_CD
				FROM 
					(
					SELECT
						VENDER_CD
					,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
							CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
									THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
								 ELSE CLOSING_DATE
							END
						) CLOSING_DATE
					,	ORGANIZATION_CD
					FROM
						VENDER
					WHERE
						ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--					AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
		  			AND VENDER_DIVISION = c_VenderDivTS
					AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
					) VENDER
				WHERE
					VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
			) VENDER
			WHERE
				CREDIT.VENDER_CD = VENDER.VENDER_CD
			AND CREDIT.CREDIT_DATE <= daClosingDate
			AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
			AND CREDIT.INVOICE_UPDATE_DATE IS NULL
			AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
		;

		IF TRNERRMAN.LOCK_PROC(13) = 0 THEN
	            ROLLBACK;
	            P_NUM_RET := 9;
	
	            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
              -- 2015/11/09 insert ログ追加 -->
        	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
              -- <-----------------------------
	            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	       	    RETURN;
	    	END IF;

		-------------------------------------------------
		--★仮締め支払トランザクション登録
		-------------------------------------------------
		INSERT INTO TEMPORARY_CLAIM_PAYMENT
			SELECT PAYMENT.*
			FROM
				PAYMENT PAYMENT					--支払トラン
			,(
				SELECT
					VENDER_CD
				FROM 
					(
					SELECT
						VENDER_CD
					,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
							CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
									THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
								 ELSE CLOSING_DATE
							END
						) CLOSING_DATE
					,	ORGANIZATION_CD
					FROM
						VENDER
					WHERE
						ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--					AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
		  			AND VENDER_DIVISION = c_VenderDivTS
					AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
					) VENDER
				WHERE
					VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
			) VENDER
			WHERE
				PAYMENT.SUPPLIER_CD = VENDER.VENDER_CD
			AND PAYMENT.PAYMENT_DATE <= daClosingDate
			AND PAYMENT.DATA_TOTAL_DIVISION = c_DataDivShiSousai	--相殺
			AND PAYMENT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
			AND PAYMENT.INVOICE_UPDATE_DATE IS NULL
			AND PAYMENT.APPROVAL_STATUS = c_ApprovalSts3			--承認済
		;

		IF TRNERRMAN.LOCK_PROC(14) = 0 THEN
	            ROLLBACK;
	            P_NUM_RET := 9;
	
	            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締めグループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
              -- 2015/11/09 insert ログ追加 -->
        	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
              -- <-----------------------------
	            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
	       	    RETURN;
	    	END IF;

		-------------------------------------------------
		--★仮締めグループ間相殺トランザクション登録
		-------------------------------------------------
		INSERT INTO TMPCLAIM_OFFSET_GROUP_DATA
			SELECT OFFSET.*
			FROM
				OFFSET_GROUP_DATA OFFSET				--グループ間トラン
			,(
				SELECT
					VENDER_CD
				FROM 
					(
					SELECT
						VENDER_CD
					,	DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)),
							CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
									THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daCreditDate), 'YYYYMMDD'), 7, 2))
								 ELSE CLOSING_DATE
							END
						) CLOSING_DATE
					,	ORGANIZATION_CD
					FROM
						VENDER
					WHERE
						ORGANIZATION_CD = P_STR_ORGANIZATION_CD
--					AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
		  			AND VENDER_DIVISION = c_VenderDivTS
					AND	('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
					) VENDER
				WHERE
					VENDER.CLOSING_DATE = TO_NUMBER(SUBSTR(TO_CHAR(daCreditDate, 'YYYYMMDD'), 7, 2))
			) VENDER
			WHERE
				OFFSET.VENDER_CD = VENDER.VENDER_CD
			AND OFFSET.OFFSET_DATE <= daClosingDate
			AND OFFSET.DATA_TOTAL_DIVISION = c_DataDivSouSousai		--グループ間相殺
			AND OFFSET.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
			AND OFFSET.INVOICE_UPDATE_DATE IS NULL
			AND OFFSET.DEPOSIT_OFFSET_AMOUNT IS NOT NULL			--売掛相殺金額
			AND OFFSET.APPROVAL_STATUS = c_ApprovalSts3				--承認済
			AND OFFSET.VENDER_DIVISION = c_VenderDivTS				--得意先
		;
	END IF;
	--------------------------------------------------------------------------------
	--【仮締め】の場合
	--------------------------------------------------------------------------------
	IF P_STR_TEMP_CLOSING_FLG = c_TempClosingFlg1 THEN
		--------------------------------------------------------------------------------
		--仮締め請求データ抽出処理
		--------------------------------------------------------------------------------
		/* 仮締め請求データ抽出 カーソル */
		FOR REC_MAIN IN curTempSales(daCreditDate, nvAccountYears)
		LOOP
			-- 請求番号仮締め用取得(FUNCTION呼出)
			nvClaimNo := FUN_GET_CLAIM_NO_KARI(P_STR_INPUTOR_CD);
			-- 請求額
			nClaimAmount := REC_MAIN.CLAIM_AMOUNT - REC_MAIN.BALANCE_FORWARD;
			-- 入金予定日取得(FUNCTION呼出)
			nvCreditScheDate := FUN_GET_CREDIT_SCHE_DATE(REC_MAIN.VENDER_CD, TO_CHAR(daCreditDate, 'YYYYMMDD'), nClaimAmount);
			-- 入金分類、手形サイト取得(PROCEDURE呼出)
			PRO_GET_CREDIT_DIV(REC_MAIN.VENDER_CD, nClaimAmount, nvCreditDiv, nNoteSight);
--			IF nvCreditDiv IS NULL THEN
--				ROLLBACK;
--				P_NUM_RET := 9;
--				RETURN;
--			END IF;
			IF nvCreditDiv IS NULL THEN			-- 入金区分が確定できない請求先は処理対象外とする
				GOTO SKIP_TMP_CLIM_UPDATE;
			END IF;
			-- 取引先マスタ検索
			SELECT	BILL_PUBLISH				-- 請求書発行済フラグ
				,	HOLIDAY_FLG					-- 休日指定フラグ
			INTO	nBillPublish
				,	nHolidayFlg
			FROM	VENDER
			WHERE	VENDER_DIVISION		=	c_VenderDivTS
			AND		VENDER_CD			=	REC_MAIN.VENDER_CD
			;
			-- 請求書発行区分(1:発行する 2:発行しない)
			IF nBillPublish = 2 THEN
				nBillPublish := 9;		-- 発行不要
			ELSE
				nBillPublish := 0;		-- 未発行
			END IF;
			-- 仮締め請求ヘッダーデータ設定
			rtRecWork.CLAIM_NO			:= nvClaimNo;					-- 請求番号
			rtRecWork.ORGANIZATION_CD		:= REC_MAIN.ORGANIZATION_CD;			-- 部署コード
			rtRecWork.VENDER_CD			:= REC_MAIN.VENDER_CD;				-- 請求先コード
			rtRecWork.CREDIT_DATE			:= daCreditDate;				-- 請求締め日
			rtRecWork.CREDIT_SCHEDULED_DATE		:= TO_DATE(nvCreditScheDate, 'YYYY/MM/DD');	-- 入金予定日
			rtRecWork.CREDIT_DIVISION		:= nvCreditDiv;					-- 入金分類（決済方法）
			rtRecWork.NOTE_SIGHT			:= nNoteSight;					-- 手形サイト
			rtRecWork.HOLIDAY_FLG			:= nHolidayFlg;					-- 休日指定フラグ
			rtRecWork.CLAIM_AMOUNT_FORWARD		:= REC_MAIN.CLAIM_AMOUNT_FORWARD;		-- 前回請求額
			rtRecWork.CREDIT_AMOUNT_FORWARD		:= REC_MAIN.CREDIT_AMOUNT_FORWARD;		-- 前回入金額
			rtRecWork.OTHER_CREDIT_AMOUNT_FORWARD	:= REC_MAIN.OTHER_CREDIT_AMOUNT_FORWARD;	-- その他入金金額
			rtRecWork.BALANCE_FORWARD		:= REC_MAIN.BALANCE_FORWARD;			-- 差引繰越額
			rtRecWork.SALES_AMOUNT			:= REC_MAIN.SALES_AMOUNT;			-- 今回売上額
			rtRecWork.SALES_RETURNED_AMOUNT		:= REC_MAIN.SALES_RETURNED_AMOUNT;		-- 返品金額
			rtRecWork.SALES_DISCOUNT_AMOUNT		:= REC_MAIN.SALES_DISCOUNT_AMOUNT;		-- 値引金額
			rtRecWork.OTHER_SALES_AMOUNT		:= REC_MAIN.OTHER_SALES_AMOUNT;			-- その他売上金額
			rtRecWork.OFFSET_AMOUNT			:= REC_MAIN.OFFSET_AMOUNT;			-- 相殺金額
			rtRecWork.TAX_AMOUNT			:= REC_MAIN.TAX_AMOUNT;				-- 消費税額
			rtRecWork.CLAIM_AMOUNT			:= REC_MAIN.CLAIM_AMOUNT;			-- 今回請求額
			rtRecWork.CLAIM_BALANCE_AMOUNT		:= 0;						-- 未請求額
			rtRecWork.ERASER_AMOUNT			:= 0;						-- 消込額
			rtRecWork.ERASER_BALANCE_AMOUNT		:= REC_MAIN.CLAIM_AMOUNT;			-- 消込残
			rtRecWork.BILL_DIVISION			:= nBillPublish;				-- 請求書発行済フラグ
			rtRecWork.ISSUE_DATE			:= NULL;					-- 発行日
			rtRecWork.ISSUER_CD			:= NULL;					-- 発行者ＩＤ
			rtRecWork.INPUT_DATE			:= SYSDATE;					-- 登録日時
			rtRecWork.INPUTOR_CD			:= P_STR_INPUTOR_CD;				-- 登録者ＩＤ
			rtRecWork.UPDATE_DATE			:= SYSDATE;					-- 更新日時
			rtRecWork.UPDATOR_CD			:= P_STR_INPUTOR_CD;				-- 更新者ＩＤ

			IF TRNERRMAN.LOCK_PROC(15) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め請求ヘッダーのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★請求ヘッダー登録
			--------------------------------------------------------------------------------
DBMS_OUTPUT.PUT_LINE('n:'||nCount||',v:'||REC_MAIN.VENDER_CD||',D:'||rtRecWork.CREDIT_DIVISION||',a:'||REC_MAIN.CLAIM_AMOUNT);
			INSERT INTO TEMPORARY_CLAIM_HEADER VALUES rtRecWork;
			----------------------------------------------------------------------------------------------------------
			--【請求対象】【請求対象外】の各トランザクション更新処理
			----------------------------------------------------------------------------------------------------------

			IF TRNERRMAN.LOCK_PROC(11) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象】仮締め売上トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE TEMPORARY_CLAIM_SALES
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
				,	INVOICE_CD	=	(												-- 請求先コード
										SELECT
											DECODE(PAYMENT_INVOICE_CD, NULL, VENDER_CD, PAYMENT_INVOICE_CD) AS INVOICE_CD
										FROM
											VENDER
										WHERE
											VENDER.VENDER_CD = REC_MAIN.VENDER_CD
										AND VENDER_DIVISION = c_VenderDivTS
									)
			WHERE
					DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		ROWID IN (
								SELECT
									 SALES.ROW_ID
								FROM
									 (SELECT
										 SALES.CHARGE_ORGANIZATION_CD
										,SALES.VENDER_CD
										,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
										,SALES.DATA_TYPE
										,SALES.DATA_TOTAL_DIVISION
										,SALES.CATEGORY_DIVISION
										,SALES.ROWID AS ROW_ID
									  FROM
										 TEMPORARY_CLAIM_SALES SALES						--仮締め売上トラン
										,VENDER VENDER
									  WHERE
										  SALES.CHARGE_ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
									  AND SALES.ACCOUNT_YEARS <= nvAccountYears
									  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
									  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  				  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
									  AND SALES.VENDER_CD = VENDER.VENDER_CD
									  AND VENDER_DIVISION = c_VenderDivTS
									 ) SALES
									,CLASSIFICATION CLASSIFICATION		--分類マスタ
								WHERE
								 ( (SALES.VENDER_CD = REC_MAIN.VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
								   SALES.INVOICE_CD = REC_MAIN.VENDER_CD )
								AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
								AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
								AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
								AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
							 )
			;

			IF TRNERRMAN.LOCK_PROC(11) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			-- 売掛更新未処理対象
			UPDATE TEMPORARY_CLAIM_SALES
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
				,	INVOICE_CD	=	(												-- 請求先コード
										SELECT
											DECODE(PAYMENT_INVOICE_CD, NULL, VENDER_CD, PAYMENT_INVOICE_CD) AS INVOICE_CD
										FROM
											VENDER
										WHERE
											VENDER.VENDER_CD = REC_MAIN.VENDER_CD
										AND VENDER_DIVISION = c_VenderDivTS
									)
			WHERE
					DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		ROWID IN (
								SELECT
									 SALES.ROW_ID
								FROM
									 (SELECT
										 SALES.CHARGE_ORGANIZATION_CD
										,SALES.VENDER_CD
										,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
										,SALES.DATA_TYPE
										,SALES.DATA_TOTAL_DIVISION
										,SALES.CATEGORY_DIVISION
										,SALES.ROWID AS ROW_ID
									  FROM
										 TEMPORARY_CLAIM_SALES SALES						--仮締め売上トラン
										,VENDER VENDER
									  WHERE
										  SALES.CHARGE_ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
									  AND SALES.ACCOUNT_YEARS <= nvAccountYears
									  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
									  AND SALES.INVOICE_UPDATE_DATE IS NULL
									  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
									  AND SALES.VENDER_CD = VENDER.VENDER_CD
									  AND VENDER_DIVISION = c_VenderDivTS
									 ) SALES
									,CLASSIFICATION CLASSIFICATION		--分類マスタ
								WHERE
								 ( (SALES.VENDER_CD = REC_MAIN.VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
								   SALES.INVOICE_CD = REC_MAIN.VENDER_CD )
								AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
								AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
								AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
								AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
							 )
			;

			IF TRNERRMAN.LOCK_PROC(11) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象外】仮締め売上トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE TEMPORARY_CLAIM_SALES
				SET
				 	CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
				,	INVOICE_CD	=	(												-- 請求先コード
										SELECT
											DECODE(PAYMENT_INVOICE_CD, NULL, VENDER_CD, PAYMENT_INVOICE_CD) AS INVOICE_CD
										FROM
											VENDER
										WHERE
											VENDER.VENDER_CD = REC_MAIN.VENDER_CD
										AND VENDER_DIVISION = c_VenderDivTS
									)
			WHERE
					DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		ROWID IN (
								SELECT
									 SALES.ROW_ID
								FROM
									 (SELECT
										 SALES.CHARGE_ORGANIZATION_CD
										,SALES.VENDER_CD
										,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
										,SALES.DATA_TYPE
										,SALES.DATA_TOTAL_DIVISION
										,SALES.CATEGORY_DIVISION
										,SALES.ROWID AS ROW_ID
									  FROM
										 TEMPORARY_CLAIM_SALES SALES						--仮締め売上トラン
										,VENDER VENDER
									  WHERE
										  SALES.CHARGE_ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
									  AND SALES.ACCOUNT_YEARS <= nvAccountYears
									  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
									  AND SALES.INVOICE_UPDATE_DATE IS NULL
					 			 	  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
									  AND SALES.VENDER_CD = VENDER.VENDER_CD
									  AND VENDER_DIVISION = c_VenderDivTS
									 ) SALES
									,CLASSIFICATION CLASSIFICATION		--分類マスタ
								WHERE
									 ( (SALES.VENDER_CD = REC_MAIN.VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
									   SALES.INVOICE_CD = REC_MAIN.VENDER_CD )
								AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
								AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
								AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
								AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv0			--請求対象外
							 )
			;

			IF TRNERRMAN.LOCK_PROC(11) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			-- 売掛更新未処理対象
			UPDATE TEMPORARY_CLAIM_SALES
				SET
				 	CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
				,	INVOICE_CD	=	(												-- 請求先コード
										SELECT
											DECODE(PAYMENT_INVOICE_CD, NULL, VENDER_CD, PAYMENT_INVOICE_CD) AS INVOICE_CD
										FROM
											VENDER
										WHERE
											VENDER.VENDER_CD = REC_MAIN.VENDER_CD
										AND VENDER_DIVISION = c_VenderDivTS
									)
			WHERE
					DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		ROWID IN (
								SELECT
									 SALES.ROW_ID
								FROM
									 (SELECT
										 SALES.CHARGE_ORGANIZATION_CD
										,SALES.VENDER_CD
										,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
										,SALES.DATA_TYPE
										,SALES.DATA_TOTAL_DIVISION
										,SALES.CATEGORY_DIVISION
										,SALES.ROWID AS ROW_ID
									  FROM
										 TEMPORARY_CLAIM_SALES SALES						--仮締め売上トラン
										,VENDER VENDER
									  WHERE
										  SALES.CHARGE_ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
									  AND SALES.ACCOUNT_YEARS <= nvAccountYears
									  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
									  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  				  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
									  AND SALES.VENDER_CD = VENDER.VENDER_CD
									  AND VENDER_DIVISION = c_VenderDivTS
									 ) SALES
									,CLASSIFICATION CLASSIFICATION		--分類マスタ
								WHERE
									 ( (SALES.VENDER_CD = REC_MAIN.VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
									   SALES.INVOICE_CD = REC_MAIN.VENDER_CD )
								AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
								AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
								AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
								AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv0			--請求対象外
							 )
			;

			IF TRNERRMAN.LOCK_PROC(12) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象】仮締め入金トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE TEMPORARY_CLAIM_CREDIT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		CREDIT_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									TEMPORARY_CLAIM_CREDIT.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
								AND TEMPORARY_CLAIM_CREDIT.DATA_TOTAL_DIVISION 	=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND TEMPORARY_CLAIM_CREDIT.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;
			-- 売掛更新未処理対象
--			UPDATE TEMPORARY_CLAIM_CREDIT
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						 CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,CLAIM_NO
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD		-- 会計部門
--					 	 c_ClaimTrgDiv1												-- 請求対象(処理済)
--					 	,c_ClaimUpdDiv1												-- 請求更新フラグ(更新済)
--					 	,nvClaimNo													-- 請求番号
--					 	,daCreditDate												-- 請求締め日
--					 	,SYSDATE													-- 更新日時
--					 	,P_STR_INPUTOR_CD											-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 FROM
--						 	 BUMON
--						 WHERE
--							 TEMPORARY_CLAIM_CREDIT.ORGANIZATION_CD			=	BUMON.SECTION_CD
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(12) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE TEMPORARY_CLAIM_CREDIT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		CREDIT_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									TEMPORARY_CLAIM_CREDIT.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
								AND TEMPORARY_CLAIM_CREDIT.DATA_TOTAL_DIVISION 	=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND TEMPORARY_CLAIM_CREDIT.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;

			IF TRNERRMAN.LOCK_PROC(12) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象外】仮締め入金トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE TEMPORARY_CLAIM_CREDIT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		CREDIT_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			;
			-- 売掛更新未処理対象
--			UPDATE TEMPORARY_CLAIM_CREDIT
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						 CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD		-- 会計部門
--					 	 c_ClaimTrgDiv9												-- 請求対象(対象外)
--					 	,c_ClaimUpdDiv1												-- 請求更新フラグ(更新済)
--					 	,daCreditDate												-- 請求締め日
--					 	,SYSDATE													-- 更新日時
--					 	,P_STR_INPUTOR_CD											-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 FROM
--						 	 BUMON
--						 WHERE
--							 TEMPORARY_CLAIM_CREDIT.ORGANIZATION_CD			=	BUMON.SECTION_CD
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(12) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE TEMPORARY_CLAIM_CREDIT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		CREDIT_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			;

			IF TRNERRMAN.LOCK_PROC(13) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象】仮締め支払トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE TEMPORARY_CLAIM_PAYMENT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		SUPPLIER_CD					=	REC_MAIN.VENDER_CD
			AND		PAYMENT_DATE			   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									TEMPORARY_CLAIM_PAYMENT.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
								AND TEMPORARY_CLAIM_PAYMENT.DATA_TOTAL_DIVISION =	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND TEMPORARY_CLAIM_PAYMENT.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;
			-- 売掛更新未処理対象
--			UPDATE TEMPORARY_CLAIM_PAYMENT
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						 CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,CLAIM_NO
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD		-- 会計部門
--					 	 c_ClaimTrgDiv1												-- 請求対象(処理済)
--					 	,c_ClaimUpdDiv1												-- 請求更新フラグ(更新済)
--					 	,nvClaimNo													-- 請求番号
--					 	,daCreditDate												-- 請求締め日
--					 	,SYSDATE													-- 更新日時
--					 	,P_STR_INPUTOR_CD											-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 FROM
--						 	 BUMON
--						 WHERE
--							 TEMPORARY_CLAIM_PAYMENT.ORGANIZATION_CD			=	BUMON.SECTION_CD
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(13) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE TEMPORARY_CLAIM_PAYMENT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		SUPPLIER_CD					=	REC_MAIN.VENDER_CD
			AND		PAYMENT_DATE			   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									TEMPORARY_CLAIM_PAYMENT.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
								AND TEMPORARY_CLAIM_PAYMENT.DATA_TOTAL_DIVISION =	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND TEMPORARY_CLAIM_PAYMENT.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;

			IF TRNERRMAN.LOCK_PROC(13) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象外】仮締め支払トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE TEMPORARY_CLAIM_PAYMENT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		SUPPLIER_CD					=	REC_MAIN.VENDER_CD
			AND		PAYMENT_DATE			   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			;
			-- 売掛更新未処理対象
--			UPDATE TEMPORARY_CLAIM_PAYMENT
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						 CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD		-- 会計部門
--					 	 c_ClaimTrgDiv9												-- 請求対象(対象外)
--					 	,c_ClaimUpdDiv1												-- 請求更新フラグ(更新済)
--					 	,daCreditDate												-- 請求締め日
--					 	,SYSDATE													-- 更新日時
--					 	,P_STR_INPUTOR_CD											-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 FROM
--						 	 BUMON
--						 WHERE
--							 TEMPORARY_CLAIM_PAYMENT.ORGANIZATION_CD			=	BUMON.SECTION_CD
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(13) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE TEMPORARY_CLAIM_PAYMENT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		SUPPLIER_CD					=	REC_MAIN.VENDER_CD
			AND		PAYMENT_DATE			   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			;

			IF TRNERRMAN.LOCK_PROC(14) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締めグループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象】仮締めグループ間相殺トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE TMPCLAIM_OFFSET_GROUP_DATA
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		OFFSET_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		DEPOSIT_OFFSET_AMOUNT		IS NOT NULL
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		VENDER_DIVISION				=	c_VenderDivTS					-- 得意先
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									TMPCLAIM_OFFSET_GROUP_DATA.DATA_TYPE				=	CLASSIFICATION.DATA_TYPE
								AND TMPCLAIM_OFFSET_GROUP_DATA.DATA_TOTAL_DIVISION		=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND TMPCLAIM_OFFSET_GROUP_DATA.CATEGORY_DIVISION		=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;
			-- 売掛更新未処理対象
--			UPDATE TMPCLAIM_OFFSET_GROUP_DATA
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						 DEBIT_TITLE_CD
--						,DEBIT_SUB_TITLE_CD
--						,CREDIT_TITLE_CD
--						,CREDIT_SUB_TITLE_CD
--						 CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,CLAIM_NO
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD			-- 会計部門
--					 	,NVL(MAX(DEBIT_ACCOUNTS_CD),'') AS DEBIT_ACCOUNTS_CD			-- 借方科目コード
--					 	,NVL(MAX(DEBIT_ACCOUNTS_SUB_CD),'') AS DEBIT_ACCOUNTS_SUB_CD	-- 借方補助科目コード
--					 	,NVL(MAX(CREDIT_ACCOUNTS_CD),'') AS CREDIT_ACCOUNTS_CD			-- 貸方科目コード
--					 	,NVL(MAX(CREDIT_ACCOUNTS_SUB_CD),'') AS CREDIT_ACCOUNTS_SUB_CD	-- 貸方補助科目コード
--					 	,c_ClaimTrgDiv1													-- 請求対象(処理済)
--					 	,c_ClaimUpdDiv1													-- 請求更新フラグ(更新済)
--					 	,nvClaimNo														-- 請求番号
--					 	,daCreditDate													-- 請求締め日
--					 	,SYSDATE														-- 更新日時
--					 	,P_STR_INPUTOR_CD												-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 	,CLASSIFICATION.DEBIT_ACCOUNTS_CD
--						 	,CLASSIFICATION.DEBIT_ACCOUNTS_SUB_CD
--						 	,CLASSIFICATION.CREDIT_ACCOUNTS_CD
--						 	,CLASSIFICATION.CREDIT_ACCOUNTS_SUB_CD
--						 FROM
--						 	 BUMON
--						 	,CLASSIFICATION
--						 WHERE
--						 		TMPCLAIM_OFFSET_GROUP_DATA.ORGANIZATION_CD		=	BUMON.SECTION_CD
--						 AND	TMPCLAIM_OFFSET_GROUP_DATA.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
--						 AND	TMPCLAIM_OFFSET_GROUP_DATA.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(14) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締めグループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE TMPCLAIM_OFFSET_GROUP_DATA
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		OFFSET_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		DEPOSIT_OFFSET_AMOUNT		IS NOT NULL
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		VENDER_DIVISION				=	c_VenderDivTS					-- 得意先
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									TMPCLAIM_OFFSET_GROUP_DATA.DATA_TYPE				=	CLASSIFICATION.DATA_TYPE
								AND TMPCLAIM_OFFSET_GROUP_DATA.DATA_TOTAL_DIVISION		=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND TMPCLAIM_OFFSET_GROUP_DATA.CATEGORY_DIVISION		=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;

			IF TRNERRMAN.LOCK_PROC(14) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締めグループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象外】仮締めグループ間相殺トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE TMPCLAIM_OFFSET_GROUP_DATA
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		OFFSET_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		VENDER_DIVISION				=	c_VenderDivTS					-- 得意先
			;
			-- 売掛更新未処理対象
--			UPDATE TMPCLAIM_OFFSET_GROUP_DATA
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						,DEBIT_TITLE_CD
--						,DEBIT_SUB_TITLE_CD
--						,CREDIT_TITLE_CD
--						,CREDIT_SUB_TITLE_CD
--						,CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD			-- 会計部門
--					 	,NVL(MAX(DEBIT_ACCOUNTS_CD),'') AS DEBIT_ACCOUNTS_CD			-- 借方科目コード
--					 	,NVL(MAX(DEBIT_ACCOUNTS_SUB_CD),'') AS DEBIT_ACCOUNTS_SUB_CD	-- 借方補助科目コード
--					 	,NVL(MAX(CREDIT_ACCOUNTS_CD),'') AS CREDIT_ACCOUNTS_CD			-- 貸方科目コード
--					 	,NVL(MAX(CREDIT_ACCOUNTS_SUB_CD),'') AS CREDIT_ACCOUNTS_SUB_CD	-- 貸方補助科目コード
--					 	,c_ClaimTrgDiv9													-- 請求対象(対象外)
--					 	,c_ClaimUpdDiv1													-- 請求更新フラグ(更新済)
--					 	,daCreditDate													-- 請求締め日
--					 	,SYSDATE														-- 更新日時
--					 	,P_STR_INPUTOR_CD												-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 	,CLASSIFICATION.DEBIT_ACCOUNTS_CD
--						 	,CLASSIFICATION.DEBIT_ACCOUNTS_SUB_CD
--						 	,CLASSIFICATION.CREDIT_ACCOUNTS_CD
--						 	,CLASSIFICATION.CREDIT_ACCOUNTS_SUB_CD
--						 FROM
--						 	 BUMON
--						 	,CLASSIFICATION
--						 WHERE
--						 		TMPCLAIM_OFFSET_GROUP_DATA.ORGANIZATION_CD			=	BUMON.SECTION_CD
--						 AND	TMPCLAIM_OFFSET_GROUP_DATA.DATA_TYPE				=	CLASSIFICATION.DATA_TYPE
--						 AND	TMPCLAIM_OFFSET_GROUP_DATA.CATEGORY_DIVISION		=	CLASSIFICATION.CATEGORY_DIVISION
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(14) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締めグループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE TMPCLAIM_OFFSET_GROUP_DATA
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		OFFSET_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		VENDER_DIVISION				=	c_VenderDivTS					-- 得意先
			;
			-- カウント
			nCount := nCount + 1;
<<SKIP_TMP_CLIM_UPDATE>>
			nCount := nCount;
		END LOOP;
		--------------------------------------------------------------------------------------
		--請求ヘッダー未作成の請求先の請求ヘッダーを金額0で登録する(未請求金額抽出処理のため) 
		--------------------------------------------------------------------------------------
		/* 仮締め請求ヘッダー未作成の請求先抽出 */
		FOR REC_MAIN IN curTempNotClaimVender(daCreditDate)
		LOOP
			-- 請求番号仮締め用取得(FUNCTION呼出)
			nvClaimNo := FUN_GET_CLAIM_NO_KARI(P_STR_INPUTOR_CD);
			-- 入金予定日取得(FUNCTION呼出)
			nvCreditScheDate := FUN_GET_CREDIT_SCHE_DATE(REC_MAIN.VENDER_CD, TO_CHAR(daCreditDate, 'YYYYMMDD'), 0);
			vVenderCd := REC_MAIN.VENDER_CD;
			-- 入金分類、手形サイト取得(PROCEDURE呼出)
			PRO_GET_CREDIT_DIV(REC_MAIN.VENDER_CD, 0, nvCreditDiv, nNoteSight);
			IF nvCreditDiv IS NULL THEN			-- 入金区分が確定できない請求先は処理対象外とする
				GOTO SKIP_TMP_NOT_CLIM_UPDATE;
			END IF;
			vCreditDiv := nvCreditDiv;
--				IF vCreditDiv IS NULL THEN
--					ROLLBACK;
--					P_NUM_RET := 9;
--					RETURN;
--				END IF;
			-- 取引先マスタ検索
			SELECT	BILL_PUBLISH				-- 請求書発行済フラグ
				,	HOLIDAY_FLG					-- 休日指定フラグ
			INTO	nBillPublish
				,	nHolidayFlg
			FROM	VENDER
			WHERE	VENDER_DIVISION		=	c_VenderDivTS
			AND		VENDER_CD			=	REC_MAIN.VENDER_CD
			;
			-- 請求書発行区分(1:発行する 2:発行しない)
			IF nBillPublish = 2 THEN
				nBillPublish := 9;		-- 発行不要
			ELSE
				nBillPublish := 0;		-- 未発行
			END IF;
			-- 仮締め請求ヘッダーデータ設定
			rtRecWork.CLAIM_NO			:= nvClaimNo;					-- 請求番号
			rtRecWork.ORGANIZATION_CD		:= REC_MAIN.ORGANIZATION_CD;			-- 部署コード
			rtRecWork.VENDER_CD			:= REC_MAIN.VENDER_CD;				-- 請求先コード
			rtRecWork.CREDIT_DATE			:= daCreditDate;				-- 請求締め日
			rtRecWork.CREDIT_SCHEDULED_DATE		:= TO_DATE(nvCreditScheDate, 'YYYY/MM/DD');	-- 入金予定日
			rtRecWork.CREDIT_DIVISION		:= nvCreditDiv;					-- 入金分類（決済方法）
			rtRecWork.NOTE_SIGHT			:= nNoteSight;					-- 手形サイト
			rtRecWork.HOLIDAY_FLG			:= nHolidayFlg;					-- 休日指定フラグ
			rtRecWork.CLAIM_AMOUNT_FORWARD		:= 0;						-- 前回請求額
			rtRecWork.CREDIT_AMOUNT_FORWARD		:= 0;						-- 前回入金額
			rtRecWork.OTHER_CREDIT_AMOUNT_FORWARD	:= 0;						-- その他入金金額
			rtRecWork.BALANCE_FORWARD		:= 0;						-- 差引繰越額
			rtRecWork.SALES_AMOUNT			:= 0;						-- 今回売上額
			rtRecWork.SALES_RETURNED_AMOUNT		:= 0;						-- 返品金額
			rtRecWork.SALES_DISCOUNT_AMOUNT		:= 0;						-- 値引金額
			rtRecWork.OTHER_SALES_AMOUNT		:= 0;						-- その他売上金額
			rtRecWork.OFFSET_AMOUNT			:= 0;						-- 相殺金額
			rtRecWork.TAX_AMOUNT			:= 0;						-- 消費税額
			rtRecWork.CLAIM_AMOUNT			:= 0;						-- 今回請求額
			rtRecWork.CLAIM_BALANCE_AMOUNT		:= 0;						-- 未請求額
			rtRecWork.ERASER_AMOUNT			:= 0;						-- 消込額
			rtRecWork.ERASER_BALANCE_AMOUNT		:= 0;						-- 消込残
			rtRecWork.BILL_DIVISION			:= nBillPublish;				-- 請求書発行済フラグ
			rtRecWork.ISSUE_DATE			:= NULL;					-- 発行日
			rtRecWork.ISSUER_CD			:= NULL;					-- 発行者ＩＤ
			rtRecWork.INPUT_DATE			:= SYSDATE;					-- 登録日時
			rtRecWork.INPUTOR_CD			:= P_STR_INPUTOR_CD;				-- 登録者ＩＤ
			rtRecWork.UPDATE_DATE			:= SYSDATE;					-- 更新日時
			rtRecWork.UPDATOR_CD			:= P_STR_INPUTOR_CD;				-- 更新者ＩＤ

			IF TRNERRMAN.LOCK_PROC(15) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '仮締め請求ヘッダーのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★請求ヘッダー登録
			--------------------------------------------------------------------------------
DBMS_OUTPUT.PUT_LINE('n:'||nCount||',v:'||REC_MAIN.VENDER_CD||',D:'||rtRecWork.CREDIT_DIVISION);
			INSERT INTO TEMPORARY_CLAIM_HEADER VALUES rtRecWork;
			-- カウント
			nCount := nCount + 1;
<<SKIP_TMP_NOT_CLIM_UPDATE>>
			nCount := nCount;
		END LOOP;
		--対象データなしの場合
		IF nCount = 0 THEN
			--ロールバック
			ROLLBACK;
			--戻り値設定
			P_NUM_RET := 9;

			TRNERRMAN.LOGOUT(DEF_PROC_NAME, '対象データがありません', P_STR_INPUTOR_CD);
	            	TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);

			RETURN;
		END IF;
	ELSE
	--------------------------------------------------------------------------------
	--【本締め】の場合
	--------------------------------------------------------------------------------
		--------------------------------------------------------------------------------
		--請求データ抽出処理
		--------------------------------------------------------------------------------
		/* 請求データ抽出 カーソル */
		FOR REC_MAIN IN curSales(daCreditDate, nvAccountYears)
		LOOP
			-- 指定請求締め日以降（指定請求締め日を含む）に、既に請求更新されている請求先は処理対象外とする
			SELECT
				COUNT(VENDER_CD)
			INTO nRecCount
			FROM CLAIM_HEADER
			WHERE	ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD 		= REC_MAIN.VENDER_CD
			AND		CREDIT_DATE		>= daCreditDate;
			IF nRecCount > 0 THEN
				GOTO SKIP_CLIM_UPDATE;
			END IF;
			-- 請求番号取得
			nvClaimNo := FUN_GET_CLAIM_NO(P_STR_INPUTOR_CD);
			-- 請求額
			nClaimAmount := REC_MAIN.CLAIM_AMOUNT - REC_MAIN.BALANCE_FORWARD;
			-- 入金予定日取得(FUNCTION呼出)
			nvCreditScheDate := FUN_GET_CREDIT_SCHE_DATE(REC_MAIN.VENDER_CD, TO_CHAR(daCreditDate, 'YYYYMMDD'), nClaimAmount);
			-- 入金分類、手形サイト取得(PROCEDURE呼出)
			PRO_GET_CREDIT_DIV(REC_MAIN.VENDER_CD, nClaimAmount, nvCreditDiv, nNoteSight);
--			IF nvCreditDiv IS NULL THEN
--				ROLLBACK;
--				P_NUM_RET := 9;
--				RETURN;
--			END IF;
			IF nvCreditDiv IS NULL THEN			-- 入金区分が確定できない請求先は処理対象外とする
				GOTO SKIP_CLIM_UPDATE;
			END IF;
			-- 取引先マスタ検索
			SELECT	BILL_PUBLISH				-- 請求書発行済フラグ
				,	HOLIDAY_FLG			-- 休日指定フラグ
			INTO	nBillPublish
				,	nHolidayFlg
			FROM	VENDER
			WHERE	VENDER_DIVISION		=	c_VenderDivTS
			AND		VENDER_CD			=	REC_MAIN.VENDER_CD
			;
			vVenderCd := REC_MAIN.VENDER_CD;
			-- 請求書発行区分(1:発行する 2:発行しない)
			IF nBillPublish = 2 THEN
				nBillPublish := 9;		-- 発行不要
			ELSE
				nBillPublish := 0;		-- 未発行
			END IF;
			-- 請求ヘッダーデータ設定
			rtRecWork.CLAIM_NO					:= nvClaimNo;						-- 請求番号
			rtRecWork.ORGANIZATION_CD			:= REC_MAIN.ORGANIZATION_CD;		-- 部署コード
			rtRecWork.VENDER_CD					:= REC_MAIN.VENDER_CD;				-- 請求先コード
			rtRecWork.CREDIT_DATE				:= daCreditDate;					-- 請求締め日
			rtRecWork.CREDIT_SCHEDULED_DATE		:= TO_DATE(nvCreditScheDate, 'YYYY/MM/DD');		-- 入金予定日
			rtRecWork.CREDIT_DIVISION			:= nvCreditDiv;						-- 入金分類（決済方法）
			rtRecWork.NOTE_SIGHT				:= nNoteSight;						-- 手形サイト
			rtRecWork.HOLIDAY_FLG				:= nHolidayFlg;						-- 休日指定フラグ
			rtRecWork.CLAIM_AMOUNT_FORWARD		:= REC_MAIN.CLAIM_AMOUNT_FORWARD;	-- 前回請求額
			rtRecWork.CREDIT_AMOUNT_FORWARD		:= REC_MAIN.CREDIT_AMOUNT_FORWARD;	-- 前回入金額
			rtRecWork.OTHER_CREDIT_AMOUNT_FORWARD	:= REC_MAIN.OTHER_CREDIT_AMOUNT_FORWARD;	-- その他入金金額
			rtRecWork.BALANCE_FORWARD			:= REC_MAIN.BALANCE_FORWARD;		-- 差引繰越額
			rtRecWork.SALES_AMOUNT				:= REC_MAIN.SALES_AMOUNT;			-- 今回売上額
			rtRecWork.SALES_RETURNED_AMOUNT		:= REC_MAIN.SALES_RETURNED_AMOUNT;	-- 返品金額
			rtRecWork.SALES_DISCOUNT_AMOUNT		:= REC_MAIN.SALES_DISCOUNT_AMOUNT;	-- 値引金額
			rtRecWork.OTHER_SALES_AMOUNT		:= REC_MAIN.OTHER_SALES_AMOUNT;		-- その他売上金額
			rtRecWork.OFFSET_AMOUNT				:= REC_MAIN.OFFSET_AMOUNT;			-- 相殺金額
			rtRecWork.TAX_AMOUNT				:= REC_MAIN.TAX_AMOUNT;				-- 消費税額
			rtRecWork.CLAIM_AMOUNT				:= REC_MAIN.CLAIM_AMOUNT;			-- 今回請求額
			rtRecWork.CLAIM_BALANCE_AMOUNT		:= 0;								-- 未請求額
			rtRecWork.ERASER_AMOUNT				:= 0;								-- 消込額
			rtRecWork.ERASER_BALANCE_AMOUNT		:= REC_MAIN.CLAIM_AMOUNT;			-- 消込残
			rtRecWork.BILL_DIVISION				:= nBillPublish;					-- 請求書発行済フラグ
			rtRecWork.ISSUE_DATE				:= NULL;							-- 発行日
			rtRecWork.ISSUER_CD					:= NULL;							-- 発行者ＩＤ
			rtRecWork.INPUT_DATE				:= SYSDATE;							-- 登録日時
			rtRecWork.INPUTOR_CD				:= P_STR_INPUTOR_CD;				-- 登録者ＩＤ
			rtRecWork.UPDATE_DATE				:= SYSDATE;							-- 更新日時
			rtRecWork.UPDATOR_CD				:= P_STR_INPUTOR_CD;				-- 更新者ＩＤ

			IF TRNERRMAN.LOCK_PROC(16) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求ヘッダーのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★請求ヘッダー登録
			--------------------------------------------------------------------------------
			INSERT INTO CLAIM_HEADER VALUES rtRecWork;
			----------------------------------------------------------------------------------------------------------
			--【請求対象】【請求対象外】の各トランザクション更新処理
			----------------------------------------------------------------------------------------------------------

			IF TRNERRMAN.LOCK_PROC(7) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象】売上トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE SALES
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
				,	INVOICE_CD	=	(												-- 請求先コード
										SELECT
											DECODE(PAYMENT_INVOICE_CD, NULL, VENDER_CD, PAYMENT_INVOICE_CD) AS INVOICE_CD
										FROM
											VENDER
										WHERE
											VENDER_CD = REC_MAIN.VENDER_CD
										AND VENDER_DIVISION = c_VenderDivTS
									)
			WHERE
					DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		ROWID IN (
								SELECT
									 SALES.ROW_ID
								FROM
									 (SELECT
										 SALES.CHARGE_ORGANIZATION_CD
										,SALES.VENDER_CD
										,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
										,SALES.DATA_TYPE
										,SALES.DATA_TOTAL_DIVISION
										,SALES.CATEGORY_DIVISION
										,SALES.ROWID AS ROW_ID
									  FROM
										 SALES SALES						--売上トラン
										,VENDER VENDER
									  WHERE
										  SALES.CHARGE_ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
									  AND SALES.ACCOUNT_YEARS <= nvAccountYears
									  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
									  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  				  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
									  AND SALES.VENDER_CD = VENDER.VENDER_CD
									  AND VENDER_DIVISION = c_VenderDivTS
									 ) SALES
									,CLASSIFICATION CLASSIFICATION		--分類マスタ
								WHERE
									( (SALES.VENDER_CD = REC_MAIN.VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
									  SALES.INVOICE_CD = REC_MAIN.VENDER_CD )
								AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
								AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
								AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
								AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
							 )
			;

			IF TRNERRMAN.LOCK_PROC(7) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			-- 売掛更新未処理対象
			UPDATE SALES
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
				,	INVOICE_CD	=	(												-- 請求先コード
										SELECT
											DECODE(PAYMENT_INVOICE_CD, NULL, VENDER_CD, PAYMENT_INVOICE_CD) AS INVOICE_CD
										FROM
											VENDER
										WHERE
											VENDER_CD = REC_MAIN.VENDER_CD
										AND VENDER_DIVISION = c_VenderDivTS
									)
			WHERE
					DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		ROWID IN (
								SELECT
									 SALES.ROW_ID
								FROM
									 (SELECT
										 SALES.CHARGE_ORGANIZATION_CD
										,SALES.VENDER_CD
										,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
										,SALES.DATA_TYPE
										,SALES.DATA_TOTAL_DIVISION
										,SALES.CATEGORY_DIVISION
										,SALES.ROWID AS ROW_ID
									  FROM
										 SALES SALES						--売上トラン
										,VENDER VENDER
									  WHERE
										  SALES.CHARGE_ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
									  AND SALES.ACCOUNT_YEARS <= nvAccountYears
									  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
									  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  				  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
									  AND SALES.VENDER_CD = VENDER.VENDER_CD
									  AND VENDER_DIVISION = c_VenderDivTS
									 ) SALES
									,CLASSIFICATION CLASSIFICATION		--分類マスタ
								WHERE
									( (SALES.VENDER_CD = REC_MAIN.VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
									  SALES.INVOICE_CD = REC_MAIN.VENDER_CD )
								AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
								AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
								AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
								AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
							 )
			;

			IF TRNERRMAN.LOCK_PROC(7) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象外】売上トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE SALES
				SET
				 	CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
				,	INVOICE_CD	=	(												-- 請求先コード
										SELECT
											DECODE(PAYMENT_INVOICE_CD, NULL, VENDER_CD, PAYMENT_INVOICE_CD) AS INVOICE_CD
										FROM
											VENDER
										WHERE
											VENDER.VENDER_CD = REC_MAIN.VENDER_CD
										AND VENDER_DIVISION = c_VenderDivTS
									)
			WHERE
					DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		ROWID IN (
								SELECT
									 SALES.ROW_ID
								FROM
									 (SELECT
										 SALES.CHARGE_ORGANIZATION_CD
										,SALES.VENDER_CD
										,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
										,SALES.DATA_TYPE
										,SALES.DATA_TOTAL_DIVISION
										,SALES.CATEGORY_DIVISION
										,SALES.ROWID AS ROW_ID
									  FROM
										 SALES SALES						--売上トラン
										,VENDER VENDER
									  WHERE
										  SALES.CHARGE_ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
									  AND SALES.ACCOUNT_YEARS <= nvAccountYears
									  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
									  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  				  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
									  AND SALES.VENDER_CD = VENDER.VENDER_CD
									  AND VENDER_DIVISION = c_VenderDivTS
									 ) SALES
									,CLASSIFICATION CLASSIFICATION		--分類マスタ
								WHERE
									( (SALES.VENDER_CD = REC_MAIN.VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
									  SALES.INVOICE_CD = REC_MAIN.VENDER_CD )
								AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
								AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
								AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
								AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv0			--請求対象外
							 )
			;

			IF TRNERRMAN.LOCK_PROC(7) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '売上トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			-- 売掛更新未処理対象
			UPDATE SALES
				SET
				 	CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
				,	INVOICE_CD	=	(												-- 請求先コード
										SELECT
											DECODE(PAYMENT_INVOICE_CD, NULL, VENDER_CD, PAYMENT_INVOICE_CD) AS INVOICE_CD
										FROM
											VENDER
										WHERE
											VENDER.VENDER_CD = REC_MAIN.VENDER_CD
										AND VENDER_DIVISION = c_VenderDivTS
									)
			WHERE
					DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		ROWID IN (
								SELECT
									 SALES.ROW_ID
								FROM
									 (SELECT
										 SALES.CHARGE_ORGANIZATION_CD
										,SALES.VENDER_CD
										,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
										,SALES.DATA_TYPE
										,SALES.DATA_TOTAL_DIVISION
										,SALES.CATEGORY_DIVISION
										,SALES.ROWID AS ROW_ID
									  FROM
										 SALES SALES						--売上トラン
										,VENDER VENDER
									  WHERE
										  SALES.CHARGE_ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
									  AND SALES.ACCOUNT_YEARS <= nvAccountYears
									  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
									  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  				  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
									  AND SALES.VENDER_CD = VENDER.VENDER_CD
									  AND VENDER_DIVISION = c_VenderDivTS
									 ) SALES
									,CLASSIFICATION CLASSIFICATION		--分類マスタ
								WHERE
									( (SALES.VENDER_CD = REC_MAIN.VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
									  SALES.INVOICE_CD = REC_MAIN.VENDER_CD )
								AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
								AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
								AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
								AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv0			--請求対象外
							 )
			;

			IF TRNERRMAN.LOCK_PROC(8) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
 		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象】入金トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE CREDIT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		CREDIT_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									CREDIT.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
								AND CREDIT.DATA_TOTAL_DIVISION	=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND CREDIT.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;
			-- 売掛更新未処理対象
--			UPDATE CREDIT
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						,CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,CLAIM_NO
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD		-- 会計部門
--					 	,c_ClaimTrgDiv1												-- 請求対象(処理済)
--					 	,c_ClaimUpdDiv1												-- 請求更新フラグ(更新済)
--					 	,nvClaimNo													-- 請求番号
--					 	,daCreditDate												-- 請求締め日
--					 	,SYSDATE													-- 更新日時
--					 	,P_STR_INPUTOR_CD											-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 FROM
--						 	 BUMON
--						 WHERE
--							 CREDIT.ORGANIZATION_CD			=	BUMON.SECTION_CD
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(8) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE CREDIT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		CREDIT_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									CREDIT.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
								AND CREDIT.DATA_TOTAL_DIVISION	=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND CREDIT.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;

			IF TRNERRMAN.LOCK_PROC(8) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象外】入金トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE CREDIT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		CREDIT_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			;
			-- 売掛更新未処理対象
--			UPDATE CREDIT
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						,CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD		-- 会計部門
--					 	,c_ClaimTrgDiv9												-- 請求対象(対象外)
--					 	,c_ClaimUpdDiv1												-- 請求更新フラグ(更新済)
--					 	,daCreditDate												-- 請求締め日
--					 	,SYSDATE													-- 更新日時
--					 	,P_STR_INPUTOR_CD											-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 FROM
--						 	 BUMON
--						 WHERE
--							 CREDIT.ORGANIZATION_CD			=	BUMON.SECTION_CD
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(8) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '入金トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE CREDIT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD					=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		CREDIT_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			;

			IF TRNERRMAN.LOCK_PROC(9) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象】支払トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE PAYMENT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD					=	REC_MAIN.ORGANIZATION_CD
			AND		SUPPLIER_CD					=	REC_MAIN.VENDER_CD
			AND		PAYMENT_DATE			   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									PAYMENT.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
								AND PAYMENT.DATA_TOTAL_DIVISION	=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND PAYMENT.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;
			-- 売掛更新未処理対象
--			UPDATE PAYMENT
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						,CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,CLAIM_NO
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD		-- 会計部門
--					 	,c_ClaimTrgDiv1												-- 請求対象(処理済)
--					 	,c_ClaimUpdDiv1												-- 請求更新フラグ(更新済)
--					 	,nvClaimNo													-- 請求番号
--					 	,daCreditDate												-- 請求締め日
--					 	,SYSDATE													-- 更新日時
--					 	,P_STR_INPUTOR_CD											-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 FROM
--						 	 BUMON
--						 WHERE
--							 PAYMENT.ORGANIZATION_CD			=	BUMON.SECTION_CD
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(9) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE PAYMENT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		SUPPLIER_CD					=	REC_MAIN.VENDER_CD
			AND		PAYMENT_DATE			   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									PAYMENT.DATA_TYPE			=	CLASSIFICATION.DATA_TYPE
								AND PAYMENT.DATA_TOTAL_DIVISION	=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND PAYMENT.CATEGORY_DIVISION	=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;

			IF TRNERRMAN.LOCK_PROC(9) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象外】支払トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE PAYMENT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		SUPPLIER_CD					=	REC_MAIN.VENDER_CD
			AND		PAYMENT_DATE			   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			;
			-- 売掛更新未処理対象
--			UPDATE PAYMENT
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						 CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD		-- 会計部門
--					 	 c_ClaimTrgDiv9												-- 請求対象(対象外)
--					 	,c_ClaimUpdDiv1												-- 請求更新フラグ(更新済)
--					 	,daCreditDate												-- 請求締め日
--					 	,SYSDATE													-- 更新日時
--					 	,P_STR_INPUTOR_CD											-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 FROM
--						 	 BUMON
--						 WHERE
--							 PAYMENT.ORGANIZATION_CD			=	BUMON.SECTION_CD
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(9) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '支払トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE PAYMENT
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		SUPPLIER_CD					=	REC_MAIN.VENDER_CD
			AND		PAYMENT_DATE			   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			;

			IF TRNERRMAN.LOCK_PROC(10) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, 'グループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象】グループ間相殺トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE OFFSET_GROUP_DATA
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		OFFSET_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		DEPOSIT_OFFSET_AMOUNT		IS NOT NULL
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		VENDER_DIVISION				=	c_VenderDivTS					-- 得意先
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									OFFSET_GROUP_DATA.DATA_TYPE				=	CLASSIFICATION.DATA_TYPE
								AND OFFSET_GROUP_DATA.DATA_TOTAL_DIVISION	=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND OFFSET_GROUP_DATA.CATEGORY_DIVISION		=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;
			-- 売掛更新未処理対象
--			UPDATE OFFSET_GROUP_DATA
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						,DEBIT_TITLE_CD
--						,DEBIT_SUB_TITLE_CD
--						,CREDIT_TITLE_CD
--						,CREDIT_SUB_TITLE_CD
--						,CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,CLAIM_NO
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD			-- 会計部門
--					 	 NVL(MAX(DEBIT_ACCOUNTS_CD),'') AS DEBIT_ACCOUNTS_CD			-- 借方科目コード
--					 	,NVL(MAX(DEBIT_ACCOUNTS_SUB_CD),'') AS DEBIT_ACCOUNTS_SUB_CD	-- 借方補助科目コード
--					 	,NVL(MAX(CREDIT_ACCOUNTS_CD),'') AS CREDIT_ACCOUNTS_CD			-- 貸方科目コード
--					 	,NVL(MAX(CREDIT_ACCOUNTS_SUB_CD),'') AS CREDIT_ACCOUNTS_SUB_CD	-- 貸方補助科目コード
--					 	,c_ClaimTrgDiv1													-- 請求対象(処理済)
--					 	,c_ClaimUpdDiv1													-- 請求更新フラグ(更新済)
--					 	,nvClaimNo														-- 請求番号
--					 	,daCreditDate													-- 請求締め日
--					 	,SYSDATE														-- 更新日時
--					 	,P_STR_INPUTOR_CD												-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 	,CLASSIFICATION.DEBIT_ACCOUNTS_CD
--						 	,CLASSIFICATION.DEBIT_ACCOUNTS_SUB_CD
--						 	,CLASSIFICATION.CREDIT_ACCOUNTS_CD
--						 	,CLASSIFICATION.CREDIT_ACCOUNTS_SUB_CD
--						 FROM
--						 	 BUMON
--						 	,CLASSIFICATION
--						 WHERE
--						 		OFFSET_GROUP_DATA.ORGANIZATION_CD			=	BUMON.SECTION_CD
--						 AND	OFFSET_GROUP_DATA.DATA_TYPE				=	CLASSIFICATION.DATA_TYPE
--						 AND	OFFSET_GROUP_DATA.CATEGORY_DIVISION		=	CLASSIFICATION.CATEGORY_DIVISION
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(10) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, 'グループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE OFFSET_GROUP_DATA
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv1					-- 請求対象(処理済)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	CLAIM_NO					=	nvClaimNo						-- 請求番号
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		OFFSET_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		DEPOSIT_OFFSET_AMOUNT		IS NOT NULL
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		VENDER_DIVISION				=	c_VenderDivTS					-- 得意先
			AND		c_ClDiv1 = (													-- 請求対象
								SELECT
									CLAIM_DIVISION
								FROM
									CLASSIFICATION
								WHERE
									OFFSET_GROUP_DATA.DATA_TYPE				=	CLASSIFICATION.DATA_TYPE
								AND OFFSET_GROUP_DATA.DATA_TOTAL_DIVISION	=	CLASSIFICATION.DATA_TOTAL_DIVISION
								AND OFFSET_GROUP_DATA.CATEGORY_DIVISION		=	CLASSIFICATION.CATEGORY_DIVISION
							   )
			;

			IF TRNERRMAN.LOCK_PROC(10) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, 'グループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★【請求対象外】グループ間相殺トランザクション更新
			--------------------------------------------------------------------------------
			-- 売掛更新済対象
			UPDATE OFFSET_GROUP_DATA
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		OFFSET_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv1				-- 売掛更新フラグ(更新済)
			AND		DELIVERY_UPDATE_DATE		IS NOT NULL							-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		VENDER_DIVISION				=	c_VenderDivTS					-- 得意先
			;
			-- 売掛更新未処理対象
--			UPDATE OFFSET_GROUP_DATA
--				SET
--					(
--						 ACCOUNT_SECTION_CD
--						,DEBIT_TITLE_CD
--						,DEBIT_SUB_TITLE_CD
--						,CREDIT_TITLE_CD
--						,CREDIT_SUB_TITLE_CD
--						,CLAIM_TARGET_DIVISION
--						,CLAIM_UPDATE_DIVISION
--						,INVOICE_UPDATE_DATE
--						,UPDATE_DATE
--						,UPDATOR_CD
--					)
--					=
--					(
--					 SELECT
--					 	 NVL(MAX(ACCOUNT_SECTION_CD),'') AS ACCOUNT_SECTION_CD			-- 会計部門
--					 	,NVL(MAX(DEBIT_ACCOUNTS_CD),'') AS DEBIT_ACCOUNTS_CD			-- 借方科目コード
--					 	,NVL(MAX(DEBIT_ACCOUNTS_SUB_CD),'') AS DEBIT_ACCOUNTS_SUB_CD	-- 借方補助科目コード
--					 	,NVL(MAX(CREDIT_ACCOUNTS_CD),'') AS CREDIT_ACCOUNTS_CD			-- 貸方科目コード
--					 	,NVL(MAX(CREDIT_ACCOUNTS_SUB_CD),'') AS CREDIT_ACCOUNTS_SUB_CD	-- 貸方補助科目コード
--					 	,c_ClaimTrgDiv9													-- 請求対象(対象外)
--					 	,c_ClaimUpdDiv1													-- 請求更新フラグ(更新済)
--					 	,daCreditDate													-- 請求締め日
--					 	,SYSDATE														-- 更新日時
--					 	,P_STR_INPUTOR_CD												-- 更新者ＩＤ
--					 FROM
--					 	(
--						 SELECT
--						 	 BUMON.ACCOUNT_SECTION_CD
--						 	,CLASSIFICATION.DEBIT_ACCOUNTS_CD
--						 	,CLASSIFICATION.DEBIT_ACCOUNTS_SUB_CD
--						 	,CLASSIFICATION.CREDIT_ACCOUNTS_CD
--						 	,CLASSIFICATION.CREDIT_ACCOUNTS_SUB_CD
--						 FROM
--						 	 BUMON
--						 	,CLASSIFICATION
--						 WHERE
--						 		OFFSET_GROUP_DATA.ORGANIZATION_CD			=	BUMON.SECTION_CD
--						 AND	OFFSET_GROUP_DATA.DATA_TYPE				=	CLASSIFICATION.DATA_TYPE
--						 AND	OFFSET_GROUP_DATA.CATEGORY_DIVISION		=	CLASSIFICATION.CATEGORY_DIVISION
--					 	)
--					)
			IF TRNERRMAN.LOCK_PROC(10) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, 'グループ間相殺トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			UPDATE OFFSET_GROUP_DATA
				SET
					CLAIM_TARGET_DIVISION		=	c_ClaimTrgDiv9					-- 請求対象(対象外)
				,	CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv1					-- 請求更新フラグ(更新済)
				,	INVOICE_UPDATE_DATE			=	daCreditDate					-- 請求締め日
				,	UPDATE_DATE					=	SYSDATE							-- 更新日時
				,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ＩＤ
			WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD					=	REC_MAIN.VENDER_CD
			AND		OFFSET_DATE				   <=	daCreditDate
			AND		DEPOSIT_UPDATE_DIVISION		=	c_DepositUpdDiv0				-- 売掛更新フラグ(未処理)
			AND		DELIVERY_UPDATE_DATE		IS NULL								-- 売掛締め日
			AND		CLAIM_UPDATE_DIVISION		=	c_ClaimUpdDiv0					-- 請求更新フラグ(未処理)
			AND		INVOICE_UPDATE_DATE			IS NULL								-- 請求締め日
			AND		APPROVAL_STATUS				=	c_ApprovalSts3					-- 承認ステータス(承認済)
			AND		VENDER_DIVISION				=	c_VenderDivTS					-- 得意先
			;
			--------------------------------------------------------------------------------
			--カスタマイズ処理
			--------------------------------------------------------------------------------

			IF TRNERRMAN.LOCK_PROC(17) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '消込トランザクションのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			-------------------------------------------------
			--★消込トラン(カスタマイズ)登録処理
			-------------------------------------------------
			INSERT INTO ERASER_CSM
			SELECT
				 SALES.ORGANIZATION_CD AS ORGANIZATION_CD							--部署コード
				,SALES.INVOICE_CD AS INVOICE_CD										--請求先コード
				,SALES.DATA_TYPE AS DATA_TYPE										--ﾃﾞｰﾀ種別
				,SALES.SALES_NO AS SLIP_NO											--売上番号
				,MAX(SALES.PROCESSING_DATE) AS PROCESSING_DATE						--処理日付
				,SUM(SALES.ERASER_OBJECT_AMOUNT) AS ERASER_OBJECT_AMOUNT			--消込対象額
				,SUM(SALES.ERASER_AMOUNT) AS ERASER_AMOUNT							--消込額
				,SUM(SALES.ERASER_BALANCE_AMOUNT) AS ERASER_BALANCE_AMOUNT			--消込残
				,MAX(SALES.ERASER_COMPLETE_DIVISION) AS ERASER_COMPLETE_DIVISION	--消込完了フラグ
				,MAX(SALES.ERASER_COMPLETE_DATE) AS ERASER_COMPLETE_DATE			--消込完了日
				,MAX(SALES.INVOICE_UPDATE_DATE) AS INVOICE_UPDATE_DATE				--請求締め日
				,MAX(SALES.CLAIM_NO) AS CLAIM_NO									--請求番号
				,MAX(SALES.APPROVAL_STATUS) AS APPROVAL_STATUS						--承認ステータス
				,MAX(SALES.APPROVEDBY) AS APPROVEDBY								--承認者
				,MAX(SALES.APPROVALDATE) AS APPROVALDATE							--承認日
				,MAX(SALES.ERASER_DATE) AS ERASER_DATE								--消込日付  add by okmt.tc 2009.6.29
				,MAX(SALES.ERASER_UPDATE_DATE) AS ERASER_UPDATE_DATE				--消込更新日時
				,MAX(SALES.ERASEROR_CD) AS ERASEROR_CD								--消込担当者ＩＤ
				,MAX(SALES.INPUT_DATE) AS INPUT_DATE								--登録日時
				,MAX(SALES.INPUTOR_CD) AS INPUTOR_CD								--登録者ＩＤ
				,MAX(SALES.UPDATE_DATE) AS UPDATE_DATE								--更新日時
				,MAX(SALES.UPDATOR_CD) AS UPDATOR_CD								--更新者ＩＤ
			FROM
				(
				SELECT
					 CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
					,INVOICE_CD AS INVOICE_CD													--請求先コード
					,DATA_TYPE AS DATA_TYPE														--ﾃﾞｰﾀ種別
					,SALES_NO AS SALES_NO														--売上番号
					,SALES_DATE AS PROCESSING_DATE												--売上日付
--					,(SALES_AMOUNT+TAX_AMOUNT) AS ERASER_OBJECT_AMOUNT							--売上金額(内税の場合は＋消費税額)
                    ,CASE DATA_TOTAL_DIVISION
                    	WHEN 1 THEN DECODE(SUBSTR(CATEGORY_DIVISION, 1, 1), '-', (SALES_AMOUNT + TAX_AMOUNT) * -1, SALES_AMOUNT + TAX_AMOUNT) --売上
                    	WHEN 2 THEN DECODE(SUBSTR(CATEGORY_DIVISION, 1, 1), '-', SALES_AMOUNT + TAX_AMOUNT, (SALES_AMOUNT + TAX_AMOUNT) * -1) --返品
                    	WHEN 3 THEN DECODE(SUBSTR(CATEGORY_DIVISION, 1, 1), '-', SALES_AMOUNT + TAX_AMOUNT, (SALES_AMOUNT + TAX_AMOUNT) * -1) --値引
                    	WHEN 4 THEN DECODE(SUBSTR(CATEGORY_DIVISION, 1, 1), '-', (SALES_AMOUNT + TAX_AMOUNT) * -1, SALES_AMOUNT + TAX_AMOUNT) --運賃
                    END ERASER_OBJECT_AMOUNT													--売上金額(内税の場合は＋消費税額)
					,0 AS ERASER_AMOUNT															--消込額
--					,(SALES_AMOUNT+SALES.TAX_AMOUNT) AS ERASER_BALANCE_AMOUNT					--売上金額(内税の場合は＋消費税額)
                    ,CASE DATA_TOTAL_DIVISION
                    	WHEN 1 THEN DECODE(SUBSTR(CATEGORY_DIVISION, 1, 1), '-', (SALES_AMOUNT + TAX_AMOUNT) * -1, SALES_AMOUNT + TAX_AMOUNT) --売上
                    	WHEN 2 THEN DECODE(SUBSTR(CATEGORY_DIVISION, 1, 1), '-', SALES_AMOUNT + TAX_AMOUNT, (SALES_AMOUNT + TAX_AMOUNT) * -1) --返品
                    	WHEN 3 THEN DECODE(SUBSTR(CATEGORY_DIVISION, 1, 1), '-', SALES_AMOUNT + TAX_AMOUNT, (SALES_AMOUNT + TAX_AMOUNT) * -1) --値引
                    	WHEN 4 THEN DECODE(SUBSTR(CATEGORY_DIVISION, 1, 1), '-', (SALES_AMOUNT + TAX_AMOUNT) * -1, SALES_AMOUNT + TAX_AMOUNT) --運賃
                    END ERASER_BALANCE_AMOUNT													--売上金額(内税の場合は＋消費税額)
					,0 AS ERASER_COMPLETE_DIVISION												--消込完了フラグ
					,NULL AS ERASER_COMPLETE_DATE												--消込完了日
					,INVOICE_UPDATE_DATE AS INVOICE_UPDATE_DATE									--請求締め日
					,CLAIM_NO AS CLAIM_NO														--請求番号
					,1 AS APPROVAL_STATUS														--承認ステータス(1：入力中)
					,NULL AS APPROVEDBY															--承認者
					,NULL AS APPROVALDATE														--承認日
					,NULL AS ERASER_DATE								--消込日付  add by okmt.tc 2009.6.29
					,NULL AS ERASER_UPDATE_DATE													--消込更新日時
					,NULL AS ERASEROR_CD														--消込担当者ＩＤ
					,SYSDATE AS INPUT_DATE														--登録日時
					,P_STR_INPUTOR_CD AS INPUTOR_CD												--登録者ＩＤ
					,SYSDATE AS UPDATE_DATE														--更新日時
					,P_STR_INPUTOR_CD AS UPDATOR_CD												--更新者ＩＤ
				FROM
					 SALES
				WHERE
					CHARGE_ORGANIZATION_CD		=	REC_MAIN.ORGANIZATION_CD
				AND	INVOICE_CD					=	REC_MAIN.VENDER_CD
				AND CLAIM_UPDATE_DIVISION		=	'1'								--請求更新済
				AND CLAIM_TARGET_DIVISION		=	'1'								--請求対象 
				AND CLAIM_NO					=	nvClaimNo						--請求番号
				) SALES																--売上トラン
			GROUP BY
				 SALES.ORGANIZATION_CD
				,SALES.INVOICE_CD
				,SALES.DATA_TYPE
				,SALES.SALES_NO
			UNION ALL
			SELECT
				 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD							--部署コード
				,CREDIT.INVOICE_CD AS INVOICE_CD									--請求先コード
				,CREDIT.DATA_TYPE AS DATA_TYPE										--ﾃﾞｰﾀ種別
				,CREDIT.SLIP_NO AS SLIP_NO											--伝票番号
				,MAX(CREDIT.PROCESSING_DATE) AS PROCESSING_DATE						--処理日付
				,SUM(CREDIT.ERASER_OBJECT_AMOUNT)*-1 AS ERASER_OBJECT_AMOUNT		--消込対象額
				,SUM(CREDIT.ERASER_AMOUNT) AS ERASER_AMOUNT							--消込額
				,SUM(CREDIT.ERASER_BALANCE_AMOUNT)*-1 AS ERASER_BALANCE_AMOUNT		--消込残
				,MAX(CREDIT.ERASER_COMPLETE_DIVISION) AS ERASER_COMPLETE_DIVISION	--消込完了フラグ
				,MAX(CREDIT.ERASER_COMPLETE_DATE) AS ERASER_COMPLETE_DATE			--消込完了日
				,MAX(CREDIT.INVOICE_UPDATE_DATE) AS INVOICE_UPDATE_DATE				--請求締め日
				,MAX(CREDIT.CLAIM_NO) AS CLAIM_NO									--請求番号
				,MAX(CREDIT.APPROVAL_STATUS) AS APPROVAL_STATUS						--承認ステータス
				,MAX(CREDIT.APPROVEDBY) AS APPROVEDBY								--承認者
				,MAX(CREDIT.APPROVALDATE) AS APPROVALDATE							--承認日
				,MAX(CREDIT.ERASER_DATE) AS ERASER_DATE								--消込日付  add by okmt.tc 2009.6.29
				,MAX(CREDIT.ERASER_UPDATE_DATE) AS ERASER_UPDATE_DATE				--消込更新日時
				,MAX(CREDIT.ERASEROR_CD) AS ERASEROR_CD								--消込担当者ＩＤ
				,MAX(CREDIT.INPUT_DATE) AS INPUT_DATE								--登録日時
				,MAX(CREDIT.INPUTOR_CD) AS INPUTOR_CD								--登録者ＩＤ
				,MAX(CREDIT.UPDATE_DATE) AS UPDATE_DATE								--更新日時
				,MAX(CREDIT.UPDATOR_CD) AS UPDATOR_CD								--更新者ＩＤ
			FROM
				(
				SELECT
					 ORGANIZATION_CD AS ORGANIZATION_CD								--部署コード
					,VENDER_CD AS INVOICE_CD										--請求先コード
					,DATA_TYPE AS DATA_TYPE											--ﾃﾞｰﾀ種別
					,CREDIT_NO AS SLIP_NO											--入金番号
					,CREDIT_DATE AS PROCESSING_DATE									--入金日付
					,CREDIT_AMOUNT AS ERASER_OBJECT_AMOUNT							--入金金額
					,0 AS ERASER_AMOUNT												--消込額
					,CREDIT_AMOUNT AS ERASER_BALANCE_AMOUNT							--入金金額
					,0 AS ERASER_COMPLETE_DIVISION									--消込完了フラグ
					,NULL AS ERASER_COMPLETE_DATE									--消込完了日
					,INVOICE_UPDATE_DATE AS INVOICE_UPDATE_DATE						--請求締め日
					,CLAIM_NO AS CLAIM_NO											--請求番号
					,1 AS APPROVAL_STATUS											--承認ステータス(1：入力中)
					,NULL AS APPROVEDBY												--承認者
					,NULL AS APPROVALDATE											--承認日
					,NULL AS ERASER_DATE								--消込日付  add by okmt.tc 2009.6.29
					,NULL AS ERASER_UPDATE_DATE										--消込更新日時
					,NULL AS ERASEROR_CD											--消込担当者ＩＤ
					,SYSDATE AS INPUT_DATE											--登録日時
					,P_STR_INPUTOR_CD AS INPUTOR_CD									--登録者ＩＤ
					,SYSDATE AS UPDATE_DATE											--更新日時
					,P_STR_INPUTOR_CD AS UPDATOR_CD									--更新者ＩＤ
				FROM
					 CREDIT
				WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
				AND	VENDER_CD					=	REC_MAIN.VENDER_CD
--				AND DATA_TOTAL_DIVISION			=	'1'								--データ集計区分(入金)
				AND DATA_TOTAL_DIVISION			=	'2'								--データ集計区分(相殺)
				AND CLAIM_UPDATE_DIVISION		=	'1'								--請求更新済
				AND CLAIM_TARGET_DIVISION		=	'1'								--請求対象 
				AND CLAIM_NO					=	nvClaimNo						--請求番号
				) CREDIT															--入金トラン
			GROUP BY
				 CREDIT.ORGANIZATION_CD
				,CREDIT.INVOICE_CD
				,CREDIT.DATA_TYPE
				,CREDIT.SLIP_NO
			UNION ALL
			SELECT
				 PAYMENT.ORGANIZATION_CD AS ORGANIZATION_CD							--部署コード
				,PAYMENT.INVOICE_CD AS INVOICE_CD									--請求先コード
				,PAYMENT.DATA_TYPE AS DATA_TYPE										--ﾃﾞｰﾀ種別
				,PAYMENT.SLIP_NO AS SLIP_NO											--伝票番号
				,MAX(PAYMENT.PROCESSING_DATE) AS PROCESSING_DATE					--処理日付
				,SUM(PAYMENT.ERASER_OBJECT_AMOUNT)*-1 AS ERASER_OBJECT_AMOUNT		--消込対象額
				,SUM(PAYMENT.ERASER_AMOUNT) AS ERASER_AMOUNT						--消込額
				,SUM(PAYMENT.ERASER_BALANCE_AMOUNT)*-1 AS ERASER_BALANCE_AMOUNT		--消込残
				,MAX(PAYMENT.ERASER_COMPLETE_DIVISION) AS ERASER_COMPLETE_DIVISION	--消込完了フラグ
				,MAX(PAYMENT.ERASER_COMPLETE_DATE) AS ERASER_COMPLETE_DATE			--消込完了日
				,MAX(PAYMENT.INVOICE_UPDATE_DATE) AS INVOICE_UPDATE_DATE			--請求締め日
				,MAX(PAYMENT.CLAIM_NO) AS CLAIM_NO									--請求番号
				,MAX(PAYMENT.APPROVAL_STATUS) AS APPROVAL_STATUS						--承認ステータス
				,MAX(PAYMENT.APPROVEDBY) AS APPROVEDBY								--承認者
				,MAX(PAYMENT.APPROVALDATE) AS APPROVALDATE							--承認日
				,MAX(PAYMENT.ERASER_DATE) AS ERASER_DATE								--消込日付  add by okmt.tc 2009.6.29
				,MAX(PAYMENT.ERASER_UPDATE_DATE) AS ERASER_UPDATE_DATE				--消込更新日時
				,MAX(PAYMENT.ERASEROR_CD) AS ERASEROR_CD							--消込担当者ＩＤ
				,MAX(PAYMENT.INPUT_DATE) AS INPUT_DATE								--登録日時
				,MAX(PAYMENT.INPUTOR_CD) AS INPUTOR_CD								--登録者ＩＤ
				,MAX(PAYMENT.UPDATE_DATE) AS UPDATE_DATE							--更新日時
				,MAX(PAYMENT.UPDATOR_CD) AS UPDATOR_CD								--更新者ＩＤ
			FROM
				(
				SELECT
					 ORGANIZATION_CD AS ORGANIZATION_CD										--部署コード
					,SUPPLIER_CD AS INVOICE_CD										--仕入先コード
					,DATA_TYPE AS DATA_TYPE											--ﾃﾞｰﾀ種別
					,SLIP_NO AS SLIP_NO												--伝票番号
					,PAYMENT_DATE AS PROCESSING_DATE								--支払日付
					,PAYMENT_AMOUNT AS ERASER_OBJECT_AMOUNT							--支払金額
					,0 AS ERASER_AMOUNT												--消込額
					,PAYMENT_AMOUNT AS ERASER_BALANCE_AMOUNT						--支払金額
					,0 AS ERASER_COMPLETE_DIVISION									--消込完了フラグ
					,NULL AS ERASER_COMPLETE_DATE									--消込完了日
					,INVOICE_UPDATE_DATE AS INVOICE_UPDATE_DATE						--請求締め日
					,CLAIM_NO AS CLAIM_NO											--請求番号
					,1 AS APPROVAL_STATUS											--承認ステータス(1：入力中)
					,NULL AS APPROVEDBY												--承認者
					,NULL AS APPROVALDATE											--承認日
					,NULL AS ERASER_DATE								--消込日付  add by okmt.tc 2009.6.29
					,NULL AS ERASER_UPDATE_DATE										--消込更新日時
					,NULL AS ERASEROR_CD											--消込担当者ＩＤ
					,SYSDATE AS INPUT_DATE											--登録日時
					,P_STR_INPUTOR_CD AS INPUTOR_CD									--登録者ＩＤ
					,SYSDATE AS UPDATE_DATE											--更新日時
					,P_STR_INPUTOR_CD AS UPDATOR_CD									--更新者ＩＤ
				FROM
					 PAYMENT
				WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
				AND	SUPPLIER_CD					=	REC_MAIN.VENDER_CD
				AND DATA_TOTAL_DIVISION			=	'2'								--データ集計区分(相殺)
				AND CLAIM_UPDATE_DIVISION		=	'1'								--請求更新済
				AND CLAIM_TARGET_DIVISION		=	'1'								--請求対象 
				AND CLAIM_NO					=	nvClaimNo						--請求番号
				) PAYMENT															--支払トラン
			GROUP BY
				 PAYMENT.ORGANIZATION_CD
				,PAYMENT.INVOICE_CD
				,PAYMENT.DATA_TYPE
				,PAYMENT.SLIP_NO
--	グループ間相殺は消込トラン登録処理の対象としない。
/*			UNION ALL
			SELECT
				 OFFSET_GROUP_DATA.ORGANIZATION_CD AS ORGANIZATION_CD							--部署コード
				,OFFSET_GROUP_DATA.INVOICE_CD AS INVOICE_CD										--請求先コード
				,OFFSET_GROUP_DATA.DATA_TYPE AS DATA_TYPE										--ﾃﾞｰﾀ種別
				,OFFSET_GROUP_DATA.SLIP_NO AS SLIP_NO											--伝票番号
				,MAX(OFFSET_GROUP_DATA.PROCESSING_DATE) AS PROCESSING_DATE						--処理日付
				,SUM(OFFSET_GROUP_DATA.ERASER_OBJECT_AMOUNT)*-1 AS ERASER_OBJECT_AMOUNT			--消込対象額
				,SUM(OFFSET_GROUP_DATA.ERASER_AMOUNT) AS ERASER_AMOUNT							--消込額
				,SUM(OFFSET_GROUP_DATA.ERASER_BALANCE_AMOUNT)*-1 AS ERASER_BALANCE_AMOUNT		--消込残
				,MAX(OFFSET_GROUP_DATA.ERASER_COMPLETE_DIVISION) AS ERASER_COMPLETE_DIVISION	--消込完了フラグ
				,MAX(OFFSET_GROUP_DATA.ERASER_COMPLETE_DATE) AS ERASER_COMPLETE_DATE			--消込完了日
				,MAX(OFFSET_GROUP_DATA.INVOICE_UPDATE_DATE) AS INVOICE_UPDATE_DATE				--請求締め日
				,MAX(OFFSET_GROUP_DATA.CLAIM_NO) AS CLAIM_NO									--請求番号
				,MAX(OFFSET_GROUP_DATA.APPROVAL_STATUS) AS APPROVAL_STATUS						--承認ステータス
				,MAX(OFFSET_GROUP_DATA.APPROVEDBY) AS APPROVEDBY								--承認者
				,MAX(OFFSET_GROUP_DATA.APPROVALDATE) AS APPROVALDATE							--承認日
				,MAX(OFFSET_GROUP_DATA.ERASER_DATE) AS ERASER_DATE								--消込日付  add by okmt.tc 2009.6.29
				,MAX(OFFSET_GROUP_DATA.ERASER_UPDATE_DATE) AS ERASER_UPDATE_DATE				--消込更新日時
				,MAX(OFFSET_GROUP_DATA.ERASEROR_CD) AS ERASEROR_CD								--消込担当者ＩＤ
				,MAX(OFFSET_GROUP_DATA.INPUT_DATE) AS INPUT_DATE								--登録日時
				,MAX(OFFSET_GROUP_DATA.INPUTOR_CD) AS INPUTOR_CD								--登録者ＩＤ
				,MAX(OFFSET_GROUP_DATA.UPDATE_DATE) AS UPDATE_DATE								--更新日時
				,MAX(OFFSET_GROUP_DATA.UPDATOR_CD) AS UPDATOR_CD								--更新者ＩＤ
			FROM
				(
				SELECT
					 ORGANIZATION_CD AS ORGANIZATION_CD								--部署コード
					,VENDER_CD AS INVOICE_CD										--請求先/支払先コード
					,DATA_TYPE AS DATA_TYPE											--ﾃﾞｰﾀ種別
					,OFFSET_NO AS SLIP_NO											--相殺番号
					,OFFSET_DATE AS PROCESSING_DATE									--相殺日付
					,DEPOSIT_OFFSET_AMOUNT AS ERASER_OBJECT_AMOUNT					--売掛金、未集金相殺金額
					,0 AS ERASER_AMOUNT												--消込額
					,DEPOSIT_OFFSET_AMOUNT AS ERASER_BALANCE_AMOUNT					--売掛金、未集金相殺金額
					,0 AS ERASER_COMPLETE_DIVISION									--消込完了フラグ
					,NULL AS ERASER_COMPLETE_DATE									--消込完了日
					,INVOICE_UPDATE_DATE AS INVOICE_UPDATE_DATE						--請求締め日
					,CLAIM_NO AS CLAIM_NO											--請求番号
					,1 AS APPROVAL_STATUS											--承認ステータス(1：入力中)
					,NULL AS APPROVEDBY												--承認者
					,NULL AS APPROVALDATE											--承認日
					,NULL AS ERASER_DATE								--消込日付  add by okmt.tc 2009.6.29
					,NULL AS ERASER_UPDATE_DATE										--消込更新日時
					,NULL AS ERASEROR_CD											--消込担当者ＩＤ
					,SYSDATE AS INPUT_DATE											--登録日時
					,P_STR_INPUTOR_CD AS INPUTOR_CD									--登録者ＩＤ
					,SYSDATE AS UPDATE_DATE											--更新日時
					,P_STR_INPUTOR_CD AS UPDATOR_CD									--更新者ＩＤ
				FROM
					 OFFSET_GROUP_DATA
				WHERE
					ORGANIZATION_CD				=	REC_MAIN.ORGANIZATION_CD
				AND	VENDER_CD					=	REC_MAIN.VENDER_CD
				AND CLAIM_UPDATE_DIVISION		=	'1'								--請求更新済
				AND CLAIM_TARGET_DIVISION		=	'1'								--請求対象 
				AND CLAIM_NO					=	nvClaimNo						--請求番号
				AND VENDER_DIVISION				=	c_VenderDivTS					--得意先
				) OFFSET_GROUP_DATA													--グループ間相殺トラン
			GROUP BY
				 OFFSET_GROUP_DATA.ORGANIZATION_CD
				,OFFSET_GROUP_DATA.INVOICE_CD
				,OFFSET_GROUP_DATA.DATA_TYPE
				,OFFSET_GROUP_DATA.SLIP_NO
*/
--	グループ間相殺は消込トラン登録処理の対象としない。
			;
			-- カウント
			nCount := nCount + 1;
<<SKIP_CLIM_UPDATE>>
			nRecCount := 0;
		END LOOP;
		--------------------------------------------------------------------------------------
		--請求ヘッダー未作成の請求先の請求ヘッダーを金額0で登録する(未請求金額抽出処理のため) 
		--------------------------------------------------------------------------------------
		/* 請求ヘッダー未作成の請求先抽出 */
		FOR REC_MAIN IN curNotClaimVender(daCreditDate)
		LOOP
			-- 請求番号取得(FUNCTION呼出)
			nvClaimNo := FUN_GET_CLAIM_NO(P_STR_INPUTOR_CD);
			-- 入金予定日取得(FUNCTION呼出)
			nvCreditScheDate := FUN_GET_CREDIT_SCHE_DATE(REC_MAIN.VENDER_CD, TO_CHAR(daCreditDate, 'YYYYMMDD'), 0);
			-- 入金分類、手形サイト取得(PROCEDURE呼出)
			PRO_GET_CREDIT_DIV(REC_MAIN.VENDER_CD, 0, nvCreditDiv, nNoteSight);
			IF nvCreditDiv IS NULL THEN			-- 入金区分が確定できない請求先は処理対象外とする
				GOTO SKIP_NOT_CLIM_UPDATE;
			END IF;
			-- 取引先マスタ検索
			SELECT	 BILL_PUBLISH				-- 請求書発行済フラグ
				,HOLIDAY_FLG				-- 休日指定フラグ
			INTO	 nBillPublish
				,nHolidayFlg
			FROM	VENDER
			WHERE	VENDER_DIVISION		=	c_VenderDivTS
			AND	VENDER_CD		=	REC_MAIN.VENDER_CD
			;
			-- 請求書発行区分(1:発行する 2:発行しない)
			IF nBillPublish = 2 THEN
				nBillPublish := 9;		-- 発行不要
			ELSE
				nBillPublish := 0;		-- 未発行
			END IF;
			-- 請求ヘッダーデータ設定
			rtRecWork.CLAIM_NO			:= nvClaimNo;					-- 請求番号
			rtRecWork.ORGANIZATION_CD		:= REC_MAIN.ORGANIZATION_CD;			-- 部署コード
			rtRecWork.VENDER_CD			:= REC_MAIN.VENDER_CD;				-- 請求先コード
			rtRecWork.CREDIT_DATE			:= daCreditDate;				-- 請求締め日
			rtRecWork.CREDIT_SCHEDULED_DATE		:= TO_DATE(nvCreditScheDate, 'YYYY/MM/DD');	-- 入金予定日
			rtRecWork.CREDIT_DIVISION		:= nvCreditDiv;					-- 入金分類（決済方法）
			rtRecWork.NOTE_SIGHT			:= nNoteSight;					-- 手形サイト
			rtRecWork.HOLIDAY_FLG			:= nHolidayFlg;					-- 休日指定フラグ
			rtRecWork.CLAIM_AMOUNT_FORWARD		:= 0;						-- 前回請求額
			rtRecWork.CREDIT_AMOUNT_FORWARD		:= 0;						-- 前回入金額
			rtRecWork.OTHER_CREDIT_AMOUNT_FORWARD	:= 0;						-- その他入金金額
			rtRecWork.BALANCE_FORWARD		:= 0;						-- 差引繰越額
			rtRecWork.SALES_AMOUNT			:= 0;						-- 今回売上額
			rtRecWork.SALES_RETURNED_AMOUNT		:= 0;						-- 返品金額
			rtRecWork.SALES_DISCOUNT_AMOUNT		:= 0;						-- 値引金額
			rtRecWork.OTHER_SALES_AMOUNT		:= 0;						-- その他売上金額
			rtRecWork.OFFSET_AMOUNT			:= 0;						-- 相殺金額
			rtRecWork.TAX_AMOUNT			:= 0;						-- 消費税額
			rtRecWork.CLAIM_AMOUNT			:= 0;						-- 今回請求額
			rtRecWork.CLAIM_BALANCE_AMOUNT		:= 0;						-- 未請求額
			rtRecWork.ERASER_AMOUNT			:= 0;						-- 消込額
			rtRecWork.ERASER_BALANCE_AMOUNT		:= 0;						-- 消込残
			rtRecWork.BILL_DIVISION			:= nBillPublish;				-- 請求書発行済フラグ
			rtRecWork.ISSUE_DATE			:= NULL;					-- 発行日
			rtRecWork.ISSUER_CD			:= NULL;					-- 発行者ＩＤ
			rtRecWork.INPUT_DATE			:= SYSDATE;					-- 登録日時
			rtRecWork.INPUTOR_CD			:= P_STR_INPUTOR_CD;				-- 登録者ＩＤ
			rtRecWork.UPDATE_DATE			:= SYSDATE;					-- 更新日時
			rtRecWork.UPDATOR_CD			:= P_STR_INPUTOR_CD;				-- 更新者ＩＤ

			IF TRNERRMAN.LOCK_PROC(16) = 0 THEN
		            ROLLBACK;
		            P_NUM_RET := 9;
		
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求ヘッダーのテーブルロックに失敗しました', P_STR_INPUTOR_CD);
                -- 2015/11/09 insert ログ追加 -->
          	    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '他部署で更新処理実施中です。しばらくたってから再度実行下さい', P_STR_INPUTOR_CD);
                -- <-----------------------------
		            TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
		       	    RETURN;
		    	END IF;

			--------------------------------------------------------------------------------
			--★請求ヘッダー登録
			--------------------------------------------------------------------------------
			INSERT INTO CLAIM_HEADER VALUES rtRecWork;
			-- カウント
			nCount := nCount + 1;
<<SKIP_NOT_CLIM_UPDATE>>
			nCount := nCount;
		END LOOP;
		--対象データなしの場合
		IF nCount = 0 THEN
			--ロールバック
			ROLLBACK;
			--戻り値設定
			P_NUM_RET 	:= 9;
			P_ERRCD		:= 0;
			P_ERRMSG	:= NULL;

			TRNERRMAN.LOGOUT(DEF_PROC_NAME, '対象データがありません', P_STR_INPUTOR_CD);
	            	TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);

			RETURN;
		END IF;
	END IF;
	/* 未請求額更新処理 */
	PRO_CLAIM_BALANCE_UPDATE(P_STR_ORGANIZATION_CD
							,P_STR_VENDER_CD
							,P_STR_CREDIT_DATE 
							,P_STR_CLOSING_DATE
							,P_STR_TEMP_CLOSING_FLG
							,P_STR_INPUTOR_CD
							,P_NUM_RET
							,P_ERRCD
							,P_ERRMSG);

    TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
EXCEPTION
	--------------------------------------------------------------------------------
	--例外処理
	--------------------------------------------------------------------------------
	WHEN OTHERS THEN
		--ロールバック
		ROLLBACK;
		--戻り値設定
		P_NUM_RET	:= 99;
		P_ERRMSG	:= SUBSTR(SQLERRM, 1, 2000);
		P_ERRCD		:= SQLCODE;

        -- ログ出力
        TRNERRMAN.LOGOUT(DEF_PROC_NAME, P_ERRMSG, P_STR_INPUTOR_CD);
        TRNERRMAN.LOGOUT(DEF_PROC_NAME, '請求更新処理終了', P_STR_INPUTOR_CD);
END PRO_CLAIM_UPDATE_CSM;
/
