CREATE OR REPLACE PROCEDURE AP21.PRO_CLAIM_BALANCE_UPDATE
	(
		 P_STR_ORGANIZATION_CD	IN	NVARCHAR2
		,P_STR_VENDER_CD		IN	NVARCHAR2
		,P_STR_CREDIT_DATE		IN	NVARCHAR2
		,P_STR_CLOSING_DATE		IN	NVARCHAR2
		,P_STR_TEMP_CLOSING_FLG	IN	NVARCHAR2
		,P_STR_INPUTOR_CD		IN	NVARCHAR2
		,P_NUM_RET				OUT	NUMBER
		,P_ERRCD				OUT	NUMBER
		,P_ERRMSG				OUT	NVARCHAR2
	)
IS
/*----------------------------------------------------------------------------------------------------------------
	種別		:	PROCEDURE
	名称		:	PRO_CLAIM_BALANCE_UPDATE
	処理内容	:	未請求額更新処理
	引数		:	P_STR_ORGANIZATION_CD	部署コード			NVARCHAR2型
	引数		:	P_STR_VENDER_CD			請求先コード		NVARCHAR2型
	引数		:	P_STR_CREDIT_DATE		請求締め日			NVARCHAR2型
	引数		:	P_STR_CLOSING_DATE		売掛締め日			NVARCHAR2型
	引数		:	P_STR_TEMP_CLOSING_FLG	仮締区分			NVARCHAR2型
	引数		:	P_STR_INPUTOR_CD		登録者ＩＤ			NVARCHAR2型
	引数(戻値)	:	P_NUM_RET				実行結果			NUMBER型
											(0:正常終了, 99:異常終了)
	引数(戻値)	:	P_ERRCD					SQLエラーコード		NUMBER型
	引数(戻値)	:	P_ERRMSG				SQLエラーメッセージ	NVARCHAR2型
	VERNO.		:	1.00
(history)
	date		ver		name				comments
	----------	------	------------------	----------------------------------------------------------------------
	2009.06.10	1.00	TOSCO       		creation
	2009.08.08              okmt.tc                内税でも売上は税抜きとする。
*/----------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------
	--定数・変数宣言
	--------------------------------------------------------------------------------
	c_DataDivUriUriage		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 1;			-- (売上)売上
	c_DataDivUriHenpin		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 2;			-- (売上)返品
	c_DataDivUriNebiki		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 3;			-- (売上)値引
	c_DataDivUriSonota		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 9;			-- (売上)その他
	c_DataDivNyuNyukin		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 1;			-- (入金)入金
	c_DataDivNyuSousai		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 2;			-- (入金)相殺
	c_DataDivNyuSonota		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 9;			-- (入金)その他
	c_DataDivShiSousai		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 2;			-- (支払)相殺
	c_DataDivSouSousai		CONSTANT SALES.DATA_TOTAL_DIVISION%TYPE			:= 1;			-- (グループ間相殺)グループ間相殺
	c_ClaimTrgDiv1			CONSTANT SALES.CLAIM_TARGET_DIVISION%TYPE		:= 1;			-- 請求対象(処理済)
	c_ClaimTrgDiv9			CONSTANT SALES.CLAIM_TARGET_DIVISION%TYPE		:= 9;			-- 請求対象(対象外)
	c_DeliveryComp2			CONSTANT SALES.DELIVERY_COMP%TYPE				:= 2;			-- 完納区分(完納)
	c_ClaimUpdDiv0			CONSTANT SALES.CLAIM_UPDATE_DIVISION%TYPE		:= 0;			-- 請求更新フラグ(未処理)
	c_ClaimUpdDiv1			CONSTANT SALES.CLAIM_UPDATE_DIVISION%TYPE		:= 1;			-- 請求更新フラグ(更新済)
	c_ClDiv0				CONSTANT CLASSIFICATION.CLAIM_DIVISION%TYPE		:= 0;			-- 請求対象(対象外)
	c_ClDiv1				CONSTANT CLASSIFICATION.CLAIM_DIVISION%TYPE		:= 1;			-- 請求対象(対象)
	c_DepositUpdDiv0		CONSTANT SALES.DEPOSIT_UPDATE_DIVISION%TYPE		:= 0;			-- 売掛更新フラグ(未処理)
	c_DepositUpdDiv1		CONSTANT SALES.DEPOSIT_UPDATE_DIVISION%TYPE		:= 1;			-- 売掛更新フラグ(更新済)
	c_ApprovalSts3			CONSTANT SALES.APPROVAL_STATUS%TYPE				:= 3;			-- 承認ステータス(承認済)
	c_TempClosingFlg1		CONSTANT VARCHAR2(1)							:= '1';			-- 仮締区分(仮締め)
	c_VenderDivTS			CONSTANT VENDER.VENDER_DIVISION%TYPE			:= 'TS';		-- 取引先区分(TS:得意先)
	c_TmpUnitPriceFlg0		CONSTANT SALES.TMP_UNITPRICE_FLG%TYPE			:= 0;			-- 仮単価フラグ(通常)
	nvAccountYears			SALES.ACCOUNT_YEARS%TYPE;										-- 勘定年月
	nvYYYYMM				NVARCHAR2(6);													-- 年月
	daCreditDate			CLAIM_HEADER.CREDIT_DATE%TYPE;									-- 請求締め日
	daTmpCreditDate			CLAIM_HEADER.CREDIT_DATE%TYPE;									-- 請求締め日(編集用)
	daClosingDate			CLAIM_HEADER.CREDIT_DATE%TYPE;									-- 売掛締め日
	nvClaimNo				CLAIM_HEADER.CLAIM_NO%TYPE;										-- 請求番号
	rtRecWork				CLAIM_HEADER%ROWTYPE;											-- 請求ヘッダー
	nClaimAmount			CLAIM_HEADER.CLAIM_AMOUNT%TYPE;									-- 今回請求額(差引繰越額含まず)
	nvCreditScheDate		NVARCHAR2(8);													-- 入金予定日(YYYYMMDD)
	nvCreditDiv				VENDER.CATEGORY_DIVISION1%TYPE;									-- 入金分類（決済方法）
	nNoteSight				VENDER.NOTE_SIGHT1%TYPE;										-- 手形サイト
	nBillPublish			VENDER.BILL_PUBLISH%TYPE;										-- 請求書発行区分
	nHolidayFlg				VENDER.HOLIDAY_FLG%TYPE;										-- 休日指定フラグ
	nCount					NUMBER											:= 0;			-- カウンター
	nUpdateCount			NUMBER;															-- 更新対象数
	nClosingDate			VENDER.CLOSING_DATE%TYPE;										-- 締日
	vErrMsg					NVARCHAR2(2000);												-- SQLエラーメッセージ
	nErrNo					NUMBER;															-- SQLエラーコード
	TYPE tVenderCd IS TABLE OF VENDER.VENDER_CD%TYPE
		INDEX BY BINARY_INTEGER;
	--------------------------------------------------------------------------------
	--★カーソル宣言
	--------------------------------------------------------------------------------
	--請求データ抽出 カーソル
	CURSOR curSales(
		p_daCreditDate		IN	DATE
	   ,p_daClosingDate		IN	DATE
	)	IS
		SELECT
			 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
			,TRN.VENDER_CD AS VENDER_CD											--請求先コード
			,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
			,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
			,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
			,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
			,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
			,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
			,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
			,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
			,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
			,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
			,SUM((BALANCE_FORWARD + SALES_AMOUNT + OTHER_SALES_AMOUNT + TAX_AMOUNT)
				-(SALES_RETURNED_AMOUNT + SALES_DISCOUNT_AMOUNT + CREDIT_AMOUNT_FORWARD
				  + OTHER_CREDIT_AMOUNT_FORWARD + OFFSET_AMOUNT)) AS CLAIM_BALANCE_AMOUNT	--今回未請求額
		FROM (
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_AMOUNT	--今回売上額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 (SELECT
						 SALES.SALES_DATE
						,SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 SALES SALES						--売上トラン
						,VENDER VENDER
					  WHERE
					      SALES.SALES_DATE <= p_daClosingDate
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriUriage	--売上
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_RETURNED_AMOUNT	--返品金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_RETURNED_AMOUNT	--返品金額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,(DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) * -1) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,(DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) * -1) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 (SELECT
						 SALES.SALES_DATE
						,SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 SALES SALES						--売上トラン
						,VENDER VENDER
					  WHERE
					      SALES.SALES_DATE <= p_daClosingDate
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriHenpin	--返品
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_DISCOUNT_AMOUNT	--値引金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_DISCOUNT_AMOUNT	--値引金額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,(DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) * -1) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,(DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) * -1) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 (SELECT
						 SALES.SALES_DATE
						,SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 SALES SALES						--売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.SALES_DATE <= p_daClosingDate
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriNebiki	--値引
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS OTHER_SALES_AMOUNT	--その他売上金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS OTHER_SALES_AMOUNT	--その他売上金額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS OFFSET_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 (SELECT
						 SALES.SALES_DATE
						,SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 SALES SALES						--売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.SALES_DATE <= p_daClosingDate
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriSonota	--その他売上
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,CREDIT.CREDIT_AMOUNT AS CREDIT_AMOUNT_FORWARD			--前回入金額
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 CREDIT CREDIT						--入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daClosingDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuNyukin		--入金
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,CREDIT.CREDIT_AMOUNT AS OFFSET_AMOUNT					--入金相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 CREDIT CREDIT						--入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daClosingDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuSousai		--相殺
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,CREDIT.CREDIT_AMOUNT AS OTHER_CREDIT_AMOUNT_FORWARD	--前回その他入金額
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 CREDIT CREDIT						--入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daClosingDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuSonota		--その他入金
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 PAYMENT.ORGANIZATION_CD AS ORGANIZATION_CD						--部署コード
					,PAYMENT.SUPPLIER_CD AS VENDER_CD						--仕入先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,PAYMENT.PAYMENT_AMOUNT AS OFFSET_AMOUNT				--支払相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 PAYMENT PAYMENT					--支払トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR PAYMENT.SUPPLIER_CD = P_STR_VENDER_CD)
				AND PAYMENT.PAYMENT_DATE <= p_daClosingDate
				AND PAYMENT.DATA_TOTAL_DIVISION = c_DataDivShiSousai	--相殺
				AND PAYMENT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND PAYMENT.INVOICE_UPDATE_DATE IS NULL
				AND PAYMENT.APPROVAL_STATUS = c_ApprovalSts3			--承認済
				AND PAYMENT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND PAYMENT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 OFFSET.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,OFFSET.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,OFFSET.DEPOSIT_OFFSET_AMOUNT AS OFFSET_AMOUNT			--売掛相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 OFFSET_GROUP_DATA OFFSET				--グループ間トラン
					,CLASSIFICATION CLASSIFICATION			--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR OFFSET.VENDER_CD = P_STR_VENDER_CD)
				AND OFFSET.OFFSET_DATE <= p_daClosingDate
				AND OFFSET.DATA_TOTAL_DIVISION = c_DataDivSouSousai		--グループ間相殺
				AND OFFSET.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND OFFSET.INVOICE_UPDATE_DATE IS NULL
				AND OFFSET.DEPOSIT_OFFSET_AMOUNT IS NOT NULL			--売掛相殺金額
				AND OFFSET.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND OFFSET.VENDER_DIVISION = c_VenderDivTS				--得意先
				AND OFFSET.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND OFFSET.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 HEADER.ORGANIZATION_CD AS ORGANIZATION_CD		--部署コード
					,HEADER.VENDER_CD AS VENDER_CD					--請求先コード
					,HEADER.CLAIM_AMOUNT AS CLAIM_AMOUNT_FORWARD	--前回請求額
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,HEADER.BALANCE_FORWARD AS BALANCE_FORWARD		--差引繰越額
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 CLAIM_HEADER HEADER		--請求ヘッダー
					,(SELECT
						 ORGANIZATION_CD
						,VENDER_CD
						,MAX(CREDIT_DATE) MAX_DATE
					  FROM
					  	CLAIM_HEADER
					  WHERE
					  	CREDIT_DATE <= p_daClosingDate
					  GROUP BY
						 ORGANIZATION_CD
						,VENDER_CD
					 ) MAX_HEADER
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR HEADER.VENDER_CD = P_STR_VENDER_CD)
				AND	HEADER.CLAIM_AMOUNT <> 0
				AND HEADER.ORGANIZATION_CD = MAX_HEADER.ORGANIZATION_CD
				AND HEADER.VENDER_CD = MAX_HEADER.VENDER_CD
				AND HEADER.CREDIT_DATE = MAX_HEADER.MAX_DATE
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			 ) TRN
			,(
			SELECT
				VENDER_CD
			FROM (
					SELECT
						VENDER_CD
					,	DECODE(p_daCreditDate, NULL, CLOSING_DATE, 
						DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)),
							CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
									THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2))
								 ELSE CLOSING_DATE
							END
						)
						) CLOSING_DATE
					FROM
						VENDER
					WHERE
						('ALL' = NVL(P_STR_ORGANIZATION_CD, 'ALL') OR ORGANIZATION_CD = P_STR_ORGANIZATION_CD)
					AND ('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
					AND VENDER_DIVISION = c_VenderDivTS
--					AND (PAYMENT_INVOICE_CD IS NULL OR VENDER.PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
				)
			WHERE
				(TO_DATE('20000101', 'YYYYMMDD') = NVL(p_daCreditDate, TO_DATE('20000101', 'YYYYMMDD')) OR 
					CLOSING_DATE = DECODE(p_daCreditDate, NULL, NULL, TO_NUMBER(SUBSTR(TO_CHAR(p_daCreditDate, 'YYYYMMDD'), 7, 2))))
			 ) VENDER
		WHERE
			TRN.VENDER_CD = VENDER.VENDER_CD
		GROUP BY
			 TRN.ORGANIZATION_CD
			,TRN.VENDER_CD
		ORDER BY
			 ORGANIZATION_CD
			,VENDER_CD
	;
	--仮締め請求データ抽出 カーソル
	CURSOR curTempSales(
		p_daCreditDate		IN	DATE
	   ,p_daClosingDate		IN	DATE
	)	IS
		SELECT
			 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
			,TRN.VENDER_CD AS VENDER_CD											--請求先コード
			,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
			,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
			,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
			,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
			,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
			,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
			,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
			,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
			,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
			,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
			,SUM((BALANCE_FORWARD + SALES_AMOUNT + OTHER_SALES_AMOUNT + TAX_AMOUNT)
				-(SALES_RETURNED_AMOUNT + SALES_DISCOUNT_AMOUNT + CREDIT_AMOUNT_FORWARD
				  + OTHER_CREDIT_AMOUNT_FORWARD + OFFSET_AMOUNT)) AS CLAIM_BALANCE_AMOUNT	--今回未請求額
		FROM (
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_AMOUNT	--今回売上額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_AMOUNT	--今回売上額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 (SELECT
						 SALES.SALES_DATE
						,SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 TEMPORARY_CLAIM_SALES SALES	--仮締め売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.SALES_DATE <= p_daClosingDate
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriUriage	--売上
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_RETURNED_AMOUNT	--返品金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_RETURNED_AMOUNT	--返品金額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,(DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) * -1) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,(DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) * -1) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 (SELECT
						 SALES.SALES_DATE
						,SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 TEMPORARY_CLAIM_SALES SALES	--仮締め売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.SALES_DATE <= p_daClosingDate
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriHenpin	--返品
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS SALES_DISCOUNT_AMOUNT	--値引金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS SALES_DISCOUNT_AMOUNT	--値引金額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
--					,(DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) * -1) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,(DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) * -1) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 (SELECT
						 SALES.SALES_DATE
						,SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 TEMPORARY_CLAIM_SALES SALES	--仮締め売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.SALES_DATE <= p_daClosingDate
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriNebiki	--値引
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 SALES.CHARGE_ORGANIZATION_CD AS ORGANIZATION_CD								--担当部署コード
					,DECODE(SALES.INVOICE_CD, NULL, SALES.VENDER_CD, SALES.INVOICE_CD) AS VENDER_CD	--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '2',
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', (SALES.SALES_AMOUNT + SALES.TAX_AMOUNT) * -1, SALES.SALES_AMOUNT + SALES.TAX_AMOUNT),
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT)
--							) AS OTHER_SALES_AMOUNT	--その他売上金額(内税の場合は＋消費税額) 取消データの場合はマイナスにする
					,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.SALES_AMOUNT * -1, SALES.SALES_AMOUNT
							) AS OTHER_SALES_AMOUNT	--その他売上金額(売上額は税抜き額) 取消データの場合はマイナスにする
					,0 AS OFFSET_AMOUNT
--					,DECODE(SALES.TAX_DIVISION, '1', 
--							DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT),
--							0
--							) AS TAX_AMOUNT	--消費税額(区分=外税のみ) 取消データの場合はマイナスにする
					,DECODE(SALES.TAX_DIVISION, '3', 0
						,DECODE(SUBSTR(SALES.CATEGORY_DIVISION, 1, 1), '-', SALES.TAX_AMOUNT * -1, SALES.TAX_AMOUNT)
							) AS TAX_AMOUNT	--消費税額(区分=3非課税以外) 取消データの場合はマイナスにする
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 (SELECT
						 SALES.SALES_DATE
						,SALES.CHARGE_ORGANIZATION_CD
						,SALES.VENDER_CD
						,VENDER.PAYMENT_INVOICE_CD AS INVOICE_CD
						,SALES.TAX_DIVISION
						,SALES.SALES_AMOUNT
						,SALES.TAX_AMOUNT
						,SALES.DATA_TOTAL_DIVISION
						,SALES.CLAIM_UPDATE_DIVISION
						,SALES.INVOICE_UPDATE_DATE
						,SALES.DELIVERY_COMP
						,SALES.APPROVAL_STATUS
						,SALES.DATA_TYPE
						,SALES.CATEGORY_DIVISION
					  FROM
						 TEMPORARY_CLAIM_SALES SALES	--仮締め売上トラン
						,VENDER VENDER
					  WHERE
						  SALES.SALES_DATE <= p_daClosingDate
					  AND SALES.DATA_TOTAL_DIVISION = c_DataDivUriSonota	--その他売上
					  AND SALES.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
					  AND SALES.INVOICE_UPDATE_DATE IS NULL
					  AND SALES.TMP_UNITPRICE_FLG = c_TmpUnitPriceFlg0		--仮単価フラグ(0:通常のもの)
					  AND SALES.VENDER_CD = VENDER.VENDER_CD
					  AND VENDER.VENDER_DIVISION = c_VenderDivTS
					 ) SALES
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR
					 (SALES.VENDER_CD = P_STR_VENDER_CD AND SALES.INVOICE_CD IS NULL) OR
					 SALES.INVOICE_CD = P_STR_VENDER_CD
					)
				AND SALES.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND SALES.DATA_TOTAL_DIVISION = CLASSIFICATION.DATA_TOTAL_DIVISION
				AND SALES.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,CREDIT.CREDIT_AMOUNT AS CREDIT_AMOUNT_FORWARD			--前回入金額
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 TEMPORARY_CLAIM_CREDIT CREDIT		--仮締め入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daClosingDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuNyukin		--入金
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD			--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD						--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,CREDIT.CREDIT_AMOUNT AS OFFSET_AMOUNT					--入金相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 TEMPORARY_CLAIM_CREDIT CREDIT		--仮締め入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daClosingDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuSousai		--相殺
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				UNION ALL
				SELECT
					 CREDIT.ORGANIZATION_CD AS ORGANIZATION_CD			--部署コード
					,CREDIT.VENDER_CD AS VENDER_CD						--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,CREDIT.CREDIT_AMOUNT AS OTHER_CREDIT_AMOUNT_FORWARD	--前回その他入金額
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 TEMPORARY_CLAIM_CREDIT CREDIT		--仮締め入金トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR CREDIT.VENDER_CD = P_STR_VENDER_CD)
				AND CREDIT.CREDIT_DATE <= p_daClosingDate
				AND CREDIT.DATA_TOTAL_DIVISION = c_DataDivNyuSonota		--その他入金
				AND CREDIT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND CREDIT.INVOICE_UPDATE_DATE IS NULL
				AND CREDIT.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND CREDIT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND CREDIT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 PAYMENT.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,PAYMENT.SUPPLIER_CD AS VENDER_CD						--仕入先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,PAYMENT.PAYMENT_AMOUNT AS OFFSET_AMOUNT				--支払相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 TEMPORARY_CLAIM_PAYMENT PAYMENT	--仮締め支払トラン
					,CLASSIFICATION CLASSIFICATION		--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR PAYMENT.SUPPLIER_CD = P_STR_VENDER_CD)
				AND PAYMENT.PAYMENT_DATE <= p_daClosingDate
				AND PAYMENT.DATA_TOTAL_DIVISION = c_DataDivShiSousai	--相殺
				AND PAYMENT.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND PAYMENT.INVOICE_UPDATE_DATE IS NULL
				AND PAYMENT.APPROVAL_STATUS = c_ApprovalSts3			--承認済
				AND PAYMENT.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND PAYMENT.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回請求額
			FROM
				(
				SELECT
					 OFFSET.ORGANIZATION_CD AS ORGANIZATION_CD				--部署コード
					,OFFSET.VENDER_CD AS VENDER_CD							--請求先コード
					,0 AS CLAIM_AMOUNT_FORWARD
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,0 AS BALANCE_FORWARD
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,OFFSET.DEPOSIT_OFFSET_AMOUNT AS OFFSET_AMOUNT			--売掛相殺金額
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 TMPCLAIM_OFFSET_GROUP_DATA OFFSET		--仮締めグループ間トラン
					,CLASSIFICATION CLASSIFICATION			--分類マスタ
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR OFFSET.VENDER_CD = P_STR_VENDER_CD)
				AND OFFSET.OFFSET_DATE <= p_daClosingDate
				AND OFFSET.DATA_TOTAL_DIVISION = c_DataDivSouSousai		--グループ間相殺
				AND OFFSET.CLAIM_UPDATE_DIVISION = c_ClaimUpdDiv0		--未処理
				AND OFFSET.INVOICE_UPDATE_DATE IS NULL
				AND OFFSET.DEPOSIT_OFFSET_AMOUNT IS NOT NULL			--売掛相殺金額
				AND OFFSET.APPROVAL_STATUS = c_ApprovalSts3				--承認済
				AND OFFSET.VENDER_DIVISION = c_VenderDivTS				--得意先
				AND OFFSET.DATA_TYPE = CLASSIFICATION.DATA_TYPE
				AND OFFSET.CATEGORY_DIVISION = CLASSIFICATION.CATEGORY_DIVISION
				AND CLASSIFICATION.CLAIM_DIVISION = c_ClDiv1			--請求対象
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			UNION ALL
			SELECT
				 ORGANIZATION_CD AS ORGANIZATION_CD									--部署コード
				,VENDER_CD AS VENDER_CD												--請求先コード
				,SUM(CLAIM_AMOUNT_FORWARD) AS CLAIM_AMOUNT_FORWARD					--前回請求額
				,SUM(CREDIT_AMOUNT_FORWARD) AS CREDIT_AMOUNT_FORWARD				--前回入金額
				,SUM(OTHER_CREDIT_AMOUNT_FORWARD) AS OTHER_CREDIT_AMOUNT_FORWARD	--その他入金金額
				,SUM(BALANCE_FORWARD) AS BALANCE_FORWARD							--差引繰越額
				,SUM(SALES_AMOUNT) AS SALES_AMOUNT									--今回売上額
				,SUM(SALES_RETURNED_AMOUNT) AS SALES_RETURNED_AMOUNT				--返品金額
				,SUM(SALES_DISCOUNT_AMOUNT) AS SALES_DISCOUNT_AMOUNT				--値引金額
				,SUM(OTHER_SALES_AMOUNT) AS OTHER_SALES_AMOUNT						--その他売上金額
				,SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT								--相殺金額
				,SUM(TAX_AMOUNT) AS TAX_AMOUNT										--消費税額
				,SUM(CLAIM_BALANCE_AMOUNT) AS CLAIM_BALANCE_AMOUNT					--今回未請求額
			FROM
				(
				SELECT
					 HEADER.ORGANIZATION_CD AS ORGANIZATION_CD		--部署コード
					,HEADER.VENDER_CD AS VENDER_CD					--請求先コード
					,HEADER.CLAIM_AMOUNT AS CLAIM_AMOUNT_FORWARD	--前回請求額
					,0 AS CREDIT_AMOUNT_FORWARD
					,0 AS OTHER_CREDIT_AMOUNT_FORWARD
					,HEADER.BALANCE_FORWARD AS BALANCE_FORWARD		--差引繰越額
					,0 AS SALES_AMOUNT
					,0 AS SALES_RETURNED_AMOUNT
					,0 AS SALES_DISCOUNT_AMOUNT
					,0 AS OTHER_SALES_AMOUNT
					,0 AS OFFSET_AMOUNT
					,0 AS TAX_AMOUNT
					,0 AS CLAIM_BALANCE_AMOUNT
				FROM
					 TEMPORARY_CLAIM_HEADER HEADER		--請求ヘッダー
					,(SELECT
						 ORGANIZATION_CD
						,VENDER_CD
						,MAX(CREDIT_DATE) MAX_DATE
					  FROM
					  	CLAIM_HEADER
					  WHERE
					  	CREDIT_DATE <= p_daClosingDate
					  GROUP BY
						 ORGANIZATION_CD
						,VENDER_CD
					 ) MAX_HEADER
				WHERE
					('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR HEADER.VENDER_CD = P_STR_VENDER_CD)
				AND	HEADER.CLAIM_AMOUNT <> 0
				AND HEADER.ORGANIZATION_CD = MAX_HEADER.ORGANIZATION_CD
				AND HEADER.VENDER_CD = MAX_HEADER.VENDER_CD
				AND HEADER.CREDIT_DATE = MAX_HEADER.MAX_DATE
				)
			GROUP BY
				 ORGANIZATION_CD
				,VENDER_CD
			 ) TRN
			,(
			SELECT
				VENDER_CD
			FROM (
					SELECT
						VENDER_CD
					,	DECODE(p_daCreditDate, NULL, CLOSING_DATE, 
						DECODE(CLOSING_DATE, 99, TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)),
							CASE WHEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2)) < CLOSING_DATE 
									THEN TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(p_daCreditDate), 'YYYYMMDD'), 7, 2))
								 ELSE CLOSING_DATE
							END
						)
						) CLOSING_DATE
					FROM
						VENDER
					WHERE
						('ALL' = NVL(P_STR_ORGANIZATION_CD, 'ALL') OR ORGANIZATION_CD = P_STR_ORGANIZATION_CD)
					AND ('ALL' = NVL(P_STR_VENDER_CD, 'ALL') OR VENDER_CD = P_STR_VENDER_CD)
					AND VENDER_DIVISION = c_VenderDivTS
--					AND (PAYMENT_INVOICE_CD IS NULL OR PAYMENT_INVOICE_CD = VENDER_CD)
					AND VENDER.PAYMENT_INVOICE_CD = VENDER_CD
					AND ACCOUNTS_CD IS NOT NULL                           -- 2009/10/13 請求先定義変更
				)
			WHERE
				(TO_DATE('20000101', 'YYYYMMDD') = NVL(p_daCreditDate, TO_DATE('20000101', 'YYYYMMDD')) OR 
					CLOSING_DATE = DECODE(p_daCreditDate, NULL, NULL, TO_NUMBER(SUBSTR(TO_CHAR(p_daCreditDate, 'YYYYMMDD'), 7, 2))))
			 ) VENDER
		WHERE
			TRN.VENDER_CD = VENDER.VENDER_CD
		GROUP BY
			 TRN.ORGANIZATION_CD
			,TRN.VENDER_CD
		ORDER BY
			 ORGANIZATION_CD
			,VENDER_CD
	;
BEGIN
	-- 文字型をDate型へキャスト
	daCreditDate := TO_DATE(P_STR_CREDIT_DATE, 'YYYYMMDD');
	daClosingDate := TO_DATE(P_STR_CLOSING_DATE, 'YYYYMMDD');
	nvAccountYears := SUBSTR(P_STR_CLOSING_DATE, 1, 6);
	--------------------------------------------------------------------------------
	--【仮締め】の場合
	--------------------------------------------------------------------------------
	IF P_STR_TEMP_CLOSING_FLG = c_TempClosingFlg1 THEN
		--------------------------------------------------------------------------------
		--仮締め未請求データ抽出処理
		--------------------------------------------------------------------------------
		/* 仮締め未請求データ抽出 カーソル */
		FOR REC_MAIN IN curTempSales(daCreditDate, daClosingDate)
		LOOP
			daTmpCreditDate := daCreditDate;
			/*　請求締め日の指定がない場合、請求先の請求締め日を求める */
			IF daTmpCreditDate IS NULL THEN
				SELECT
					CLOSING_DATE
				INTO nClosingDate
				FROM
					VENDER
				WHERE
					VENDER.VENDER_CD = REC_MAIN.VENDER_CD
				AND VENDER_DIVISION = c_VenderDivTS;
				IF nClosingDate = 99 THEN	--月末
					daTmpCreditDate := TO_DATE(nvAccountYears || SUBSTR(TO_CHAR(LAST_DAY(daClosingDate), 'YYYYMMDD'), 7, 2), 'YYYYMMDD');
				ELSIF nClosingDate > TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daClosingDate), 'YYYYMMDD'), 7, 2)) THEN	-- 月末扱い
					daTmpCreditDate := TO_DATE(nvAccountYears || SUBSTR(TO_CHAR(LAST_DAY(daClosingDate), 'YYYYMMDD'), 7, 2), 'YYYYMMDD');
				ELSE
					IF LENGTH(TO_CHAR(nClosingDate)) = 1 THEN
						daTmpCreditDate := TO_DATE(nvAccountYears || '0' || TO_CHAR(nClosingDate), 'YYYYMMDD');
					ELSE
						daTmpCreditDate := TO_DATE(nvAccountYears || TO_CHAR(nClosingDate), 'YYYYMMDD');
					END IF;
				END IF;
				/* 求めた請求締め日が、売掛締め日より後の場合、1ヶ月前の請求締め日に再設定する */
				IF TO_NUMBER(TO_CHAR(daTmpCreditDate, 'YYYYMMDD')) > TO_NUMBER(TO_CHAR(daClosingDate, 'YYYYMMDD')) THEN
					daTmpCreditDate := ADD_MONTHS(TO_DATE(nvAccountYears || '01', 'YYYYMMDD'), -1);
					nvYYYYMM := SUBSTR(TO_CHAR(daTmpCreditDate, 'YYYYMMDD'), 1, 6);
					IF nClosingDate = 99 THEN	--月末
						daTmpCreditDate := TO_DATE(nvYYYYMM || SUBSTR(TO_CHAR(LAST_DAY(daTmpCreditDate), 'YYYYMMDD'), 7, 2), 'YYYYMMDD');
					ELSIF nClosingDate > TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daTmpCreditDate), 'YYYYMMDD'), 7, 2)) THEN	-- 月末扱い
						daTmpCreditDate := TO_DATE(nvYYYYMM || SUBSTR(TO_CHAR(LAST_DAY(daTmpCreditDate), 'YYYYMMDD'), 7, 2), 'YYYYMMDD');
					ELSE
						IF LENGTH(TO_CHAR(nClosingDate)) = 1 THEN
							daTmpCreditDate := TO_DATE(nvYYYYMM || '0' || TO_CHAR(nClosingDate), 'YYYYMMDD');
						ELSE
							daTmpCreditDate := TO_DATE(nvYYYYMM || TO_CHAR(nClosingDate), 'YYYYMMDD');
						END IF;
					END IF;
				END IF;
			END IF;
			/* 請求更新処理済みの確認 */
			SELECT
				COUNT(VENDER_CD)
			INTO nUpdateCount
			FROM TEMPORARY_CLAIM_HEADER
			WHERE	ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD 		= REC_MAIN.VENDER_CD
			AND		CREDIT_DATE		= daTmpCreditDate;
			/* 請求更新処理済みの場合、未請求額を対象レコードに更新 */
			IF nUpdateCount > 0 THEN
				UPDATE TEMPORARY_CLAIM_HEADER
					SET
						CLAIM_BALANCE_AMOUNT		=	REC_MAIN.CLAIM_BALANCE_AMOUNT	-- 未請求額
					,	UPDATE_DATE					=	SYSDATE							-- 更新日時
					,	UPDATOR_CD					=	P_STR_INPUTOR_CD			-- 更新者ID
				WHERE	ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
				AND		VENDER_CD 		= REC_MAIN.VENDER_CD
				AND		CREDIT_DATE		= daTmpCreditDate;
			END IF;
		END LOOP;
	ELSE
	--------------------------------------------------------------------------------
	--【本締め】の場合
	--------------------------------------------------------------------------------
		--------------------------------------------------------------------------------
		--請求データ抽出処理
		--------------------------------------------------------------------------------
		/* 未請求データ抽出 カーソル */
		FOR REC_MAIN IN curSales(daCreditDate, daClosingDate)
		LOOP
			daTmpCreditDate := daCreditDate;
			/*　請求締め日の指定がない場合、該当請求先の請求締め日を求める */
			IF daTmpCreditDate IS NULL THEN
				SELECT
					CLOSING_DATE
				INTO nClosingDate
				FROM
					VENDER
				WHERE
					VENDER.VENDER_CD = REC_MAIN.VENDER_CD
				AND VENDER_DIVISION = c_VenderDivTS;
				IF nClosingDate = 99 THEN	--月末
					daTmpCreditDate := TO_DATE(nvAccountYears || SUBSTR(TO_CHAR(LAST_DAY(daClosingDate), 'YYYYMMDD'), 7, 2), 'YYYYMMDD');
				ELSIF nClosingDate > TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daClosingDate), 'YYYYMMDD'), 7, 2)) THEN	-- 月末扱い
					daTmpCreditDate := TO_DATE(nvAccountYears || SUBSTR(TO_CHAR(LAST_DAY(daClosingDate), 'YYYYMMDD'), 7, 2), 'YYYYMMDD');
				ELSE
					IF LENGTH(TO_CHAR(nClosingDate)) = 1 THEN
						daTmpCreditDate := TO_DATE(nvAccountYears || '0' || TO_CHAR(nClosingDate), 'YYYYMMDD');
					ELSE
						daTmpCreditDate := TO_DATE(nvAccountYears || TO_CHAR(nClosingDate), 'YYYYMMDD');
					END IF;
				END IF;
				/* 求めた請求締め日が、売掛締め日より後の場合、1ヶ月前の請求締め日に再設定する */
				IF TO_NUMBER(TO_CHAR(daTmpCreditDate, 'YYYYMMDD')) > TO_NUMBER(TO_CHAR(daClosingDate, 'YYYYMMDD')) THEN
					daTmpCreditDate := ADD_MONTHS(TO_DATE(nvAccountYears || '01', 'YYYYMMDD'), -1);
					nvYYYYMM := SUBSTR(TO_CHAR(daTmpCreditDate, 'YYYYMMDD'), 1, 6);
					IF nClosingDate = 99 THEN	--月末
						daTmpCreditDate := TO_DATE(nvYYYYMM || SUBSTR(TO_CHAR(LAST_DAY(daTmpCreditDate), 'YYYYMMDD'), 7, 2), 'YYYYMMDD');
					ELSIF nClosingDate > TO_NUMBER(SUBSTR(TO_CHAR(LAST_DAY(daTmpCreditDate), 'YYYYMMDD'), 7, 2)) THEN	-- 月末扱い
						daTmpCreditDate := TO_DATE(nvYYYYMM || SUBSTR(TO_CHAR(LAST_DAY(daTmpCreditDate), 'YYYYMMDD'), 7, 2), 'YYYYMMDD');
					ELSE
						IF LENGTH(TO_CHAR(nClosingDate)) = 1 THEN
							daTmpCreditDate := TO_DATE(nvYYYYMM || '0' || TO_CHAR(nClosingDate), 'YYYYMMDD');
						ELSE
							daTmpCreditDate := TO_DATE(nvYYYYMM || TO_CHAR(nClosingDate), 'YYYYMMDD');
						END IF;
					END IF;
				END IF;
			END IF;
			/* 請求更新処理済みの確認 */
			SELECT
				COUNT(VENDER_CD)
			INTO nUpdateCount
			FROM CLAIM_HEADER
			WHERE	ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
			AND		VENDER_CD 		= REC_MAIN.VENDER_CD
			AND		CREDIT_DATE		= daTmpCreditDate;
			IF nUpdateCount > 0 THEN
				UPDATE CLAIM_HEADER
					SET
						CLAIM_BALANCE_AMOUNT		=	REC_MAIN.CLAIM_BALANCE_AMOUNT	-- 未請求額
					,	UPDATE_DATE					=	SYSDATE							-- 更新日時
					,	UPDATOR_CD					=	P_STR_INPUTOR_CD				-- 更新者ID
				WHERE	ORGANIZATION_CD = REC_MAIN.ORGANIZATION_CD
				AND		VENDER_CD 		= REC_MAIN.VENDER_CD
				AND		CREDIT_DATE		= daTmpCreditDate;
			END IF;
		END LOOP;
	END IF;
	--------------------------------------------------------------------------------
	--戻り値設定
	--------------------------------------------------------------------------------
	P_NUM_RET	:= 0;
	P_ERRCD		:= 0;
	P_ERRMSG	:= NULL;
EXCEPTION
	--------------------------------------------------------------------------------
	--例外処理
	--------------------------------------------------------------------------------
	WHEN OTHERS THEN
		--ロールバック
		ROLLBACK;
		--戻り値設定
		P_NUM_RET 	:= 99;
		P_ERRMSG	:= SUBSTR(SQLERRM, 1, 2000);
		P_ERRCD		:= SQLCODE;
END PRO_CLAIM_BALANCE_UPDATE;
/
