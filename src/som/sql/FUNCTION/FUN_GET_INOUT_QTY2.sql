CREATE OR REPLACE PACKAGE BODY AP21.PAK_ALLZAITABLE IS
--■■■■■■
--■　変　数
--■■■■■■

	--
	PROCEDURE UPDATE_ZAI(OUT_ERROR OUT VARCHAR2)
	IS
	BEGIN
		LNG_SYORIF := 0;
		OUT_ERROR := '';
		LNG_QTY := NVL(LNG_QTY,0);
		--LNG_AZUDIV := 0;
		--在庫更新
		IF (LNG_OPNO = 11 OR LNG_OPNO = 12 )  THEN
			UPDATE_ALLZAITABLE;
		ELSE
			IF LNG_QTY = 0 THEN
				NULL;
			ELSE
				UPDATE_ALLZAITABLE;
			END IF;
		END IF;
		DELETE ITEM_INVENTORY WHERE
			ITEM_CD = STR_ITEMCODE AND INVENTORY_QTY = 0 AND BACKORDER_QTY = 0
			AND ASSIGN_QTY = 0 AND SALES_ASSIGN_QTY = 0 AND FINISH_QTY = 0
			AND INSPECTION_QTY = 0 AND INVALID_QTY = 0 ;
		DELETE LOCATION_INVENTORY WHERE
			ITEM_CD = STR_ITEMCODE AND INVENTORY_QTY = 0 AND BACKORDER_QTY = 0
			AND ASSIGN_QTY = 0 AND SALES_ASSIGN_QTY = 0 AND FINISH_QTY = 0
			AND INSPECTION_QTY = 0 AND INVALID_QTY = 0 ;
		DELETE LOT_INVENTORY WHERE
			ITEM_CD = STR_ITEMCODE AND INVENTORY_QTY = 0 AND BACKORDER_QTY = 0
			AND ASSIGN_QTY = 0 AND SALES_ASSIGN_QTY = 0 AND FINISH_QTY = 0
			AND INSPECTION_QTY = 0 AND INVALID_QTY = 0 ;
		--エラーあり
		IF LNG_SYORIF <> 0 THEN
			OUT_ERROR := STR_ERRORCODE || STR_ERRORNAME;
		ELSE
			OUT_ERROR := 'COMPLETE';
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('在庫MAIN');
		STR_ERRORCODE := 'SQL コード = ' || SQLCODE ;
		STR_ERRORNAME := 'エラー内容 = ' || SQLERRM(SQLCODE);
		DBMS_OUTPUT.PUT_LINE(STR_ERRORCODE || ' : ' || STR_ERRORNAME);
		--エラーフラグ
		LNG_SYORIF := 9;
		-- ROLLBACK TOTTA;
	END;

	--JBD_MST_TANTO
--■■■■■■■■■
--■　引数チェック
--■■■■■■■■■
	FUNCTION UPDATE_PRE_CHK RETURN NUMBER IS
		LNG_RC_LOCAL NUMBER := 0;
		LNG_AC_LOCAL NUMBER := 0;
		STR_ALIAS NVARCHAR2(20) := '';
		LNG_AQ_LOCAL NUMBER := 0;
	BEGIN
		DBMS_OUTPUT.PUT_LINE(STR_ITEMCODE);
		DBMS_OUTPUT.PUT_LINE(STR_LOCATIONCODE);
	--品目マスタ存在チェック
		IF TRIM(STR_ITEMCODE) = '' OR STR_ITEMCODE IS NULL THEN
			STR_ERRORNAME := '品目コードが入力されていません。';
			LNG_SYORIF := 9;
			RETURN 9;
		ELSE
			SELECT COUNT(*) INTO LNG_RC_LOCAL FROM ITEM
			WHERE
				ITEM_CD = STR_ITEMCODE
			;
			IF LNG_RC_LOCAL = 0 THEN
				STR_ERRORNAME := '品目コードがマスタに存在しません。:' || STR_ITEMCODE ;
				LNG_SYORIF := 9;
				RETURN 9;
			END IF;
		END IF;
	--ロケーションマスタ存在チェック
		IF LNG_OPNO = 15 OR FUN_GET_ITEM_STOCK_DIVISION(STR_ITEMCODE) = 3 THEN
			NULL;
		ELSE
			-- ロケーションが入っていない場合の対応 2008.04.02
			IF TRIM(STR_LOTCODE) = '' OR STR_LOTCODE IS NULL THEN
				NULL;
			ELSE
				--
				IF TRIM(STR_LOCATIONCODE) = '' OR STR_LOCATIONCODE IS NULL THEN
					STR_ERRORNAME := 'ロケーションコードが入力されていません。';
					LNG_SYORIF := 9;
					RETURN 9;
				ELSE
					SELECT COUNT(*) INTO LNG_RC_LOCAL FROM LOCATION
					WHERE
						LOCATION_CD = STR_LOCATIONCODE
					;
					IF LNG_RC_LOCAL = 0 THEN
						STR_ERRORNAME := 'ロケーションコードがマスタに存在しません。:' || STR_LOCATIONCODE;
						LNG_SYORIF := 9;
						RETURN 9;
					END IF;
					--出庫の場合
					IF (LNG_OPNO = 1 OR LNG_OPNO = 98 OR LNG_OPNO = 2 OR LNG_OPNO = 6 OR LNG_OPNO = 10  OR LNG_OPNO = 14 OR LNG_OPNO = 17 ) AND LNG_QTY > 0 AND LNG_INOUTKBN = 1 THEN
						--
						SELECT COUNT(*) INTO LNG_RC_LOCAL FROM LOT_INVENTORY
						WHERE
							LOCATION_CD = STR_LOCATIONCODE
							AND ITEM_CD = STR_ITEMCODE
							AND LOT_NO  = STR_LOTCODE
						;
						IF LNG_RC_LOCAL = 0 THEN
							STR_ERRORNAME := 'ロット在庫が存在しませんでした。:'|| STR_ITEMCODE || '/' || STR_LOCATIONCODE || '/'  || STR_LOTCODE;
							LNG_SYORIF := 9;
							RETURN 9;
						ELSE
							--
							SELECT INVENTORY_QTY,INSPECTION_QTY,ALIAS_LOT_NO,ASSIGN_QTY INTO LNG_RC_LOCAL,LNG_AC_LOCAL,STR_ALIAS,LNG_AQ_LOCAL FROM LOT_INVENTORY
							WHERE
								LOCATION_CD = STR_LOCATIONCODE
								AND ITEM_CD = STR_ITEMCODE
								AND LOT_NO  = STR_LOTCODE
							;
							IF LNG_RC_LOCAL < LNG_QTY THEN
								IF LNG_OPNO = 17 AND LNG_AC_LOCAL >= LNG_QTY THEN
									LNG_AZUDIV := 1;
								ELSE
									STR_ERRORNAME := 'ロット在庫が不足しています。'|| STR_ITEMCODE || '/' || STR_LOCATIONCODE || '/'  || STR_LOTCODE || ':' || LNG_AC_LOCAL|| ':' || LNG_QTY;
									LNG_SYORIF := 9;
									RETURN 9;
								END IF;
							END IF;
							IF LNG_OPNO = 98 THEN
								IF (LNG_RC_LOCAL + LNG_AQ_LOCAL) < LNG_QTY THEN
									STR_ERRORNAME := 'ロット有効在庫が不足しています。'|| STR_ITEMCODE || '/' || STR_LOCATIONCODE || '/'  || STR_LOTCODE || ':' || LNG_AC_LOCAL|| ':' || LNG_QTY;
									LNG_SYORIF := 9;
									RETURN 9;
								END IF;
							END IF;
						END IF;
						IF  STR_ALIAS_LOT is NULL THEN STR_ALIAS_LOT := STR_ALIAS; END IF;
					END IF;
					IF  LNG_OPNO = 17  AND LNG_QTY < 0 AND LNG_INOUTKBN = 0 THEN
						--
						SELECT COUNT(*) INTO LNG_RC_LOCAL FROM LOT_INVENTORY
						WHERE
							LOCATION_CD = STR_LOCATIONCODE
							AND ITEM_CD = STR_ITEMCODE
							AND LOT_NO  = STR_LOTCODE
						;
						IF LNG_RC_LOCAL = 0 THEN
							STR_ERRORNAME := 'ロット在庫が存在しませんでした。:'|| STR_ITEMCODE || '/' || STR_LOCATIONCODE || '/'  || STR_LOTCODE;
							LNG_SYORIF := 9;
							RETURN 9;
						ELSE
							--
							SELECT INVENTORY_QTY,INSPECTION_QTY,ALIAS_LOT_NO INTO LNG_RC_LOCAL,LNG_AC_LOCAL,STR_ALIAS FROM LOT_INVENTORY
							WHERE
								LOCATION_CD = STR_LOCATIONCODE
								AND ITEM_CD = STR_ITEMCODE
								AND LOT_NO  = STR_LOTCODE
							;
							IF LNG_RC_LOCAL < -LNG_QTY THEN
								IF LNG_OPNO = 17 AND LNG_AC_LOCAL >= -LNG_QTY THEN
									LNG_AZUDIV := 1;
								ELSE
									STR_ERRORNAME := 'ロット在庫が不足しています。'|| STR_ITEMCODE || '/' || STR_LOCATIONCODE || '/'  || STR_LOTCODE || ':' || LNG_AC_LOCAL|| ':' || LNG_QTY;
									LNG_SYORIF := 9;
									RETURN 9;
								END IF;
							END IF;
						END IF;
						IF  STR_ALIAS_LOT is NULL THEN STR_ALIAS_LOT := STR_ALIAS; END IF;
					END IF;
				END IF;
			END IF;
		END IF;
	--担当者マスタ存在チェック
		IF TRIM(STR_INPUTNO) = '' OR STR_INPUTNO IS NULL THEN
			STR_ERRORNAME := '担当者コードが入力されていません。';
			LNG_SYORIF := 9;
			RETURN 9;
		ELSE
			NULL;
--			--
--			SELECT COUNT(*) INTO LNG_RC_LOCAL FROM JBD_MST_TANTO
--			WHERE
--				TANTO_CD = STR_INPUTNO
--			;
--			IF LNG_RC_LOCAL = 0 THEN
--				STR_ERRORNAME := '担当者コードがマスタに存在しません。';
--				LNG_SYORIF := 9;
--				RETURN 9;
--			END IF;
		END IF;

		--正常終了の場合
		RETURN 0;
	END;

--■■■■■■■
--■　在庫更新
--■■■■■■■
	PROCEDURE UPDATE_ALLZAITABLE IS
		LOCAL_LNG_RC NUMBER := 0;
	BEGIN
-- 2008.04.16 Edit Start
		--処理区分をセットする
		--数量がマイナスの場合出庫扱いとする
--		IF LNG_QTY < 0 THEN
--			LNG_INOUTKBN := 1;
--		ELSE
--			LNG_INOUTKBN := 0;
--		END IF;
		--実在庫マイナスの場合
	IF LNG_OPNO = 17 THEN
		NULL;
	ELSE
		IF LNG_OPNO = 1 OR LNG_OPNO = 2 OR LNG_OPNO = 4 OR LNG_OPNO = 6 OR LNG_OPNO = 10  OR LNG_OPNO = 14 OR LNG_OPNO = 99 OR LNG_OPNO = 98 THEN
			LNG_INOUTKBN := 1;
		ELSE
			LNG_INOUTKBN := 0;
		END IF;
	END IF;
-- 2008.04.16 Edit Start
		--サーバー日付取得
		SELECT FUN_GET_SERVERDATE INTO STR_DATE FROM DUAL;
		IF LNG_OPNO = 51 THEN
			NULL;
		ELSE
			DTE_LOTMAKEDATE := FUN_GET_LOTMAKEDATE(STR_ITEMCODE,STR_LOTCODE,DTE_LOTMAKEDATE);
		END IF;
		DTE_START_DATE := DTE_LOTMAKEDATE;
		DTE_END_DATE :=FUN_ITEM_EXPIRE_MONTHS(STR_ITEMCODE, DTE_LOTMAKEDATE );
		--受払区分設定
		CASE
			--在庫関連
			WHEN  LNG_OPNO = 1  THEN LNG_INOUTDIVISION := 4;
			WHEN  LNG_OPNO = 2  THEN LNG_INOUTDIVISION := 4;
			WHEN  LNG_OPNO = 3  THEN LNG_INOUTDIVISION := 1;
			WHEN  LNG_OPNO = 4  THEN LNG_INOUTDIVISION := 2;
			WHEN  LNG_OPNO = 5  THEN LNG_INOUTDIVISION := 1;
			WHEN  LNG_OPNO = 6  THEN LNG_INOUTDIVISION := 2;
			WHEN  LNG_OPNO = 7  THEN LNG_INOUTDIVISION := 3;
			WHEN  LNG_OPNO = 8  THEN LNG_INOUTDIVISION := 3;
			WHEN  LNG_OPNO = 9  THEN LNG_INOUTDIVISION := 10;
			WHEN  LNG_OPNO = 10 THEN LNG_INOUTDIVISION := 10;
			--WHEN  LNG_OPNO = 11 THEN LNG_INOUTDIVISION := 0;
			WHEN  LNG_OPNO = 11 THEN NULL;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			--WHEN  LNG_OPNO = 12 THEN LNG_INOUTDIVISION := 0;
			WHEN  LNG_OPNO = 12 THEN NULL;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			WHEN  LNG_OPNO = 13 THEN LNG_INOUTDIVISION := 11;
			WHEN  LNG_OPNO = 14 THEN LNG_INOUTDIVISION := 11;
			WHEN  LNG_OPNO = 15 THEN LNG_INOUTDIVISION := 0;
/* 返品追加 add by fujimoto 20081025*/
			WHEN  LNG_OPNO = 16 THEN LNG_INOUTDIVISION := 12;
			WHEN  LNG_OPNO = 17 THEN LNG_INOUTDIVISION := 13;
			WHEN  LNG_OPNO = 41 THEN LNG_INOUTDIVISION := 1;
			WHEN  LNG_OPNO = 42 THEN LNG_INOUTDIVISION := 1;
			WHEN  LNG_OPNO = 51 THEN LNG_INOUTDIVISION := 1;
			WHEN  LNG_OPNO = 99 THEN LNG_INOUTDIVISION := 4;
			WHEN  LNG_OPNO = 98 THEN LNG_INOUTDIVISION := 4;

			--受払ソースのみ
			--ロケーションを基準保管場所へ固定セット
			WHEN  LNG_OPNO = 101 OR LNG_OPNO = 102 THEN
				LNG_INOUTDIVISION := 4;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			WHEN  LNG_OPNO = 103 THEN
				LNG_INOUTDIVISION := 1;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			WHEN  LNG_OPNO = 104 THEN
				LNG_INOUTDIVISION := 2;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			WHEN  LNG_OPNO = 105 THEN
				LNG_INOUTDIVISION := 1;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			WHEN  LNG_OPNO = 106 THEN
				LNG_INOUTDIVISION := 2;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			WHEN  LNG_OPNO = 107 OR LNG_OPNO = 108 OR LNG_OPNO = 110 THEN
				LNG_INOUTDIVISION := 3;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			WHEN  LNG_OPNO = 109 THEN
				LNG_INOUTDIVISION := 5;
				--SELECT FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE) INTO STR_LOCATIONCODE FROM DUAL;
			--上記以外はエラー
			ELSE  LNG_INOUTDIVISION := 99;
		END CASE;
		--エラー処理
		IF LNG_INOUTDIVISION = 99 THEN
			STR_ERRORNAME := '受払区分に該当がありません。';
			LNG_SYORIF := 9;
			GOTO ERROR_SYORI;
		END IF;
		
		IF LNG_OPNO > 100 OR LNG_OPNO = 1 OR LNG_OPNO = 3 OR LNG_OPNO = 4 OR LNG_OPNO = 7 OR LNG_OPNO = 11 OR LNG_OPNO = 12 OR LNG_OPNO = 15 OR  LNG_OPNO = 42 OR LNG_OPNO = 99 OR LNG_OPNO = 98
			THEN NULL;
		ELSE
			IF FUN_GET_ITEM_LOT_DIVISION(STR_ITEMCODE) = 1 THEN
				STR_LOTCODE := '999999';
			END IF;
			IF TRIM(STR_LOTCODE) = '' OR STR_LOTCODE IS NULL THEN
				STR_LOTCODE := '999999';
			END IF;
			IF TRIM(STR_LOCATIONCODE) = '' OR STR_LOCATIONCODE IS NULL THEN
				STR_LOCATIONCODE := FUN_GET_ITEM_DEFAULT_LOCATION(STR_ITEMCODE);
			END IF;
		END IF;
		--
		IF UPDATE_PRE_CHK = 0 THEN
			--在庫更新
			CASE
				--受払ソース更新
				WHEN LNG_OPNO = 101 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 102 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 103 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 104 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 105 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 105 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 106 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 107 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 108 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 109 THEN UPDATE_INOUT_SOURCE_CTL;
				WHEN LNG_OPNO = 110 THEN UPDATE_INOUT_SOURCE_CTL;
				--在庫・受払ソース・受払履歴・ロットトレース
				ELSE
					--
--DBMS_OUTPUT.PUT_LINE('在庫処理');
					--月次総平均の場合
					IF LNG_OPNO = 15 THEN
						NULL;
					ELSE
						--ロット、ロケーション、品目在庫存在チェックをする（ない場合作成）
						INVENTORYTABLE_CHK;
						--科目コード等をセット
						ACCOUNT_ETC_SET;
						--ロットが入っていない場合処理しない 2008.04.02 Edit Kitada
						IF TRIM(STR_LOTCODE) = '' OR STR_LOTCODE IS NULL OR TRIM(STR_LOCATIONCODE) = '' OR STR_LOCATIONCODE IS NULL THEN
							NULL;
						ELSE
							-- 上位ロケーション書込処理追加
							--ロット存在チェック
							SELECT COUNT(*) INTO LOCAL_LNG_RC FROM LOT_INVENTORY
							WHERE
								LOCATION_CD = STR_LOCATIONCODE
								AND ITEM_CD = STR_ITEMCODE
								AND LOT_NO = STR_LOTCODE
							;
							IF LOCAL_LNG_RC <> 0 THEN
								--前回ロット数量情報を取得し上位ロケーションを作成する場合使用する
								SELECT INVENTORY_QTY,BACKORDER_QTY,ASSIGN_QTY,SALES_ASSIGN_QTY,INSPECTION_QTY,INVALID_QTY,FAULT_QTY
								INTO LNG_INVENTORY_QTY,LNG_BACKORDER_QTY,LNG_ASSIGN_QTY,LNG_SALES_ASSIGN_QTY,LNG_INSPECTION_QTY,LNG_INVALID_QTY,LNG_FAULT_QTY FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = STR_ITEMCODE
									AND LOT_NO = STR_LOTCODE
								;
							END IF;
						END IF;
					END IF;
					--在庫更新
					UPDATE_ZAICTL;
					--処理フラグ
					IF LNG_SYORIF = 9 THEN
						NULL;
					ELSE
						--9:在庫入力 10:在庫出庫
						CASE
							WHEN LNG_OPNO = 9 OR LNG_OPNO = 10   OR LNG_OPNO = 13 OR LNG_OPNO = 14 OR LNG_OPNO = 15 OR LNG_OPNO = 16 OR LNG_OPNO = 17 OR LNG_OPNO = 5 OR LNG_OPNO = 51
								THEN NULL;
							WHEN LNG_OPNO = 11 OR LNG_OPNO = 12 THEN
								DBMS_OUTPUT.PUT_LINE('受払ソース処理11');
								--受払ソース更新
								UPDATE_INOUT_SOURCE_CTL11;
							ELSE
								--
								DBMS_OUTPUT.PUT_LINE('受払ソース処理');
								--受払ソース更新
								UPDATE_INOUT_SOURCE_CTL;
						END CASE;
					END IF;
					IF LNG_SYORIF = 9 THEN
						NULL;
					ELSE
						IF LNG_OPNO = 1 OR LNG_OPNO = 98 THEN
							UPDATE_INOUT_SOURCE_CTL99;
						END IF;
					END IF;
					--処理フラグ
					IF LNG_SYORIF = 9 THEN
						NULL;
					ELSE
						CASE
							--指示入力(受注有）/製造入庫/製造出庫/納期回答入力/月次総平均 2008.04.02 Edit Kitada
--							WHEN LNG_OPNO = 15 THEN NULL;
							WHEN LNG_OPNO = 1 OR LNG_OPNO = 3 OR LNG_OPNO = 4 OR LNG_OPNO = 7 OR LNG_OPNO = 11 OR LNG_OPNO = 12 OR LNG_OPNO = 15 OR LNG_OPNO = 51 OR LNG_OPNO = 42 OR LNG_OPNO = 99 OR LNG_OPNO = 98
								THEN NULL;
							ELSE
								--
								--IF LNG_AZUDIV = 0 THEN 
									DBMS_OUTPUT.PUT_LINE('受払履歴処理');
									--受払履歴更新
									UPDATE_INOUT_RECORD_CTL;
								--END IF;
						END CASE;
					END IF;
					--処理フラグ
					IF LNG_SYORIF = 9 THEN
						NULL;
					ELSE
						--在庫が更新される時のみ
						CASE
							--出荷実績入力(受注有）/製造実績入庫/製造実績出庫/受入/在庫入庫/在庫出庫/ロット完了入庫/ロット完了出庫/棚卸調整入庫/棚卸調整出庫
							WHEN LNG_OPNO = 2  OR LNG_OPNO = 6 OR LNG_OPNO = 8 OR LNG_OPNO = 9 OR LNG_OPNO = 10    OR LNG_OPNO = 13  OR LNG_OPNO = 14 OR LNG_OPNO = 16 OR LNG_OPNO = 17 OR LNG_OPNO = 41 OR LNG_OPNO= 5 THEN
								--
								--IF LNG_AZUDIV = 0 THEN
									DBMS_OUTPUT.PUT_LINE('ロットトレース処理');
									--受払履歴更新
									UPDATE_LOTTRACE;
								--END IF;
							ELSE NULL;
						END CASE;
						--
					END IF;
			END CASE;
		END IF;
		--エラーなしの場合
		IF LNG_SYORIF = 0 THEN
			--更新摘要
			-- COMMIT TOTTA;
			CASE
				--月次総平均
				WHEN LNG_OPNO = 15 THEN NULL;
				ELSE
					--ロットが入っていない場合処理しない 2008.04.02 Edit Kitada
					IF TRIM(STR_LOTCODE) = '' OR STR_LOTCODE IS NULL OR TRIM(STR_LOCATIONCODE) = '' OR STR_LOCATIONCODE IS NULL THEN
						NULL;
					ELSE
						--上位ロケーション更新
						PRO_LOCATION_ZAIKO_MAKE(STR_LOCATIONCODE,STR_ITEMCODE,STR_LOTCODE,LNG_QTY);
						--更新摘要
						-- COMMIT TOTTA;
					END IF;
			END CASE;
		--ELSE
			--ロールバック
			-- ROLLBACK TOTTA;
		END IF;
<<ERROR_SYORI>>
		NULL;
	END;
--■■■■■■■
--■　在庫更新
--■■■■■■■
	PROCEDURE UPDATE_ZAICTL IS
		--■■■■■■
		--■　変　数
		--■■■■■■
		STR_SQLHEADER_LOT_LOCAL	VARCHAR2(2000):='';
		STR_SQLHEADER_LOCAL	VARCHAR2(2000):='';
		STR_SQLHEADER_ITEM_LOCAL	VARCHAR2(2000):='';
		STR_SQLWHERE_LOT_LOCAL	VARCHAR2(2000):='';
		STR_SQLWHERE_LOCAL	VARCHAR2(2000):='';
		STR_SQLWHERE_ITEM_LOCAL	VARCHAR2(2000):='';
		LNG_STOCK_DIVISION_LOCAL	NUMBER:=0;		--在庫管理区分
		LNG_ITEM_TANKAKBN_LOCAL	NUMBER:=0;		--品目在庫評価単価区分
		LNG_ZAIKOHTANKA_LOCAL		NUMBER:=0;		--計算後在庫評価単価
		STR_SQL			VARCHAR2(2000):='';	--動的SQL作成
		STR_SQL_ITEM		VARCHAR2(2000):='';	--動的SQL作成
		STR_SQL_LOT		VARCHAR2(2000):='';	--動的SQL作成
		STR_SQL_ASSIGN		VARCHAR2(2000):='';	--動的SQL作成
		LNG_LAST_IN_DATE_LOCAL	DATE;			--最終入庫日
		LNG_LAST_OUT_DATE_LOCAL	DATE;			--最終出庫日
		LNG_LOCAL_LNGRC NUMBER;
		LNG_INOUTQTY NUMBER:=0;				--引当数量
		STR_INOUTLOT VARCHAR2(255):='';			--引当LOT
		STR_INOUTLOCATION VARCHAR2(255):='';		--引当LOCATION
		STR_INOUTITEM VARCHAR2(255):='';
		STR_SQLHEADER_LOT_INOUT	VARCHAR2(2000):='';
		STR_SQLHEADER_INOUT	VARCHAR2(2000):='';
		STR_SQLHEADER_ITEM_INOUT	VARCHAR2(2000):='';
		STR_SQLWHERE_LOT_INOUT	VARCHAR2(2000):='';
		STR_SQLWHERE_INOUT	VARCHAR2(2000):='';
		LNG_SABUN NUMBER:=0;
		STR_DATE VARCHAR2(30);
		KKK VARCHAR2(255);
		LOCAL_ITEMCODE VARCHAR2(255):='';
	BEGIN
		--サーバー日付取得
		SELECT FUN_GET_SERVERDATE INTO STR_DATE FROM DUAL;
		--HEADER
		STR_SQLHEADER_LOT_LOCAL := 'UPDATE LOT_INVENTORY SET ';
		STR_SQLHEADER_LOCAL := 'UPDATE LOCATION_INVENTORY SET ';
		STR_SQLHEADER_ITEM_LOCAL := 'UPDATE ITEM_INVENTORY SET ';
		--WHERE
		STR_SQLWHERE_LOT_LOCAL := '';
		STR_SQLWHERE_LOT_LOCAL := STR_SQLWHERE_LOT_LOCAL || ' WHERE ';
		STR_SQLWHERE_LOT_LOCAL := STR_SQLWHERE_LOT_LOCAL || ' LOCATION_CD = :1';
		STR_SQLWHERE_LOT_LOCAL := STR_SQLWHERE_LOT_LOCAL || ' AND ITEM_CD = :2';
		STR_SQLWHERE_LOT_LOCAL := STR_SQLWHERE_LOT_LOCAL || ' AND LOT_NO  = :3';
		STR_SQLWHERE_LOCAL := '';
		STR_SQLWHERE_LOCAL := STR_SQLWHERE_LOCAL || ' WHERE ';
		STR_SQLWHERE_LOCAL := STR_SQLWHERE_LOCAL || ' LOCATION_CD = :1';
		STR_SQLWHERE_LOCAL := STR_SQLWHERE_LOCAL || ' AND ITEM_CD = :2';
		STR_SQLWHERE_ITEM_LOCAL := '';
		STR_SQLWHERE_ITEM_LOCAL := STR_SQLWHERE_ITEM_LOCAL || ' WHERE ';
		STR_SQLWHERE_ITEM_LOCAL := STR_SQLWHERE_ITEM_LOCAL || ' ITEM_CD = :1';

	--INOUT_SOURCEの引当ロケーション、ロット、数量検索（実績登録LNG_OPNO=2,5,6,8の場合、使用）
		LNG_INOUTQTY := 0;
		STR_INOUTLOT := '';
		STR_INOUTLOCATION := '';
		STR_INOUTITEM := '';
		LOCAL_ITEMCODE := STR_ITEMCODE;
		IF LNG_OPNO = 2 or LNG_OPNO = 5 or LNG_OPNO = 6 or LNG_OPNO = 8 Or LNG_OPNO = 11 Or LNG_OPNO = 12 Or LNG_OPNO = 41 Or  LNG_OPNO = 42 Or LNG_OPNO = 51 OR LNG_OPNO = 98 OR LNG_OPNO = 97 THEN
			-- INOUT_SOURSEと品目が異なった場合は引当を操作しない。2010/02/01 
			LNG_INOUTQTY := FUN_GET_INOUT_QTY2(STR_ODERNO,LNG_ODERLINENO);
			STR_INOUTLOT := FUN_GET_INOUT_LOTNO(STR_ODERNO,LNG_ODERLINENO);
			STR_INOUTLOCATION := FUN_GET_INOUT_LOCATION(STR_ODERNO,LNG_ODERLINENO);
			STR_INOUTITEM := FUN_GET_INOUT_ITEM(STR_ODERNO,LNG_ODERLINENO);
			IF STR_INOUTITEM = STR_ITEMCODE THEN
				LOCAL_ITEMCODE := STR_ITEMCODE;
			ELSE
				IF LNG_OPNO = 11 OR LNG_OPNO = 12 THEN
					LOCAL_ITEMCODE := STR_INOUTITEM;
				ELSE
					LNG_INOUTQTY := NULL;
					LOCAL_ITEMCODE := STR_ITEMCODE;
				END IF;
			END IF;

			--SELECT FUN_GET_INOUT_QTY2(STR_ODERNO,LNG_ODERLINENO) INTO LNG_INOUTQTY FROM DUAL;
			--SELECT FUN_GET_INOUT_LOTNO(STR_ODERNO,LNG_ODERLINENO) INTO STR_INOUTLOT FROM DUAL;
			--SELECT FUN_GET_INOUT_LOCATION(STR_ODERNO,LNG_ODERLINENO) INTO STR_INOUTLOCATION FROM DUAL;
			
			STR_SQLHEADER_LOT_INOUT := 'UPDATE LOT_INVENTORY SET ';
			STR_SQLHEADER_INOUT := 'UPDATE LOCATION_INVENTORY SET ';
			STR_SQLHEADER_ITEM_INOUT := 'UPDATE ITEM_INVENTORY SET ';

			STR_SQLWHERE_LOT_INOUT := '';
			STR_SQLWHERE_LOT_INOUT := STR_SQLWHERE_LOT_INOUT || ' WHERE ';
			STR_SQLWHERE_LOT_INOUT := STR_SQLWHERE_LOT_INOUT || ' LOCATION_CD = ' || STR_INOUTLOCATION;
			STR_SQLWHERE_LOT_INOUT := STR_SQLWHERE_LOT_INOUT || ' AND ITEM_CD = :1';
			STR_SQLWHERE_LOT_INOUT := STR_SQLWHERE_LOT_INOUT || ' AND LOT_NO  = ' || STR_INOUTLOT;
			STR_SQLWHERE_INOUT := '';
			STR_SQLWHERE_INOUT := STR_SQLWHERE_INOUT || ' WHERE ';
			STR_SQLWHERE_INOUT := STR_SQLWHERE_INOUT || ' LOCATION_CD = ' || STR_INOUTLOCATION;
			STR_SQLWHERE_INOUT := STR_SQLWHERE_INOUT || ' AND ITEM_CD = :1';

		END IF;


	--在庫管理区分(ITEM)チェック(0:在庫管理区分チェックをしない 1:在庫管理区分チェックをする)
		IF LNG_CHKFLG = '1' THEN
			--在庫管理区分取得
			LNG_STOCK_DIVISION_LOCAL := FUN_GET_ITEM_STOCK_DIVISION(LOCAL_ITEMCODE);
			--SELECT FUN_GET_ITEM_STOCK_DIVISION(STR_ITEMCODE) INTO LNG_STOCK_DIVISION_LOCAL FROM DUAL;
			CASE LNG_STOCK_DIVISION_LOCAL
			WHEN 3 THEN	--更新除外の場合
				LNG_SYORIF := 0;
				GOTO P_END;
			WHEN 9 THEN	--品目なしの場合  11,12はエラーにしない 2010.2.22
				IF LNG_OPNO = 11 OR LNG_OPNO = 12 THEN
					LNG_SYORIF := 0;
				ELSE
					LNG_SYORIF := 9;
				END IF;
				GOTO P_END;
			ELSE		--正常
				LNG_SYORIF := 0;
				NULL;
			END CASE;
		END IF;
--11:ロケーション別棚卸情報更新
		IF LNG_OPNO = '999' THEN
			--ロット在庫テーブル更新
			--SQL文構築
			STR_SQL := '';
			STR_SQL := STR_SQL || 'UPDATE LOT_INVENTORY SET';
			STR_SQL := STR_SQL || ' LAST_INVENTORY_DATE  = ' || '''' || DTE_INOUTDATE || '''';
			STR_SQL := STR_SQL || ' ,LAST_INVENTORY_QTY  = ' || LNG_INVENTORYQTY;
			STR_SQL := STR_SQL || ' ,NEW_INVENTORY_COUNT = ' || LNG_QTY;
			STR_SQL := STR_SQL || ' WHERE';
			STR_SQL := STR_SQL || ' LOCATION_CD = :1';
			STR_SQL := STR_SQL || ' AND ITEM_CD = :2';
			STR_SQL := STR_SQL || ' AND LOT_NO  = :3';
			--SQL実行
			EXECUTE IMMEDIATE STR_SQL USING STR_LOCATIONCODE, LOCAL_ITEMCODE , STR_LOTCODE;
			--更新件数表示
			DBMS_OUTPUT.PUT_LINE('更新した件数は' || SQL%ROWCOUNT || '件');
			LNG_SYORIF := 0;
		ELSE
	--ロケーションマスタ更新


	--在庫マスタ更新SQL作成

			STR_SQL := '';
			STR_SQL_ITEM := '';
			STR_SQL_ASSIGN := '';
			--処理モード
			CASE LNG_OPNO

			WHEN 1 THEN	--1:指示入力
				STR_SQL := STR_SQL || ' ASSIGN_QTY = NVL(ASSIGN_QTY,0) - ' || LNG_QTY;
			WHEN 2 THEN	--2:出荷実績入力
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) - ' || LNG_QTY;
				IF LNG_INOUTQTY is NULL THEN
					LNG_SABUN := 0;
				ELSE
					IF LNG_QTY < 0 THEN
						IF (LNG_INOUTQTY + LNG_QTY) > 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF LNG_INOUTQTY > 0 THEN
								LNG_SABUN := -(LNG_INOUTQTY + LNG_QTY);
							ELSE
								LNG_SABUN := -LNG_QTY;
							END IF;
						END IF;
					ELSE
						IF LNG_INOUTQTY > 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF (LNG_INOUTQTY + LNG_QTY) > 0 THEN
								LNG_SABUN := LNG_INOUTQTY;
							ELSE
								LNG_SABUN := -LNG_QTY;
							END IF;
						END IF;
					END IF;
				END IF;
				IF NVL(STR_ITEMCODE,'_') = NVL(STR_INOUTITEM,'_') AND NVL(STR_INOUTLOT,'_') = NVL(STR_LOTCODE,'_') 
				    AND NVL(STR_INOUTLOCATION,'_') = NVL(STR_LOCATIONCODE,'_') THEN
					STR_SQL := STR_SQL || ' ,ASSIGN_QTY = NVL(ASSIGN_QTY,0) - ' || LNG_SABUN ;
				ELSE
					STR_SQL_ASSIGN := STR_SQL_ASSIGN || ' ASSIGN_QTY = NVL(ASSIGN_QTY,0) - ' || LNG_SABUN ;
				END IF;
			WHEN 3 THEN	--3:製造入庫
				STR_SQL := STR_SQL || ' BACKORDER_QTY = NVL(BACKORDER_QTY,0) + ' || LNG_QTY;
			WHEN 4 THEN	--4:製造出庫
				STR_SQL := STR_SQL || ' ASSIGN_QTY = NVL(ASSIGN_QTY,0) - ' || LNG_QTY;
			WHEN 5 THEN	--5:製造検査待入力
				STR_SQL := STR_SQL || ' INSPECTION_QTY = NVL(INSPECTION_QTY,0) + ' || LNG_QTY;
				IF STR_ITEMCODE = STR_INOUTITEM AND STR_INOUTLOT = STR_LOTCODE AND STR_INOUTLOCATION = STR_LOCATIONCODE THEN
					STR_SQL := STR_SQL || ' ,FINISH_QTY = NVL(FINISH_QTY,0) - ' || LNG_QTY;
				ELSE
					STR_SQL_ASSIGN := STR_SQL_ASSIGN || ' FINISH_QTY = NVL(FINISH_QTY,0) - ' || LNG_QTY;
				END IF;
			WHEN 6 THEN	--6:製造実績出庫
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) - ' || LNG_QTY;
				IF LNG_INOUTQTY is NULL THEN
					LNG_SABUN := 0;
				ELSE
					IF LNG_QTY < 0 THEN
						IF (LNG_INOUTQTY + LNG_QTY) > 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF LNG_INOUTQTY > 0 THEN
								LNG_SABUN := -(LNG_INOUTQTY + LNG_QTY);
							ELSE
								LNG_SABUN := -LNG_QTY;
							END IF;
						END IF;
					ELSE
						IF LNG_INOUTQTY > 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF (LNG_INOUTQTY + LNG_QTY) > 0 THEN
								LNG_SABUN := LNG_INOUTQTY;
							ELSE
								LNG_SABUN := -LNG_QTY;
							END IF;
						END IF;
					END IF;
				END IF;
				IF STR_ITEMCODE = STR_INOUTITEM AND STR_INOUTLOT = STR_LOTCODE AND STR_INOUTLOCATION = STR_LOCATIONCODE THEN
					STR_SQL := STR_SQL || ' ,ASSIGN_QTY = NVL(ASSIGN_QTY,0) - ' || LNG_SABUN;
				ELSE
					STR_SQL_ASSIGN := STR_SQL_ASSIGN || ' ASSIGN_QTY = NVL(ASSIGN_QTY,0) - ' || LNG_SABUN;
				END IF;
			WHEN 7 THEN	--7:納期回答入力時
				STR_SQL := STR_SQL || ' BACKORDER_QTY = NVL(BACKORDER_QTY,0) + ' || LNG_QTY;
			WHEN 8 THEN	--8:受入検査入力時
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) + ' || LNG_QTY;
				IF LNG_INOUTQTY is NULL THEN
					LNG_SABUN := 0;
				ELSE
					IF LNG_QTY < 0 THEN
						IF (LNG_INOUTQTY - LNG_QTY) < 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF LNG_INOUTQTY < 0 THEN
								LNG_SABUN := LNG_QTY - LNG_INOUTQTY;
							ELSE
								LNG_SABUN := LNG_QTY;
							END IF;
						END IF;
					ELSE
						IF LNG_INOUTQTY < 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF (LNG_INOUTQTY - LNG_QTY) < 0 THEN
								LNG_SABUN := LNG_INOUTQTY;
							ELSE
								LNG_SABUN := LNG_QTY;
							END IF;
						END IF;
					END IF;
				END IF;
				IF STR_ITEMCODE = STR_INOUTITEM AND STR_INOUTLOT = STR_LOTCODE AND STR_INOUTLOCATION = STR_LOCATIONCODE THEN
					STR_SQL := STR_SQL || ' ,BACKORDER_QTY = NVL(BACKORDER_QTY,0) - ' || LNG_SABUN;
				ELSE
					STR_SQL_ASSIGN := STR_SQL_ASSIGN || ' BACKORDER_QTY = NVL(BACKORDER_QTY,0) - ' || LNG_SABUN;
				END IF;
			WHEN 9 THEN	--9:在庫入庫
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) + ' || LNG_QTY;
			WHEN 10 THEN	--10:在庫出庫
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) - ' || LNG_QTY;
			WHEN 11 THEN	--11:ロット完了入庫
				IF NVL(LNG_INOUTQTY,0) < 0 THEN LNG_INOUTQTY :=0;END IF;
				STR_SQL := STR_SQL || ' BACKORDER_QTY = NVL(BACKORDER_QTY,0) - ' || NVL(LNG_INOUTQTY,0);
			WHEN 12 THEN	--12:ロット完了出庫
				IF NVL(LNG_INOUTQTY,0) > 0 THEN LNG_INOUTQTY :=0;END IF;
				STR_SQL := STR_SQL || ' ASSIGN_QTY = NVL(ASSIGN_QTY,0) - ' || NVL(LNG_INOUTQTY,0);
			WHEN 13 THEN	--13:棚卸入庫
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) + ' || LNG_QTY;
			WHEN 14 THEN	--14:棚卸出庫
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) - ' || LNG_QTY;
			WHEN 15 THEN	--15:在庫評価単価特殊更新（月次総平均）
				STR_SQL := STR_SQL || ' INVENTORY_COST = ' || LNG_COST;
			WHEN 16 THEN	--16:返品
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) + ' || LNG_QTY;
			WHEN 17 THEN	--17:預かり
				IF LNG_AZUDIV = 0 THEN
					IF LNG_INOUTKBN = 0 THEN
						STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) + ' || LNG_QTY;
					ELSE
						STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) - ' || LNG_QTY;
					END IF;	
				ELSE
					IF LNG_INOUTKBN = 0 THEN
						STR_SQL := STR_SQL || ' INSPECTION_QTY = NVL(INSPECTION_QTY,0) + ' || LNG_QTY;
					ELSE
						STR_SQL := STR_SQL || ' INSPECTION_QTY = NVL(INSPECTION_QTY,0) - ' || LNG_QTY;
					END IF;	
				END IF;
			WHEN 41 THEN    -- 製造実績（仕上）
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) + ' || LNG_QTY;
				IF LNG_INOUTQTY is NULL THEN
					LNG_SABUN := 0;
				ELSE
					IF LNG_QTY < 0 THEN
						IF (LNG_INOUTQTY - LNG_QTY) < 0 THEN 
							LNG_SABUN := 0;
						ELSE
							IF LNG_INOUTQTY < 0 THEN
								LNG_SABUN := LNG_QTY - LNG_INOUTQTY;
							ELSE
								LNG_SABUN := LNG_QTY;
							END IF;
						END IF;
					ELSE
						IF LNG_INOUTQTY < 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF (LNG_INOUTQTY - LNG_QTY) < 0 THEN
								LNG_SABUN := LNG_INOUTQTY;
							ELSE
								LNG_SABUN := LNG_QTY;
							END IF;
						END IF;
					END IF;
				END IF;
				IF STR_ITEMCODE = STR_INOUTITEM AND STR_INOUTLOT = STR_LOTCODE AND STR_INOUTLOCATION = STR_LOCATIONCODE THEN
					STR_SQL := STR_SQL || ' ,BACKORDER_QTY = NVL(BACKORDER_QTY,0) - ' || LNG_SABUN;
				ELSE
					STR_SQL_ASSIGN := STR_SQL_ASSIGN || ' BACKORDER_QTY = NVL(BACKORDER_QTY,0) - ' || LNG_SABUN;
				END IF;
			WHEN 42 THEN --包装実績（仕上）
				STR_SQL := STR_SQL || ' FINISH_QTY = NVL(FINISH_QTY,0) + ' || LNG_QTY;
				IF LNG_INOUTQTY is NULL THEN
					LNG_SABUN := 0;
				ELSE
					IF LNG_QTY < 0 THEN
						IF (LNG_INOUTQTY - LNG_QTY) < 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF LNG_INOUTQTY < 0 THEN
								LNG_SABUN := LNG_QTY - LNG_INOUTQTY;
							ELSE
								LNG_SABUN := LNG_QTY;
							END IF;
						END IF;
					ELSE
						IF LNG_INOUTQTY < 0 THEN
							LNG_SABUN := 0;
						ELSE
							IF (LNG_INOUTQTY - LNG_QTY) < 0 THEN
								LNG_SABUN := LNG_INOUTQTY;
							ELSE
								LNG_SABUN := LNG_QTY;
							END IF;
						END IF;
					END IF;
				END IF;
				STR_SQL := STR_SQL || ' ,BACKORDER_QTY = NVL(BACKORDER_QTY,0) - ' || LNG_SABUN;
			WHEN 51 THEN
				STR_SQL := STR_SQL || ' INVENTORY_QTY = NVL(INVENTORY_QTY,0) + ' || LNG_QTY;
				STR_SQL := STR_SQL || ' ,INSPECTION_QTY = NVL(INSPECTION_QTY,0) - ' || LNG_QTY;
			WHEN 99 THEN	--99:在庫引当受注
				STR_SQL := STR_SQL || ' SALES_ASSIGN_QTY = NVL(SALES_ASSIGN_QTY,0) - ' || LNG_QTY;
			WHEN 98 THEN	--98:在庫引当出荷確定
				STR_SQL := STR_SQL || ' ASSIGN_QTY = NVL(ASSIGN_QTY,0) - ' || LNG_QTY;
			WHEN 97 THEN	--97:在庫引当受注
				IF NVL(LNG_INOUTQTY,0) > 0 THEN LNG_INOUTQTY :=0;END IF;
				STR_SQL := STR_SQL || ' SALES_ASSIGN_QTY = NVL(SALES_ASSIGN_QTY,0) - ' || LNG_INOUTQTY;
			ELSE
				NULL;
			END CASE;
		END IF;

--入庫・出庫日関連
		IF  LNG_OPNO = 15 THEN
			NULL;
		ELSE
DBMS_OUTPUT.PUT_LINE(STR_LOTCODE);
			--ロットが入っていない場合処理しない 2008.04.02 Edit Kitada
			IF TRIM(STR_LOTCODE) = '' OR STR_LOTCODE IS NULL OR TRIM(STR_LOCATIONCODE) = '' OR STR_LOCATIONCODE IS NULL THEN
				NULL;
			ELSE
				--入庫/出庫日取得
				SELECT FUN_GET_LOT_LAST_IN_DATE(STR_LOCATIONCODE,STR_ITEMCODE,STR_LOTCODE) INTO LNG_LAST_IN_DATE_LOCAL FROM DUAL;
				SELECT FUN_GET_LOT_LAST_OUT_DATE(STR_LOCATIONCODE,STR_ITEMCODE,STR_LOTCODE) INTO LNG_LAST_OUT_DATE_LOCAL FROM DUAL;
			END IF;
		END IF;
		--処理モード
		CASE LNG_OPNO
		WHEN 2 THEN	--2:出荷実績入力
			IF LNG_LAST_OUT_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_OUT_DATE_LOCAL = '' OR LNG_LAST_OUT_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_OUT_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		WHEN 5 THEN	--5:実績（検査待在庫計上）
			IF LNG_LAST_IN_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_IN_DATE_LOCAL = '' OR LNG_LAST_IN_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_IN_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		WHEN 41 THEN	--41:製造実績（仕上）
			IF LNG_LAST_IN_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_IN_DATE_LOCAL = '' OR LNG_LAST_IN_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_IN_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		WHEN 6 THEN	--6:実績出庫
			IF LNG_LAST_OUT_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_OUT_DATE_LOCAL = '' OR LNG_LAST_OUT_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_OUT_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		WHEN 8 THEN	--8:受入検査入力
			IF LNG_LAST_IN_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_IN_DATE_LOCAL = '' OR LNG_LAST_IN_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_IN_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		WHEN 9 THEN	--9:在庫入庫
			IF LNG_LAST_IN_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_IN_DATE_LOCAL = '' OR LNG_LAST_IN_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_IN_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		WHEN 10 THEN	--10:在庫出庫
			IF LNG_LAST_OUT_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_OUT_DATE_LOCAL = '' OR LNG_LAST_OUT_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_OUT_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		WHEN 16 THEN	--16:返品
			IF LNG_LAST_IN_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_IN_DATE_LOCAL = '' OR LNG_LAST_IN_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_IN_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		WHEN 17 THEN	--17:預かり
			IF LNG_LAST_IN_DATE_LOCAL < DTE_INOUTDATE OR LNG_LAST_IN_DATE_LOCAL = '' OR LNG_LAST_IN_DATE_LOCAL IS NULL THEN
				STR_SQL := STR_SQL || ' ,LAST_IN_DATE = ' || '''' || DTE_INOUTDATE || '''' ;
			END IF;
		ELSE
			NULL;
		END CASE;
--在庫評価単価更新
		--10:在庫評価単価特殊更新（仕入単価決定入力時）の場合処理しない
		IF LNG_OPNO = 10 THEN
			NULL;
		ELSE
			--LNG_CALCCOSTFLG = 仮単価フラグ(在庫評価単価計算時に使用)(0:通常 1:仮単価)
			--LNG_COSTFLG     = 在庫評価単価更新フラグ (0:在庫評価単価を再計算する 1:在庫評価単価を再計算しない)
			IF LNG_CALCCOSTFLG = 0 AND LNG_COSTFLG = 0 THEN
				--COMPANYテーブルより読み込む
				OPEN CUR_COMPANY(STR_COMPANY_CD);
				--データ取得
				IF CUR_COMPANY%NOTFOUND THEN
					--
					STR_ERRORNAME := '会社情報が取得できませんでした。';
					--エラーフラグ
					LNG_SYORIF := 9;
				ELSE
					FETCH CUR_COMPANY INTO F_COMPANY;
				END IF;
				CLOSE CUR_COMPANY;
					KKK := F_COMPANY.UNITPRICE_ROUNDUP_UNIT;	--単価小数点以下桁数==0:0 1:0.1 2:0.01 3:0.001 4:0.0001
					KKK := F_COMPANY.ROUNDUP;			--端数処理区分==0:切り捨て 1:四捨五入 2:切り上げ
				--在庫評価単価区分取得
				SELECT FUN_GET_ITEM_ZAITANKAKBN(STR_ITEMCODE) INTO LNG_ITEM_TANKAKBN_LOCAL FROM DUAL;
				CASE LNG_ITEM_TANKAKBN_LOCAL
				WHEN 1 THEN	--移動平均
					SELECT FUN_GET_IDOUHEIKIN(STR_ITEMCODE,LNG_INOUTKBN,LNG_QTY,LNG_COST,LNG_OPNO) INTO LNG_ZAIKOHTANKA_LOCAL FROM DUAL;
					SELECT FNC_端数処理(LNG_ZAIKOHTANKA_LOCAL,F_COMPANY.ROUNDUP,F_COMPANY.UNITPRICE_ROUNDUP_UNIT) INTO LNG_ZAIKOHTANKA_LOCAL FROM DUAL;
					STR_SQL := STR_SQL || ' ,INVENTORY_COST = ' || LNG_ZAIKOHTANKA_LOCAL;
				WHEN 2	THEN	--最終仕入
					STR_SQL := STR_SQL || ' ,INVENTORY_COST = ' || LNG_COST;
				ELSE
					NULL;
				END CASE;
			END IF;
		END IF;
--生成SQLがない場合
		IF STR_SQL = '' THEN
			GOTO P_END;
		ELSE
			--有効開始日
--			IF DTE_START_DATE IS NULL THEN DTE_INOUTDATE
			IF STR_ALIAS_LOT is NULL THEN 
				null;
			ELSE
				STR_SQL_LOT := ', ALIAS_LOT_NO = ' || '''' || STR_ALIAS_LOT || ''' ' ;
			END IF;
				STR_DATE := TO_CHAR(DTE_LOTMAKEDATE,CSTR_FULLDATEFORMAT);
				STR_SQL_LOT := STR_SQL_LOT || ' ,ISSUE_DATE = TO_DATE(' || '''' || STR_DATE || '''' || ',' || '''' || CSTR_FULLDATEFORMAT || '''' || ')' ;
				--STR_SQL_LOT := STR_SQL_LOT || ' ,ISSUE_DATE = TO_DATE(TO_CHAR(' || '''' || DTE_LOTMAKEDATE || '''' || ',' || '''' || CSTR_FULLDATEFORMAT || '''' || '),' || '''' || CSTR_FULLDATEFORMAT || '''' || ')';
				STR_SQL_LOT := STR_SQL_LOT || ' ,START_DATE = TO_DATE(' || '''' || DTE_START_DATE || '''' || ',' || '''' || CSTR_DATEFORMAT || '''' || ')' ;
				STR_SQL_LOT := STR_SQL_LOT || ' ,END_DATE   = TO_DATE(' || '''' || DTE_END_DATE || '''' || ',' || '''' || CSTR_DATEFORMAT || '''' || ')' ;
--			ELSE
--				STR_SQL_LOT := STR_SQL_LOT || ' ,START_DATE = TO_DATE(' || '''' || DTE_START_DATE || '''' || ',' || '''' || CSTR_DATEFORMAT || '''' || ')' ;
--				STR_SQL_LOT := STR_SQL_LOT || ' ,END_DATE   = TO_DATE(' || '''' || DTE_END_DATE || '''' || ',' || '''' || CSTR_DATEFORMAT || '''' || ')' ;
--			END IF;
			--更新日付、更新者SQL生成
			STR_DATE := FUN_GET_SERVERDATE;
			STR_SQL := STR_SQL || ' ,UPDATE_DATE = TO_DATE(' || '''' || STR_DATE || '''' || ',' || '''' || CSTR_FULLDATEFORMAT || '''' || ')' ;
			STR_SQL := STR_SQL || ' ,UPDATOR_CD  = ' || '''' || STR_INPUTNO || '''' ;
		END IF;
--更新SQL実行
		DBMS_OUTPUT.PUT_LINE(STR_SQL);
		--月次総平均の場合
		IF LNG_OPNO = 15 Or LNG_OPNO = 3 Or LNG_OPNO = 7 Or LNG_OPNO = 11  THEN
				--品目在庫のみ更新
				STR_SQLHEADER_ITEM_LOCAL := STR_SQLHEADER_ITEM_LOCAL || STR_SQL || STR_SQLWHERE_ITEM_LOCAL;
				DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_ITEM_LOCAL);
				--SQL実行
				EXECUTE IMMEDIATE STR_SQLHEADER_ITEM_LOCAL USING LOCAL_ITEMCODE;
		ELSE
			--ロットが入っていない場合処理しない 2008.04.02 Edit Kitada
			IF TRIM(STR_LOTCODE) = '' OR STR_LOTCODE IS NULL OR TRIM(STR_LOCATIONCODE) = '' OR STR_LOCATIONCODE IS NULL THEN
				--品目在庫更新
				STR_SQLHEADER_ITEM_LOCAL := STR_SQLHEADER_ITEM_LOCAL ||  STR_SQL || STR_SQLWHERE_ITEM_LOCAL;
				DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_ITEM_LOCAL);
				--SQL実行
				EXECUTE IMMEDIATE STR_SQLHEADER_ITEM_LOCAL USING LOCAL_ITEMCODE;
			ELSE
				--ロット別在庫更新
				STR_SQLHEADER_LOT_LOCAL := STR_SQLHEADER_LOT_LOCAL || STR_SQL || STR_SQL_LOT || STR_SQLWHERE_LOT_LOCAL;
				DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_LOT_LOCAL);
				--SQL実行
				EXECUTE IMMEDIATE STR_SQLHEADER_LOT_LOCAL USING STR_LOCATIONCODE, LOCAL_ITEMCODE , STR_LOTCODE;
				--ロケーション在庫更新
				STR_SQLHEADER_LOCAL := STR_SQLHEADER_LOCAL || STR_SQL || STR_SQLWHERE_LOCAL;
				DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_LOCAL);
				--SQL実行
				EXECUTE IMMEDIATE STR_SQLHEADER_LOCAL USING STR_LOCATIONCODE, LOCAL_ITEMCODE;
				--
				UPDATE LOCATION_INVENTORY SET
					INVENTORY_COST      = (SELECT INVENTORY_COST FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_IN_DATE        = (SELECT LAST_IN_DATE FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_OUT_DATE       = (SELECT LAST_OUT_DATE FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_INVENTORY_DATE = (SELECT LAST_INVENTORY_DATE FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_INVENTORY_QTY  = (SELECT LAST_INVENTORY_QTY FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_INVENTORY_COST = (SELECT LAST_INVENTORY_COST FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,NEW_INVENTORY_QTY   = (SELECT NEW_INVENTORY_COUNT FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
				WHERE
					LOCATION_CD = STR_LOCATIONCODE
					AND ITEM_CD = LOCAL_ITEMCODE
				;
				--品目在庫更新
				STR_SQLHEADER_ITEM_LOCAL := STR_SQLHEADER_ITEM_LOCAL ||  STR_SQL || STR_SQLWHERE_ITEM_LOCAL;
				DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_ITEM_LOCAL);
				--SQL実行
				EXECUTE IMMEDIATE STR_SQLHEADER_ITEM_LOCAL USING LOCAL_ITEMCODE;
				--
				--
				UPDATE ITEM_INVENTORY SET
					INVENTORY_COST      = (SELECT INVENTORY_COST FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_IN_DATE        = (SELECT LAST_IN_DATE FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_OUT_DATE       = (SELECT LAST_OUT_DATE FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_INVENTORY_DATE = (SELECT LAST_INVENTORY_DATE FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_INVENTORY_QTY  = (SELECT LAST_INVENTORY_QTY FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,LAST_INVENTORY_COST = (SELECT LAST_INVENTORY_COST FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
					,NEW_INVENTORY_QTY   = (SELECT NEW_INVENTORY_COUNT FROM LOT_INVENTORY
								WHERE
									LOCATION_CD = STR_LOCATIONCODE
									AND ITEM_CD = LOCAL_ITEMCODE
									AND LOT_NO  = STR_LOTCODE)
				WHERE
					ITEM_CD = LOCAL_ITEMCODE
				;
				IF LNG_OPNO = 2 or  LNG_OPNO = 6 or LNG_OPNO = 8 Or  LNG_OPNO = 41   Or LNG_OPNO = 42 Or LNG_OPNO = 5  THEN
					IF STR_ITEMCODE = STR_INOUTITEM AND STR_INOUTLOT = STR_LOTCODE AND STR_INOUTLOCATION = STR_LOCATIONCODE THEN
						NULL;
					ELSE
						IF TRIM(STR_INOUTLOT) = '' OR STR_INOUTLOT IS NULL THEN
							--品目在庫更新
							STR_SQLHEADER_ITEM_INOUT := STR_SQLHEADER_ITEM_INOUT  ||  STR_SQL_ASSIGN  || STR_SQLWHERE_ITEM_LOCAL;
							DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_ITEM_INOUT);
							--SQL実行
							EXECUTE IMMEDIATE STR_SQLHEADER_ITEM_INOUT USING STR_INOUTITEM;
						ELSE
							--ロット別在庫更新
							STR_SQLHEADER_LOT_INOUT := STR_SQLHEADER_LOT_INOUT || STR_SQL_ASSIGN || STR_SQLWHERE_LOT_INOUT;
							DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_LOT_INOUT);
							--SQL実行
							EXECUTE IMMEDIATE STR_SQLHEADER_LOT_INOUT USING STR_INOUTITEM;
							--ロケーション在庫更新
							STR_SQLHEADER_INOUT := STR_SQLHEADER_INOUT || STR_SQL_ASSIGN || STR_SQLWHERE_INOUT;
							DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_INOUT);
							--SQL実行
							EXECUTE IMMEDIATE STR_SQLHEADER_INOUT USING STR_INOUTITEM;
							--
							UPDATE LOCATION_INVENTORY SET
								INVENTORY_COST      = (SELECT INVENTORY_COST FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_IN_DATE        = (SELECT LAST_IN_DATE FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_OUT_DATE       = (SELECT LAST_OUT_DATE FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_INVENTORY_DATE = (SELECT LAST_INVENTORY_DATE FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_INVENTORY_QTY  = (SELECT LAST_INVENTORY_QTY FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_INVENTORY_COST = (SELECT LAST_INVENTORY_COST FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,NEW_INVENTORY_QTY   = (SELECT NEW_INVENTORY_COUNT FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
							WHERE
								LOCATION_CD = STR_INOUTLOCATION
								AND ITEM_CD = STR_INOUTITEM
							;
							--品目在庫更新
							STR_SQLHEADER_ITEM_INOUT := STR_SQLHEADER_ITEM_INOUT  ||  STR_SQL_ASSIGN  || STR_SQLWHERE_ITEM_LOCAL;
							DBMS_OUTPUT.PUT_LINE(STR_SQLHEADER_ITEM_INOUT);
							--SQL実行
							EXECUTE IMMEDIATE STR_SQLHEADER_ITEM_INOUT USING STR_INOUTITEM;
							--
							--
							UPDATE ITEM_INVENTORY SET
								INVENTORY_COST      = (SELECT INVENTORY_COST FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_IN_DATE        = (SELECT LAST_IN_DATE FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_OUT_DATE       = (SELECT LAST_OUT_DATE FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_INVENTORY_DATE = (SELECT LAST_INVENTORY_DATE FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_INVENTORY_QTY  = (SELECT LAST_INVENTORY_QTY FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,LAST_INVENTORY_COST = (SELECT LAST_INVENTORY_COST FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
								,NEW_INVENTORY_QTY   = (SELECT NEW_INVENTORY_COUNT FROM LOT_INVENTORY
											WHERE
												LOCATION_CD = STR_INOUTLOCATION
												AND ITEM_CD = STR_INOUTITEM
												AND LOT_NO  = STR_INOUTLOT)
							WHERE
								ITEM_CD = STR_INOUTITEM
							;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;
		--更新件数表示
		DBMS_OUTPUT.PUT_LINE('更新した件数は' || SQL%ROWCOUNT || '件');
--エラー時
<<P_END>>
		NULL;
	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('在庫更新');
		STR_ERRORCODE :='SQL コード = ' || sqlcode ;
		STR_ERRORNAME := 'エラー内容 = ' || sqlerrm(sqlcode);
		DBMS_OUTPUT.PUT_LINE(STR_ERRORCODE || ' : ' || STR_ERRORNAME);
		--エラーフラグ
		LNG_SYORIF := 9;
		-- ROLLBACK TOTTA;
	END;

--■■■■■■■■■
--■　受払履歴更新
--■■■■■■■■■
	PROCEDURE UPDATE_INOUT_RECORD_CTL
	IS
		--■■■■■■
		--■　変　数
		--■■■■■■
		STR_URNO_LOCAL VARCHAR2(255) := '';
		LNG_FLG_LOCAL NUMBER := 0;
		STR_LOCATION_LOCAL VARCHAR2(255) := '';
	BEGIN
		--受払履歴NO取得
		SELECT FUN_GET_SEQ('INOUT_RECORD') INTO STR_URNO_LOCAL FROM DUAL;
		--入出庫区分(0:正更新処理, 1:逆更新処理)
		IF LNG_INOUTKBN = 0 THEN
			LNG_FLG_LOCAL := 1;
		ELSE
			LNG_FLG_LOCAL := -1;
		END IF;
		--登録処理(INSERTのみ)
		INSERT INTO INOUT_RECORD
		(
			INOUT_NO
			,INOUT_DIVISION
			,ODER_NO
			,ODER_LINE_NO
			,ITEM_CD
			,LOCATION_CD
			,LOT_NO
			,INOUT_QTY
			,INOUT_PRICE
			,INOUT_COST
			,INOUT_DATE
			,REMARK
			,INOUT_SOURCE_NO
			,SECTION_CD
			,ACCOUNTS_CD
			,ACCOUNTS_SUB_CD
			,ITEM_CATEGORY
			,PARENT_ITEM_CD
			,PARENT_ACCOUNTS_CD
			,PARENT_ACCOUNT_SUB_CD
			,PARENT_ITEM_CATEGORY
			,REASON
			,FUNC_DIVISION
			,RY_CD
--			,INOUT_UPDATE_DATE
--			,INVENTORY_UPDATE_DATE
			,INPUT_DATE
			,INPUTOR_CD
				,UPDATE_DATE
				,UPDATOR_CD
		)
		VALUES
		(
			STR_URNO_LOCAL		--受払履歴番号
			,LNG_INOUTDIVISION	--受払区分(1:製造受入,2:製造払出,3:入荷受入,4:出荷払出,5:支給払出)
			,STR_ODERNO		--オーダー番号
			,LNG_ODERLINENO		--オーダー行番号
			,STR_ITEMCODE		--品目コード
			,STR_LOCATIONCODE	--ロケーション番号
			,STR_LOTCODE		--ロット番号
			,LNG_QTY * LNG_FLG_LOCAL--数量
--			,LNG_QTY		--数量
			,LNG_INOUTPRICE		--単価
			,LNG_INOUTCOST		--金額
			,DTE_INOUTDATE		--日付
			,STR_REMARK		--摘要
			,STR_INOUTSOURCENO	--ソース番号
			,STR_SECTIONCD		--入力者部門
			,STR_ACCOUNTCD		--科目コード
			,STR_SUBACCOUNTCD	--補助科目コード
			,STR_ITEMCATEGORY	--品目分類
			,STR_PARENTITEMCD	--親品目コード
			,STR_PARENTACCOUNTCD	--親科目コード
			,STR_PARENTSUBACCOUNTCD	--親補助科目コード
			,STR_PARENTITEMCATEGORY	--親品目分類コード
			,STR_REASON		--理由
			,LNG_FUNCDIVISION       --処理区分
			,STR_RYCD
--			,DTE_INOUTUPDATEDATE	--受払更新日付
--			,DTE_INVENTORYUPDATEDATE--在庫更新日付
			,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
			,STR_INPUTNO		--更新日付
			,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
			,STR_INPUTNO		--更新日付
		)
		;
	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('受払履歴更新');
		STR_ERRORCODE :='SQL コード = ' || sqlcode ;
		STR_ERRORNAME := 'エラー内容 = ' || sqlerrm(sqlcode);
		DBMS_OUTPUT.PUT_LINE(STR_ERRORCODE || ' : ' || STR_ERRORNAME);
		--エラーフラグ
		LNG_SYORIF := 9;
		-- ROLLBACK TOTTA;
	END;

--■■■■■■■■■■
--■　受払ソース更新
--■■■■■■■■■■
	PROCEDURE UPDATE_INOUT_SOURCE_CTL
	IS
		--■■■■■■
		--■　変　数
		--■■■■■■
		STR_USNO_LOCAL VARCHAR2(255):='';
		LNG_FLG_LOCAL NUMBER := 0;
		LNG_FLG_ASSIGN NUMBER;--add yoshida 2008/06/02
		STR_LOTNO NVARCHAR2(20);
		STR_LOCATION  NVARCHAR2(20);
		LNG_FLG_OVER NUMBER := 0;
		LNG_INOUTQTY NUMBER := 0;
		STR_INOUTITEM VARCHAR2(100);
	BEGIN
		CASE LNG_OPNO
			WHEN 101
				THEN LNG_FLG_LOCAL := -1;
			WHEN 104
				THEN LNG_FLG_LOCAL := -1;
			WHEN 106
				THEN LNG_FLG_LOCAL := -1;
			WHEN 102
				THEN LNG_FLG_LOCAL := -1;
			WHEN 103
				THEN LNG_FLG_LOCAL := 1;
			WHEN 105
				THEN LNG_FLG_LOCAL := 1;
			WHEN 107
				THEN LNG_FLG_LOCAL := 1;
			WHEN 108
				THEN LNG_FLG_LOCAL := 1;
			WHEN 109
				THEN LNG_FLG_LOCAL := 1;
			WHEN 110
				THEN LNG_FLG_LOCAL := 1;
			ELSE
				IF LNG_INOUTKBN = 0 THEN
					LNG_FLG_LOCAL := 1;
				ELSE
					LNG_FLG_LOCAL := -1;
				END IF;
		END CASE;
		--引当済みフラグを格納
		IF (LNG_OPNO = 7 OR LNG_OPNO = 3 OR LNG_OPNO = 4 OR LNG_OPNO = 1) AND LNG_QTY <=0 THEN
			LNG_FLG_ASSIGN:=0;
			IF LNG_INOUTKBN = 0 THEN
				LNG_FLG_LOCAL := -1;
			ELSE
				LNG_FLG_LOCAL := 1;
			END IF;
		ELSE 
			IF LNG_OPNO=1 or LNG_OPNO = 2 or LNG_OPNO=3 or LNG_OPNO=4 or LNG_OPNO = 6 Or  LNG_OPNO = 7 or LNG_OPNO=8 or LNG_OPNO = 41 or LNG_OPNO = 42 OR LNG_OPNO = 99 OR LNG_OPNO = 98 THEN
				--出荷：1指示入力時、製造：3確定(入庫)、製造：4確定(出庫)、発注：7納期回答入力時 8受入入力時
				LNG_FLG_ASSIGN:=1;
			ELSE
				LNG_FLG_ASSIGN:=0;
			END IF;
		END IF;
		--受払ソース番号取得
		STR_INOUTSOURCENO := FUN_GET_INOUT_SOURCE_NO(STR_ODERNO,LNG_ODERLINENO) ;
		LNG_INOUTQTY := FUN_GET_INOUT_QTY3(STR_ODERNO,LNG_ODERLINENO);
		STR_INOUTITEM := FUN_GET_INOUT_ITEM(STR_ODERNO,LNG_ODERLINENO);
		--
		STR_LOTNO := STR_LOTCODE;
		STR_LOCATION := STR_LOCATIONCODE;
		IF LNG_OPNO > 100 Or LNG_OPNO = 3  Or LNG_OPNO = 41 Or LNG_OPNO = 42 Or LNG_OPNO = 7 Or LNG_OPNO = 8 Or LNG_OPNO = 11 OR LNG_OPNO = 6 THEN
			STR_LOTNO := '';
			STR_LOCATION := '';
		END IF;
		IF STR_INOUTSOURCENO = '' or STR_INOUTSOURCENO is NULL THEN
			IF LNG_OPNO = 2 OR LNG_OPNO = 6 OR LNG_OPNO = 8 OR LNG_OPNO = 41 OR LNG_OPNO = 42 THEN
				NULL;
			ELSE
				--受払ソースNO取得
				SELECT FUN_GET_SEQ('INOUT_SOURCE') INTO STR_USNO_LOCAL FROM DUAL;
				--共通変数へ
				STR_INOUTSOURCENO := STR_USNO_LOCAL;
				IF LNG_QTY * LNG_FLG_LOCAL * LNG_FLG_LOCAL < 0 THEN 
					LNG_FLG_OVER := 1;
				ELSE
					LNG_FLG_OVER := 0;
				END IF;
				
				--
				INSERT INTO INOUT_SOURCE
				(
					INOUT_SOURCE_NO
					,INOUT_DIVISION
					,ODER_NO
					,ODER_LINE_NO
					,ITEM_CD
					,LOCATION_CD
					,LOT_NO
					,INOUT_QTY
					,INOUT_DATE
					,INPUT_DATE
					,INPUTOR_CD
					,UPDATE_DATE
					,UPDATOR_CD
					,ASSIGN_FLAG
					,OVER_FLG
				)
				VALUES
				(
					STR_USNO_LOCAL		--受払ソース番号
					,LNG_INOUTDIVISION	--処理区分
					,STR_ODERNO		--伝票番号
					,LNG_ODERLINENO		--伝票行番号
					,STR_ITEMCODE		--品目コード
					,STR_LOCATION	--ロケーションコード
					,STR_LOTNO		--ロットコード
					,LNG_QTY * LNG_FLG_LOCAL--数量
--					,LNG_QTY		--数量
					,TO_DATE(DTE_INOUTDATE,CSTR_DATEFORMAT)
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
					,STR_INPUTNO
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
					,STR_INPUTNO
					,LNG_FLG_ASSIGN
					,LNG_FLG_OVER
				)
				;
			END IF;
			LNG_SYORIF := 0;
		ELSE
			IF ( (LNG_OPNO = 101 or LNG_OPNO = 103 or LNG_OPNO = 104 or LNG_OPNO = 105
                                  or LNG_OPNO = 106 or LNG_OPNO = 107 or LNG_OPNO = 109 or LNG_OPNO = 110 OR LNG_OPNO = 99 OR LNG_OPNO = 98 OR LNG_OPNO = 1) and LNG_INOUTSOURCEDELFLG = 1) THEN

				DELETE FROM INOUT_SOURCE
				WHERE
					INOUT_SOURCE_NO = STR_INOUTSOURCENO
				;
				LNG_SYORIF := 0;
			ELSE
				IF LNG_OPNO = 2 OR LNG_OPNO = 41 OR LNG_OPNO = 42 OR LNG_OPNO = 8 OR LNG_OPNO = 6 THEN
				   IF STR_INOUTITEM = STR_ITEMCODE THEN
					IF (LNG_INOUTQTY - LNG_QTY * LNG_FLG_LOCAL) * LNG_FLG_LOCAL < 0 THEN 
						LNG_FLG_OVER := 1;
					ELSE
						LNG_FLG_OVER := 0;
					END IF;
					UPDATE INOUT_SOURCE SET
						LOCATION_CD = STR_LOCATION
						,LOT_NO = STR_LOTNO
						,INOUT_QTY = (INOUT_QTY - LNG_QTY * LNG_FLG_LOCAL)
						,INOUT_DATE = TO_DATE(DTE_INOUTDATE,CSTR_DATEFORMAT)
						,UPDATE_DATE = TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
						,UPDATOR_CD = STR_INPUTNO
						,ASSIGN_FLAG = LNG_FLG_ASSIGN
						,OVER_FLG = LNG_FLG_OVER
					WHERE
						INOUT_SOURCE_NO = STR_INOUTSOURCENO
					;
				    END IF;
				ELSE
					IF ( LNG_QTY * LNG_FLG_LOCAL) * LNG_FLG_LOCAL < 0 THEN 
						LNG_FLG_OVER := 1;
					ELSE
						LNG_FLG_OVER := 0;
					END IF;
					UPDATE INOUT_SOURCE SET
						LOCATION_CD = STR_LOCATION
						,LOT_NO = STR_LOTNO
						,INOUT_QTY = LNG_QTY * LNG_FLG_LOCAL
						,INOUT_DATE = TO_DATE(DTE_INOUTDATE,CSTR_DATEFORMAT)
						,UPDATE_DATE = TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
						,UPDATOR_CD = STR_INPUTNO
						,ASSIGN_FLAG = LNG_FLG_ASSIGN
						,OVER_FLG = LNG_FLG_OVER
					WHERE
						INOUT_SOURCE_NO = STR_INOUTSOURCENO
					;
				END IF;
				LNG_SYORIF := 0;
			END IF;
		END IF;

	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('受払ソース更新');
		STR_ERRORCODE :='<受払ソース更新>SQL コード = ' || sqlcode ;
		STR_ERRORNAME := 'エラー内容 = ' || sqlerrm(sqlcode);
		DBMS_OUTPUT.PUT_LINE(STR_ERRORCODE || ' : ' || STR_ERRORNAME);
		--エラーフラグ
		LNG_SYORIF := 9;
		-- ROLLBACK TOTTA;
	END;
--■■■■■■■■■■
--■　受払ソース更新
--■■■■■■■■■■
	PROCEDURE UPDATE_INOUT_SOURCE_CTL11
	IS
		--■■■■■■
		--■　変　数
		--■■■■■■
		STR_USNO_LOCAL VARCHAR2(255):='';
		LNG_FLG_LOCAL NUMBER := 0;
		LNG_FLG_ASSIGN NUMBER;--add yoshida 2008/06/02
	BEGIN

		--受払ソース番号取得
		SELECT FUN_GET_INOUT_SOURCE_NO(STR_ODERNO,LNG_ODERLINENO) INTO STR_INOUTSOURCENO FROM DUAL;
		--
		IF STR_INOUTSOURCENO = '' or STR_INOUTSOURCENO is NULL THEN
			null;
			LNG_SYORIF := 0;
		ELSE
			SELECT ASSIGN_FLAG INTO LNG_FLG_ASSIGN FROM INOUT_SOURCE WHERE INOUT_SOURCE_NO = STR_INOUTSOURCENO;
			UPDATE INOUT_SOURCE SET
					INOUT_QTY = 0
					,UPDATE_DATE = TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
					,UPDATOR_CD = STR_INPUTNO
					,ASSIGN_FLAG = 1
					,OVER_FLG = 0
				WHERE
					INOUT_SOURCE_NO = STR_INOUTSOURCENO
				;
			LNG_SYORIF := 0;
		END IF;

	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('受払ソース更新11');
		STR_ERRORCODE :='<受払ソース更新11>SQL コード = ' || sqlcode ;
		STR_ERRORNAME := 'エラー内容 = ' || sqlerrm(sqlcode);
		DBMS_OUTPUT.PUT_LINE(STR_ERRORCODE || ' : ' || STR_ERRORNAME);
		--エラーフラグ
		LNG_SYORIF := 9;
		-- ROLLBACK TOTTA;
	END;

--■■■■■■■■■■
--■　受払ソース更新
--■■■■■■■■■■
	PROCEDURE UPDATE_INOUT_SOURCE_CTL99
	IS
		--■■■■■■
		--■　変　数
		--■■■■■■
		STR_USNO_LOCAL VARCHAR2(255):='';
		LNG_FLG_LOCAL NUMBER := 0;
		LNG_FLG_ASSIGN NUMBER;--add yoshida 2008/06/02
		STR_LOTNO NVARCHAR2(20);
		STR_LOCATION  NVARCHAR2(20);
		LNG_FLG_OVER NUMBER := 0;
		LNG_INOUTQTY NUMBER := 0;
	BEGIN
		IF STR_SLIPNO IS NULL OR STR_SLIPNO = '' THEN 
			GOTO P_END ;
		END IF;
		IF LNG_SLIPLINENO IS NULL THEN 
			GOTO P_END ;
		END IF;

		--受払ソース番号取得
		SELECT FUN_GET_INOUT_SOURCE_NO(STR_SLIPNO,LNG_SLIPLINENO) INTO STR_INOUTSOURCENO FROM DUAL;
		LNG_INOUTQTY := FUN_GET_INOUT_QTY3(STR_ODERNO,LNG_ODERLINENO);
		--
		IF STR_INOUTSOURCENO = '' or STR_INOUTSOURCENO is NULL THEN
			IF LNG_QTY < 0  THEN
				IF LNG_OPNO = 1 THEN 
					LNG_FLG_ASSIGN := 0;
					STR_LOTNO := null;
					STR_LOCATION := null;
				ELSE
					LNG_FLG_ASSIGN := 1;
					STR_LOTNO := null;
					STR_LOCATION := null;
				END IF;
				--受払ソースNO取得
				SELECT FUN_GET_SEQ('INOUT_SOURCE') INTO STR_USNO_LOCAL FROM DUAL;
				--共通変数へ
				STR_INOUTSOURCENO := STR_USNO_LOCAL;
				--
				IF LNG_QTY  < 0 THEN 
					LNG_FLG_OVER := 1;
				ELSE
					LNG_FLG_OVER := 0;
				END IF;
				INSERT INTO INOUT_SOURCE
				(
				INOUT_SOURCE_NO
				,INOUT_DIVISION
				,ODER_NO
				,ODER_LINE_NO
				,ITEM_CD
				,LOCATION_CD
				,LOT_NO
				,INOUT_QTY
				,INOUT_DATE
				,INPUT_DATE
				,INPUTOR_CD
				,UPDATE_DATE
				,UPDATOR_CD
				,ASSIGN_FLAG
				,OVER_FLG
				)
				VALUES
				(
				STR_USNO_LOCAL		--受払ソース番号
				,LNG_INOUTDIVISION	--処理区分
				,STR_SLIPNO		--伝票番号
				,LNG_SLIPLINENO		--伝票行番号
				,STR_ITEMCODE		--品目コード
				,null	--ロケーションコード
				,null		--ロットコード
				,LNG_QTY  --数量
--				,LNG_QTY		--数量
				,TO_DATE(DTE_INOUTDATE,CSTR_DATEFORMAT)
				,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
				,STR_INPUTNO
				,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
				,STR_INPUTNO
				,LNG_FLG_ASSIGN
				,LNG_FLG_OVER

				)
				;
				
			END IF;
			LNG_SYORIF := 0;
		ELSE
			IF LNG_OPNO = 98 THEN
				LNG_FLG_LOCAL := FUN_GET_INOUT_QTY2(STR_SLIPNO,LNG_SLIPLINENO);
				IF LNG_QTY > 0 THEN
					IF LNG_QTY + LNG_FLG_LOCAL < 0 THEN
						LNG_FLG_LOCAL := LNG_QTY;
					ELSE
						LNG_FLG_LOCAL := - LNG_FLG_LOCAL;
					END IF;
				ELSE
					IF LNG_FLG_LOCAL < 0 THEN
						LNG_FLG_LOCAL := LNG_QTY;
					ELSE
						IF LNG_QTY + LNG_FLG_LOCAL > 0 THEN
							LNG_FLG_LOCAL := 0;
						ELSE
							LNG_FLG_LOCAL := LNG_QTY + LNG_FLG_LOCAL;
						END IF;
					END IF;
				END IF;
				UPDATE ITEM_INVENTORY SET SALES_ASSIGN_QTY = NVL(SALES_ASSIGN_QTY,0) + LNG_FLG_LOCAL
				WHERE ITEM_CD = STR_ITEMCODE;
				
				LNG_FLG_ASSIGN := 1;
			ELSE
				IF LNG_QTY > 0 THEN 
					LNG_FLG_ASSIGN := 1;
				ELSE
					LNG_FLG_ASSIGN := 0;
				END IF;
			END IF;
			IF (LNG_INOUTQTY + LNG_QTY) < 0 THEN 
				LNG_FLG_OVER := 1;
			ELSE
				LNG_FLG_OVER := 0;
			END IF;
			UPDATE INOUT_SOURCE SET
					INOUT_QTY = (INOUT_QTY + LNG_QTY)
					,UPDATE_DATE = TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)　--登録日付
					,UPDATOR_CD = STR_INPUTNO
					,ASSIGN_FLAG = LNG_FLG_ASSIGN
					,OVER_FLG = LNG_FLG_OVER
				WHERE
					INOUT_SOURCE_NO = STR_INOUTSOURCENO
				;
			LNG_SYORIF := 0;
		END IF;
<<P_END>>
		null;
	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('受払ソース更新99');
		STR_ERRORCODE :='<受払ソース更新99>SQL コード = ' || sqlcode ;
		STR_ERRORNAME := 'エラー内容 = ' || sqlerrm(sqlcode);
		DBMS_OUTPUT.PUT_LINE(STR_ERRORCODE || ' : ' || STR_ERRORNAME);
		--エラーフラグ
		LNG_SYORIF := 9;
		-- ROLLBACK TOTTA;
	END;

--■■■■■■■■■■■■
--■　ロットトレース更新
--■■■■■■■■■■■■
	PROCEDURE UPDATE_LOTTRACE
	IS
		--■■■■■■
		--■　変　数
		--■■■■■■
		LNG_RC_LOCAL NUMBER := 0;
		STR_NO_LOCAL VARCHAR2(255) := '';
		STR_SLIPNO_LOCAL VARCHAR2(255) := '';
		STR_ORDERNO_LOCAL VARCHAR2(255) := '';
		LNG_FLG_LOCAL NUMBER := 0;
	BEGIN
		--入出庫区分(0:正更新処理, 1:逆更新処理)
		IF LNG_INOUTKBN = 0 THEN
			LNG_FLG_LOCAL := 1;
		ELSE
			LNG_FLG_LOCAL := -1;
		END IF;
		--伝票番号が入っていない場合
		IF STR_SLIPNO = '' OR STR_SLIPNO IS NULL THEN
			--在庫SEQ取得
			SELECT FUN_GET_SEQ('ZAIKO') INTO STR_NO_LOCAL FROM DUAL;
			--伝票番号と主オーダー番号をセット
			STR_SLIPNO_LOCAL := STR_NO_LOCAL;
		ELSE
			STR_SLIPNO_LOCAL := STR_SLIPNO;
		END IF;
		--オーダー番号が入っていない場合
		IF STR_ODERNO = '' OR STR_ODERNO IS NULL THEN
			STR_ORDERNO_LOCAL := STR_NO_LOCAL;
		ELSE
			STR_ORDERNO_LOCAL := STR_ODERNO;
		END IF;
		--ロットトレース削除フラグ(0以外:削除)
		IF LNG_LOTTRACEDELFLG = 0 THEN
			--登録処理
			INSERT INTO LOT_TRACE
			(
				LOCATION_CD
				,ITEM_CD
				,LOT_NO
				,EVENT_DATE
				,IO_DIVISION
				,FUNC_DIVISION
				,IO_QTY
				,SLIP_NO
				,SLIP_LINE_NO
--				,ORDER_DIVISION
				,ORDER_NO
--				,LAST_IN_DIVISION
--				,LAST_IN_NO
				,INPUT_DATE
				,INPUTOR_CD
				,UPDATE_DATE
				,UPDATOR_CD
			)
			VALUES
				(
				STR_LOCATIONCODE	--ロケーションコード
				,STR_ITEMCODE		--品目コード
				,STR_LOTCODE		--ロットコード
				,DTE_INOUTDATE		--入出庫日
				,LNG_INOUTKBN		--入出庫区分(0:正更新処理, 1:逆更新処理)
				,LNG_FUNCDIVISION	--処理区分
				,LNG_QTY * LNG_FLG_LOCAL--数量
--				,LNG_QTY		--数量
				,STR_SLIPNO_LOCAL	--伝票番号（自動採番の場合あり）
				,LNG_SLIPLINENO		--伝票行番号
--				,LNG_ORDERDIVISION	--主オーダー区分
--				,STR_ODERNO		--オーダー番号(暫定版）
				,STR_ORDERNO_LOCAL	--主オーダー番号（自動採番の場合あり）
--				,LNG_LASTINDIVISION	--出庫元在庫入庫区分
--				,STR_LASTINNO		--出庫元在庫入庫番号
				,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
				,STR_INPUTNO				--更新日付
				,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
				,STR_INPUTNO				--更新日付
				)
			;
		ELSE
			--削除処理
			DELETE FROM LOT_TRACE
			WHERE
				LOCATION_CD        = STR_LOCATIONCODE
				AND ITEM_CD        = STR_ITEMCODE
				AND LOT_NO         = STR_LOTCODE
				AND EVENT_DATE     = DTE_INOUTDATE
				AND IO_DIVISION    = LNG_INOUTKBN
				AND FUNC_DIVISION  = LNG_FUNCDIVISION
--				AND SLIP_NO        = STR_SLIPNO
--				AND SLIP_LINE_NO   = LNG_SLIPLINENO
--				AND ORDER_DIVISION = LNG_ORDERDIVISION
--				AND ORDER_NO       = STR_ORDERNO
			;
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
		--
		DBMS_OUTPUT.PUT_LINE('ロットトレース更新');
		STR_ERRORCODE :='SQL コード = ' || sqlcode ;
		STR_ERRORNAME := 'エラー内容 = ' || sqlerrm(sqlcode);
		DBMS_OUTPUT.PUT_LINE(STR_ERRORCODE || ' : ' || STR_ERRORNAME);
		--エラーフラグ
		LNG_SYORIF := 9;
		-- ROLLBACK TOTTA;
	END;

--■■■■■■■■■■■■■■■
--■　在庫テーブル存在チェック
--■■■■■■■■■■■■■■■
	PROCEDURE INVENTORYTABLE_CHK
	IS
		--■■■■■■
		--■　変　数
		--■■■■■■
		LNG_RC_LOCAL NUMBER := 0;
		KKK VARCHAR2(255);
	BEGIN
		IF FUN_GET_ITEM_STOCK_DIVISION(STR_ITEMCODE) = 3 THEN
			NULL;
		ELSE
		--ロット時刻
		--DTE_ISSUE_DATE:= TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT);
		--ロットが入っていない場合処理しない 2008.04.02 Edit Kitada
		IF TRIM(STR_LOTCODE) = '' OR STR_LOTCODE IS NULL OR STR_LOCATIONCODE = '' OR STR_LOCATIONCODE IS NULL THEN
			--品目在庫チェック
			SELECT COUNT(*) INTO LNG_RC_LOCAL FROM ITEM_INVENTORY
			WHERE
				ITEM_CD = STR_ITEMCODE
			;
			--
			IF LNG_RC_LOCAL = 0 THEN
				INSERT INTO ITEM_INVENTORY
					(
					ITEM_CD
					,PARENT_ITEM_CD
					,INPUT_DATE
					,INPUTOR_CD
					,UPDATE_DATE
					,UPDATOR_CD
					)
				VALUES
					(
					STR_ITEMCODE
					,(SELECT FUN_GET_ITEM_PARENT_ITEM_CD(STR_ITEMCODE) FROM DUAL)
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
					,STR_INPUTNO				--更新日付
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
					,STR_INPUTNO				--更新日付
					)
				;
			END IF;
		ELSE
			--ロット在庫チェック
			SELECT COUNT(*) INTO LNG_RC_LOCAL FROM LOT_INVENTORY
			WHERE
				LOCATION_CD = STR_LOCATIONCODE
				AND ITEM_CD = STR_ITEMCODE
				AND LOT_NO  = STR_LOTCODE
			;
			--
			IF LNG_RC_LOCAL = 0 THEN
				INSERT INTO LOT_INVENTORY
					(
					LOCATION_CD
					,ITEM_CD
					,LOT_NO
					,PARENT_ITEM_CD
					,ISSUE_DATE
/* 賞味期限追加 add by fujimoto 20080826 */
					,START_DATE
					,END_DATE
/* 賞味期限追加 */
					,INPUT_DATE
					,INPUTOR_CD
					,UPDATE_DATE
					,UPDATOR_CD
					)
				VALUES
					(
					STR_LOCATIONCODE
					,STR_ITEMCODE
					,STR_LOTCODE
					,(SELECT FUN_GET_ITEM_PARENT_ITEM_CD(STR_ITEMCODE) FROM DUAL)
					,TO_DATE(DTE_LOTMAKEDATE,CSTR_FULLDATEFORMAT)
/* 賞味期限追加 add by fujimoto 20080826 */
					,TO_DATE(DTE_LOTMAKEDATE,CSTR_DATEFORMAT)
					,TO_DATE((SELECT FUN_ITEM_EXPIRE_MONTHS(STR_ITEMCODE, DTE_ISSUE_DATE ) FROM DUAL),CSTR_DATEFORMAT)
/* 賞味期限追加 */
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
					,STR_INPUTNO				--更新日付
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
					,STR_INPUTNO				--更新日付
					)
				;
			END IF;
			--ロケーション在庫チェック
			SELECT COUNT(*) INTO LNG_RC_LOCAL FROM LOCATION_INVENTORY
			WHERE
				LOCATION_CD = STR_LOCATIONCODE
				AND ITEM_CD = STR_ITEMCODE
			;
			--
			IF LNG_RC_LOCAL = 0 THEN
				INSERT INTO LOCATION_INVENTORY
					(
					LOCATION_CD
					,ITEM_CD
					,PARENT_ITEM_CD
					,INPUT_DATE
					,INPUTOR_CD
					,UPDATE_DATE
					,UPDATOR_CD
					)
				VALUES
					(
					STR_LOCATIONCODE
					,STR_ITEMCODE
					,(SELECT FUN_GET_ITEM_PARENT_ITEM_CD(STR_ITEMCODE) FROM DUAL)
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
					,STR_INPUTNO				--更新日付
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
					,STR_INPUTNO				--更新日付
					)
				;
			END IF;
			--品目在庫チェック
			SELECT COUNT(*) INTO LNG_RC_LOCAL FROM ITEM_INVENTORY
			WHERE
				ITEM_CD = STR_ITEMCODE
			;
			--
			IF LNG_RC_LOCAL = 0 THEN
				INSERT INTO ITEM_INVENTORY
					(
					ITEM_CD
					,PARENT_ITEM_CD
					,INPUT_DATE
					,INPUTOR_CD
					,UPDATE_DATE
					,UPDATOR_CD
					)
				VALUES
					(
					STR_ITEMCODE
					,(SELECT FUN_GET_ITEM_PARENT_ITEM_CD(STR_ITEMCODE) FROM DUAL)
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
					,STR_INPUTNO				--更新日付
					,TO_DATE(STR_DATE,CSTR_FULLDATEFORMAT)	--登録日付
					,STR_INPUTNO				--更新日付
					)
				;
			END IF;
		END IF;
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ロット在庫確認');
		STR_ERRORCODE :='SQL コード = ' || sqlcode ;
		STR_ERRORNAME := 'エラー内容 = ' || sqlerrm(sqlcode);
		DBMS_OUTPUT.PUT_LINE(STR_ERRORCODE || ' : ' || STR_ERRORNAME);
		--エラーフラグ
		LNG_SYORIF := 9;
		-- ROLLBACK TOTTA;
	END;

--■■■■■■■■■
--■　科目等セット
--■■■■■■■■■
	PROCEDURE ACCOUNT_ETC_SET IS
		LNG_RC_LOCAL NUMBER := 0;
		STR_PARENT_ITEM_CD VARCHAR2(255) := '';
		STR_KO_ITEM_CATEGORY VARCHAR2(255) := '';
		STR_KO_ACCOUNT_CD VARCHAR2(255) := '';
		STR_OY_ITEM_CATEGORY VARCHAR2(255) := '';
		STR_OY_ACCOUNT_CD VARCHAR2(255) := '';
	BEGIN
		--
		SELECT COUNT(*) INTO LNG_RC_LOCAL FROM ITEM
		WHERE
			ITEM_CD = STR_ITEMCODE
		;
		IF LNG_RC_LOCAL = 0 THEN
			NULL;
		ELSE
			--子供品目分類
			SELECT FUN_GET_ITEM_ITEM_CATEGORY(STR_ITEMCODE) INTO STR_KO_ITEM_CATEGORY FROM DUAL;
			--子供科目コード
			SELECT FUN_GET_ACCOUNT_CD(STR_ITEMCODE) INTO STR_KO_ACCOUNT_CD FROM DUAL;
			--親品目コード
			SELECT FUN_GET_ITEM_PARENT_ITEM_CD(STR_ITEMCODE) INTO STR_PARENT_ITEM_CD FROM DUAL;
			--親品目分類
			SELECT FUN_GET_ITEM_ITEM_CATEGORY(STR_PARENT_ITEM_CD) INTO STR_OY_ITEM_CATEGORY FROM DUAL;
			--親科目コード
			SELECT FUN_GET_ACCOUNT_CD(STR_PARENT_ITEM_CD) INTO STR_OY_ACCOUNT_CD FROM DUAL;
		END IF;
		--
		STR_ACCOUNTCD := STR_KO_ACCOUNT_CD;		--科目コード
		STR_SUBACCOUNTCD := '';				--補助科目コード
		STR_ITEMCATEGORY := STR_KO_ITEM_CATEGORY;	--品目分類コード
		STR_PARENTITEMCD := STR_PARENT_ITEM_CD;		--親品目コード
		STR_PARENTACCOUNTCD := STR_OY_ACCOUNT_CD;	--親科目コード
		STR_PARENTSUBACCOUNTCD := '';			--親補助科目コード
		STR_PARENTITEMCATEGORY := STR_OY_ITEM_CATEGORY;	--親品目分類コード
	END;

-- 2008.02.09 Add Start Kitada
	PROCEDURE PRO_LOCATION_ZAIKO_MAKE(PARA_STR_LOCATION IN VARCHAR2
					,PARA_STR_ITEM IN VARCHAR2
					,PARA_STR_LOT IN VARCHAR2
					,PARA_LNG_QTY IN NUMBER) IS
		LNG_MAX NUMBER := 0;
		LNG_RC  NUMBER := 0;
		LNG_C   NUMBER := 0;
		STR_UP_LOCA VARCHAR2(255) :='';
		STR_WORK VARCHAR2(255) :='';
		LNG_START NUMBER := 0;
	BEGIN
		--下位ロケーション存在チェック
		SELECT COUNT(*) INTO LNG_RC FROM LOCATION
		WHERE
			UPPER_LOCATION_CD = PARA_STR_LOCATION
		;
		IF LNG_RC <> 0 THEN
			NULL;
		ELSE
			--ロケーションレベル,親ロケーションを取得
			SELECT LOCATION_LEVEL,UPPER_LOCATION_CD INTO LNG_MAX,STR_UP_LOCA FROM LOCATION
			WHERE
				LOCATION_CD = PARA_STR_LOCATION
			;
			LNG_MAX := LNG_MAX - 1;
			STR_WORK := PARA_STR_LOCATION;	--検索用
			--
			LNG_C := LNG_MAX;
			FOR LNG_C IN 1..LNG_MAX LOOP
				--ロケーションレベル,親ロケーションを取得
				SELECT UPPER_LOCATION_CD INTO STR_UP_LOCA FROM LOCATION
				WHERE
					LOCATION_CD = STR_WORK
				;
				IF STR_UP_LOCA IS NULL OR TRIM(STR_UP_LOCA) = '' THEN
					NULL;
				ELSE
					--
					SELECT COUNT(*) INTO LNG_RC FROM LOCATION_INVENTORY
					WHERE
						LOCATION_CD = STR_UP_LOCA
						AND ITEM_CD = PARA_STR_ITEM
					;
					IF LNG_RC = 0 THEN
						INSERT INTO LOCATION_INVENTORY
						(
							LOCATION_CD
							,ITEM_CD
							,PARENT_ITEM_CD
							,INVENTORY_QTY
							,BACKORDER_QTY
							,ASSIGN_QTY
							,SALES_ASSIGN_QTY
							,INSPECTION_QTY
							,INVALID_QTY
							,FAULT_QTY
							,INVENTORY_COST
							,LAST_IN_DATE
							,LAST_OUT_DATE
							,LAST_INVENTORY_DATE
							,LAST_INVENTORY_QTY
							,LAST_INVENTORY_COST
							,NEW_INVENTORY_QTY
							,LM_INVENTORY_QTY
							,LM_INVENTORY_COST
							,INPUT_DATE
							,INPUTOR_CD
							,UPDATE_DATE
							,UPDATOR_CD
						)
						VALUES
						(
							STR_UP_LOCA
							,PARA_STR_ITEM
							,(SELECT PARENT_ITEM_CD FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT INVENTORY_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT BACKORDER_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT ASSIGN_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT SALES_ASSIGN_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT INSPECTION_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT INVALID_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT FAULT_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT INVENTORY_COST FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT LAST_IN_DATE FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT LAST_OUT_DATE FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT LAST_INVENTORY_DATE FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT LAST_INVENTORY_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT LAST_INVENTORY_COST FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT NEW_INVENTORY_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT LM_INVENTORY_QTY FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT LM_INVENTORY_COST FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT INPUT_DATE FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT INPUTOR_CD FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT UPDATE_DATE FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
							,(SELECT UPDATOR_CD FROM LOCATION_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM)
						)
						;
					ELSE
						UPDATE LOCATION_INVENTORY SET
							INVENTORY_QTY = INVENTORY_QTY
									+ (SELECT INVENTORY_QTY FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
									- LNG_INVENTORY_QTY
							,BACKORDER_QTY = BACKORDER_QTY
									+ (SELECT BACKORDER_QTY FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
									- LNG_BACKORDER_QTY
							,ASSIGN_QTY = ASSIGN_QTY
									+ (SELECT ASSIGN_QTY FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
									- LNG_ASSIGN_QTY
							,SALES_ASSIGN_QTY = SALES_ASSIGN_QTY
									+ (SELECT SALES_ASSIGN_QTY FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
									- LNG_SALES_ASSIGN_QTY
							,INSPECTION_QTY = INSPECTION_QTY
									+ (SELECT INSPECTION_QTY FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
									- LNG_INSPECTION_QTY
							,INVALID_QTY = INVALID_QTY
									+ (SELECT INVALID_QTY FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
									- LNG_INVALID_QTY
							,FAULT_QTY = FAULT_QTY
									+ (SELECT FAULT_QTY FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
									- LNG_FAULT_QTY
							,UPDATE_DATE = (SELECT UPDATE_DATE FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
							,UPDATOR_CD = (SELECT UPDATOR_CD FROM LOT_INVENTORY WHERE LOCATION_CD = PARA_STR_LOCATION AND ITEM_CD = PARA_STR_ITEM AND LOT_NO = PARA_STR_LOT)
						WHERE
							LOCATION_CD = STR_UP_LOCA
							AND ITEM_CD = PARA_STR_ITEM
						;
					END IF;
					--
					STR_WORK := STR_UP_LOCA;			--検索用
				END IF;
			END LOOP;
		END IF;
	END;
-- 2008.02.09 Add End Kitada
FUNCTION FUN_GET_LOTMAKEDATE(ITEMCD VARCHAR2,LOTNO VARCHAR2,SETDATE date) RETURN DATE IS
	CT NUMBER;
	DT Date;
	suDt date;
	BEGIN 
		SELECT count(*) INTO CT FROM LOT_INVENTORY WHERE ITEM_CD = ITEMCD AND LOT_NO = LOTNO  ;
		
		suDt := NVL(SETDATE,sysdate);

		IF CT = 0 THEN
			SELECT count(*) INTO CT FROM INOUT_RECORD WHERE ITEM_CD = ITEMCD AND LOT_NO = LOTNO AND INOUT_QTY > 0 ;
			IF CT = 0 THEN
				DT := NVL(SETDATE,TO_DATE('2009/09/30','yyyy/mm/dd'));
			else
				select NVL(min(INOUT_DATE),sysdate) INTO DT FROM INOUT_RECORD WHERE ITEM_CD = ITEMCD AND LOT_NO = LOTNO AND INOUT_QTY > 0 ;
			end if;
		ELSE
			select NVL(min(ISSUE_DATE),sysdate) INTO DT FROM LOT_INVENTORY WHERE ITEM_CD = ITEMCD AND LOT_NO = LOTNO;
		END IF;
		IF suDt < DT THEN
			DT := suDt;
		END IF;
		RETURN DT;
	END;
END;
/
