CREATE OR REPLACE TRIGGER LOGIN_IF_TRIGGER
AFTER INSERT OR DELETE OR UPDATE OF TANTO_NM,TANTO_CD
ON LOGIN
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW 
DECLARE
	TEMP_COUNT 		NUMBER;
	TEMP_PROC_DIVISION 	NUMBER;			-- 処理区分
	CONST_INSERT 		NUMBER := 1;		-- レコード追加処理
	CONST_UPDATE 		NUMBER := 2;		-- レコード更新処理
	CONST_DELETE 		NUMBER := 3;		-- レコード削除処理
	CONST_VALID_LEN		NUMBER := 3;		-- 担当者コード有効長さ
	TEMP_PRIMARY_KEY	VARCHAR2(20);		-- 主キー
	CONST_SPACE 		VARCHAR(10) := ' ';	-- スペース

BEGIN

	IF (INSERTING) THEN	-- 新規追加時
		TEMP_PROC_DIVISION := CONST_INSERT;
		TEMP_PRIMARY_KEY := :NEW.TANTO_CD;
	END IF;
	IF (UPDATING) THEN	-- 更新時
		TEMP_PROC_DIVISION := CONST_UPDATE;
		TEMP_PRIMARY_KEY := :NEW.TANTO_CD;
	END IF;
	IF (DELETING) THEN	-- 削除時
		TEMP_PROC_DIVISION := CONST_DELETE;
		TEMP_PRIMARY_KEY := :OLD.TANTO_CD;
	END IF;

	-- 担当者コードが有効な長さでは無い場合処理しない
	IF LENGTH(TEMP_PRIMARY_KEY) <> CONST_VALID_LEN THEN 
		RETURN;
	END IF;

	SELECT COUNT(*) INTO TEMP_COUNT FROM IF_MASTER_TANTOSHA WHERE TANTOCODE = TEMP_PRIMARY_KEY;
	
	IF TEMP_COUNT <> 0 THEN

		UPDATE IF_MASTER_TANTOSHA SET 
			TANTOSHA = NVL(:NEW.TANTO_NM,CONST_SPACE), 
			PROC_DIVISION=TEMP_PROC_DIVISION 
		WHERE IF_MASTER_TANTOSHA.TANTOCODE = TEMP_PRIMARY_KEY;

	ELSE
		
		INSERT INTO IF_MASTER_TANTOSHA VALUES(
			TEMP_PRIMARY_KEY,
			NVL(:NEW.TANTO_NM,CONST_SPACE),
			CONST_SPACE,
			CONST_SPACE,
			CONST_SPACE,
			TEMP_PROC_DIVISION);
		
	END IF;
-- 異常処理
EXCEPTION
	WHEN OTHERS THEN

		OUTPUT_ERROR_LOG('LOGIN','TRIGGER',SQLCODE,SQLERRM);

END;
/
