CREATE OR REPLACE TRIGGER OPERATION_IF_TRIGGER
AFTER INSERT OR DELETE OR UPDATE OF OPERATION_NAME,OPERATION_CD
ON OPERATION
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW 
DECLARE
	TEMP_COUNT 		NUMBER;
	TEMP_PROC_DIVISION 	NUMBER;			-- 処理区分
	CONST_INSERT 		NUMBER := 1;		-- レコード追加処理
	CONST_UPDATE 		NUMBER := 2;		-- レコード更新処理
	CONST_DELETE 		NUMBER := 3;		-- レコード削除処理
	TEMP_PRIMARY_KEY	VARCHAR2(20);		-- 主キー

BEGIN

	IF (INSERTING) THEN	-- 新規追加時
		TEMP_PROC_DIVISION := CONST_INSERT;
		TEMP_PRIMARY_KEY := :NEW.OPERATION_CD;
	END IF;
	IF (UPDATING) THEN	-- 更新時
		TEMP_PROC_DIVISION := CONST_UPDATE;
		TEMP_PRIMARY_KEY := :NEW.OPERATION_CD;
	END IF;
	IF (DELETING) THEN	-- 削除時
		TEMP_PROC_DIVISION := CONST_DELETE;
		TEMP_PRIMARY_KEY := :OLD.OPERATION_CD;
	END IF;

	SELECT COUNT(*) INTO TEMP_COUNT FROM IF_MASTER_SHORICODE WHERE IF_MASTER_SHORICODE.SHIORICODE = TEMP_PRIMARY_KEY;
	
	IF TEMP_COUNT <> 0 THEN

		UPDATE IF_MASTER_SHORICODE SET SHORIMEI = :NEW.OPERATION_NAME,PROC_DIVISION =TEMP_PROC_DIVISION WHERE IF_MASTER_SHORICODE.SHIORICODE = TEMP_PRIMARY_KEY;

	ELSE
		
		INSERT INTO IF_MASTER_SHORICODE VALUES(TEMP_PRIMARY_KEY,:NEW.OPERATION_NAME,NULL,TEMP_PROC_DIVISION);
		
	END IF;
-- 異常処理
EXCEPTION
	WHEN OTHERS THEN

		OUTPUT_ERROR_LOG('OPERATION','TRIGGER',SQLCODE,SQLERRM);

END;
/
