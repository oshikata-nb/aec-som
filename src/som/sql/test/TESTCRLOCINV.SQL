CREATE OR REPLACE PROCEDURE      TESTCRLOCINV
IS
		cursor curLot is
		select DISTINCT(ITEM_CD) from LOT_INVENTORY;
		rtLot curLot%rowtype;
		cursor curLocation(strItem Nvarchar2) is
		select DISTINCT LEVEL,LOCATION_CD from LOCATION    START WITH LOCATION_CD IN (select DISTINCT LOCATION_CD FROM LOT_INVENTORY 
		WHERE ITEM_CD = strItem ) CONNECT BY  PRIOR  UPPER_LOCATION_CD =  LOCATION_CD ORDER BY LEVEL;
		rtLocation curLocation%rowtype;
		
	CT number;
	ITEMCODE NVARCHAR2(40);
	QTY number;
	LOCATIONCODE NVARCHAR2(40);
BEGIN
	OPEN curLot;
	LOOP
		FETCH curLot INTO rtLot;
		IF curLot%NOTFOUND = TRUE THEN
			EXIT;
		END IF;
		ITEMCODE := rtLot.ITEM_CD;
		SELECT COUNT(*) INTO CT FROM ITEM_QUEUE WHERE ITEM_CD = ITEMCODE;
		IF CT = 0 THEN
			--DELETE FROM LOT_INVENTORY WHERE ITEM_CD = rtLot.ITEN_CD;
			null;
		ELSE
			SELECT COUNT(*) INTO CT FROM ITEM_INVENTORY WHERE ITEM_CD = ITEMCODE;
			IF CT = 0 THEN
				dbms_output.put_line(ITEMCODE);
				INSERT INTO ITEM_INVENTORY
					(
					ITEM_CD
					,PARENT_ITEM_CD
					,UPDATE_DATE
					,UPDATOR_CD
					,INPUT_DATE
					,INPUTOR_CD
					)
				VALUES
					(
					ITEMCODE
					,FUN_GET_ITEM_PARENT_ITEM_CD(ITEMCODE)
					,sysdate
					,'som'
					,sysdate
					,'BATCH'
					)
				;
			END IF;
			UPDATE ITEM_INVENTORY SET INVENTORY_QTY = (SELECT SUM(INVENTORY_QTY) FROM LOT_INVENTORY WHERE ITEM_CD = ITEMCODE ) WHERE ITEM_CD = ITEMCODE;
			OPEN curLocation(ITEMCODE) ;
			LOOP 
				FETCH curLocation INTO rtLocation;
				IF curLocation%NOTFOUND = TRUE THEN EXIT;END IF;
				LOCATIONCODE := rtLocation.LOCATION_CD;
				SELECT SUM(INVENTORY_QTY) INTO QTY FROM LOT_INVENTORY WHERE ITEM_CD = ITEMCODE AND 
				LOCATION_CD IN (SELECT LOCATION_CD FROM LOCATION START WITH LOCATION_CD = LOCATIONCODE CONNECT BY PRIOR LOCATION_CD =  UPPER_LOCATION_CD ) ;
				SELECT COUNT(*) INTO CT FROM LOCATION_INVENTORY WHERE ITEM_CD = ITEMCODE AND LOCATION_CD = LOCATIONCODE;
				IF CT = 0 AND QTY = 0 THEN
					NULL;
				ELSE
					IF CT = 0 THEN 
						INSERT INTO LOCATION_INVENTORY
						(
						LOCATION_CD
						,ITEM_CD
						,PARENT_ITEM_CD
						,INPUT_DATE
						,INPUTOR_CD
						,UPDATE_DATE
						,UPDATOR_CD
						)
						VALUES
						(
						LOCATIONCODE
						,ITEMCODE
						,FUN_GET_ITEM_PARENT_ITEM_CD(ITEMCODE)
						,sysdate
						,'som'
						,sysdate
						,'BATCH'
						)
						;
					END IF;
					UPDATE LOCATION_INVENTORY SET INVENTORY_QTY = QTY WHERE ITEM_CD = ITEMCODE AND LOCATION_CD = LOCATIONCODE;
				END IF;
			END LOOP;
			CLOSE curLocation;
			EXIT;
		END IF;
	END LOOP;
	CLOSE curLot;
  NULL;
	EXCEPTION
		when others then
			IF curLot%ISOPEN THEN
				CLOSE curLot;
			END IF;
			dbms_output.put_line('ENTRY_ORDER ' || sqlcode || sqlerrm);
END;
/
