/*
 * 在庫移動帳票Excel用Dao���͈ꗗ�pSQL
 *
 * entityName=InventoryMoveListForReport
 * packageName=inventorymovelistforreport
 * methodName=getListForReport
 *
 */
SELECT 

	LOT_INVENTORY.LOCATION_CD, NVL(LOCATION_NAME, 'ロケーション名称未登録') LOCATION_NAME, LOT_NO, ALIAS_LOT_NO
,	LOCATION.LOCATION_NAME
,	LOT_INVENTORY.ITEM_CD
,	ITEM_QUEUE.ITEM_NAME
,	ITEM_QUEUE.STYLE_OF_PACKING
,	ITEM_QUEUE.OTHER_COMPANY_CD1
,	LOT_INVENTORY.LOT_NO
,	LOT_INVENTORY.PARENT_ITEM_CD
,	PARENT_ITEM.ITEM_NAME AS PARENT_ITEM_NAME
,	LOT_INVENTORY.INVENTORY_QTY
,	LOT_INVENTORY.BACKORDER_QTY
,	LOT_INVENTORY.ASSIGN_QTY
,	LOT_INVENTORY.SALES_ASSIGN_QTY
,	LOT_INVENTORY.FINISH_QTY
,	LOT_INVENTORY.INSPECTION_QTY
,	LOT_INVENTORY.INVALID_QTY
,	LOT_INVENTORY.FAULT_QTY
,	LOT_INVENTORY.INVENTORY_COST
,	LOT_INVENTORY.ISSUE_DATE
,	LOT_INVENTORY.START_DATE
,	LOT_INVENTORY.END_DATE
,	LOT_INVENTORY.LAST_IN_DATE
,	LOT_INVENTORY.LAST_OUT_DATE
,	LOT_INVENTORY.LAST_INVENTORY_DATE
,	LOT_INVENTORY.LAST_INVENTORY_QTY
,	LOT_INVENTORY.LAST_INVENTORY_COST
,	LOT_INVENTORY.NEW_INVENTORY_COUNT
,	LOT_INVENTORY.LM_INVENTORY_QTY
,	LOT_INVENTORY.LM_INVENTORY_COST
,	LOT_INVENTORY.ALIAS_LOT_NO
,	LOT_INVENTORY.INOUT_QTY
,	LOT_INVENTORY.FRACTION
,	DECODE(ITEM_QUEUE.UNIT_OF_OPERATION_MANAGEMENT, '1', NVL(LOT_INVENTORY.INVENTORY_QTY, 0) / NVL(ITEM_QUEUE.KG_OF_FRACTION_MANAGEMENT, 1)
,	DECODE(ITEM_QUEUE.UNIT_OF_OPERATION_MANAGEMENT, '5', NVL(LOT_INVENTORY.INVENTORY_QTY, 0) / NVL(ITEM_QUEUE.KG_OF_FRACTION_MANAGEMENT, 1)
,	CASE ITEM_QUEUE.TYPE_DIVISION
	    WHEN 1 THEN FLOOR(NVL(LOT_INVENTORY.INVENTORY_QTY, 0) / NVL(ITEM_QUEUE.KG_OF_FRACTION_MANAGEMENT, 1))
	    WHEN 3 THEN FLOOR(NVL(LOT_INVENTORY.INVENTORY_QTY, 0) / NVL(ITEM_QUEUE.KG_OF_FRACTION_MANAGEMENT, 1))
	    ELSE NVL(LOT_INVENTORY.INVENTORY_QTY, 0)
	END)) PACK_QTY
,	OPERATION_NAMES.NAME01 PACK_UNIT
	
,	DECODE(ITEM_QUEUE.UNIT_OF_OPERATION_MANAGEMENT, '1', 0, DECODE(ITEM_QUEUE.UNIT_OF_OPERATION_MANAGEMENT, '5', 0
,	CASE ITEM_QUEUE.TYPE_DIVISION
	    WHEN 1 THEN MOD(NVL(LOT_INVENTORY.INVENTORY_QTY, 0), NVL(ITEM_QUEUE.KG_OF_FRACTION_MANAGEMENT, 1))
	    WHEN 3 THEN MOD(NVL(LOT_INVENTORY.INVENTORY_QTY, 0), NVL(ITEM_QUEUE.KG_OF_FRACTION_MANAGEMENT, 1))
	    ELSE 0
	END)) FRACTION_QTY
	
,	FRACTION_NAMES.NAME01 FRACTION_UNIT
	
,	CASE ITEM_QUEUE.TYPE_DIVISION
	    WHEN 1 THEN NVL(LOT_INVENTORY.INVENTORY_QTY, 0)
	    WHEN 3 THEN NVL(LOT_INVENTORY.INVENTORY_QTY, 0)
	    ELSE NVL(LOT_INVENTORY.INVENTORY_QTY, 0) * NVL(ITEM_QUEUE.KG_OF_FRACTION_MANAGEMENT, 1)
	END INVENTORY_QTY_KG

,	LOT_INVENTORY.INPUT_DATE
,	LOT_INVENTORY.INPUTOR_CD
,	INPUTOR.TANTO_NM AS INPUTOR_NAME
,	LOT_INVENTORY.UPDATE_DATE
,	LOT_INVENTORY.UPDATOR_CD
,	UPDATOR.TANTO_NM AS UPDATOR_NAME

FROM 
	LOT_INVENTORY
,	VALID_ITEM_QUEUE ITEM_QUEUE
,	LOCATION
,	NAMES OPERATION_NAMES
,	NAMES FRACTION_NAMES
,	ITEM PARENT_ITEM
,	LOGIN INPUTOR
,	LOGIN UPDATOR
	
WHERE 
	LOT_INVENTORY.LOCATION_CD IS NOT NULL
AND	LOT_INVENTORY.LOCATION_CD = LOCATION.LOCATION_CD(+)
AND	LOT_INVENTORY.PARENT_ITEM_CD = PARENT_ITEM.ITEM_CD(+)
AND	LOT_INVENTORY.INPUTOR_CD = INPUTOR.TANTO_CD(+)
AND	LOT_INVENTORY.UPDATOR_CD = UPDATOR.TANTO_CD(+)

/*IF(condition.srhLocationCd != null) && (condition.srhLocationCd != "")*/
AND (LOT_INVENTORY.LOCATION_CD LIKE /*condition.srhLocationCd*/'%' OR LOCATION.LOCATION_NAME LIKE /*condition.srhLocationCd*/'%')
/*END*/

AND (LOT_INVENTORY.ITEM_CD LIKE /*condition.srhItemCd*/'00000396%' OR ITEM_QUEUE.ITEM_NAME LIKE /*condition.srhItemCd*/'00000396%')

/*IF(condition.srhOtherCompanyCd1 != null) && (condition.srhOtherCompanyCd1 != "")*/
AND	ITEM_QUEUE.OTHER_COMPANY_CD1 LIKE /*condition.srhOtherCompanyCd1*/'%'
/*END*/

AND 	LOT_INVENTORY.ITEM_CD = ITEM_QUEUE.ITEM_CD(+)
AND 	OPERATION_NAMES.NAME_DIVISION(+) = 'UNIT'
AND 	ITEM_QUEUE.UNIT_OF_OPERATION_MANAGEMENT = OPERATION_NAMES.NAME_CD(+)
AND 	FRACTION_NAMES.NAME_DIVISION(+) = 'UNIT'
AND 	ITEM_QUEUE.UNIT_OF_FRACTION_MANAGEMENT = FRACTION_NAMES.NAME_CD(+)
