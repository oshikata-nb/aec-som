/*
 * 単価取得用SQL
 *
 * entityName=VaridUnitprice
 * packageName=varidunitprice
 * methodName=getUnitPrice
 *
 */
SELECT 
	VALID_UNITPRICE.ESTIMATE_NO
,	VALID_UNITPRICE.ESTIMATE_INPUT_DATE
,	VALID_UNITPRICE.BALANCE_CD
,	VALID_UNITPRICE.VENDER_CD
,	(CASE WHEN VALID_UNITPRICE.ITEM_CD IS NULL THEN ITEM_DATA.ITEM_CD ELSE VALID_UNITPRICE.ITEM_CD END) ITEM_CD
,	VALID_UNITPRICE.CONSECUTIVE_NO
,	NVL((CASE WHEN VALID_UNITPRICE.STANDARD_UNIT_PRICE IS NULL THEN ITEM_DATA.SELLING_PRICE ELSE VALID_UNITPRICE.STANDARD_UNIT_PRICE END),0) STANDARD_UNIT_PRICE
,	NVL(VALID_UNITPRICE.STANDARD_DISCOUNT,0) STANDARD_DISCOUNT
,	NVL(VALID_UNITPRICE.SPECIAL_DISCOUNT,0) SPECIAL_DISCOUNT
,	NVL(VALID_UNITPRICE.UNITPRICE,0) UNITPRICE
,	NVL(VALID_UNITPRICE.STANDARD_AMOUNT,0) STANDARD_AMOUNT
,	NVL(VALID_UNITPRICE.MATSS,0) MATSS
,	VALID_UNITPRICE.ESTIMATE_VALID_DATE_FROM
,	VALID_UNITPRICE.ESTIMATE_VALID_DATE_TO
,	VALID_UNITPRICE.REMARK
,	VALID_UNITPRICE.INPUT_DATE
,	VALID_UNITPRICE.INPUTOR_CD
,	VALID_UNITPRICE.UPDATE_DATE
,	VALID_UNITPRICE.UPDATOR_CD
,	VALID_UNITPRICE.ESTIMATE_STATUS
,	(CASE WHEN VALID_UNITPRICE.STANDARD_UNIT_PRICE IS NULL THEN '1' ELSE '0' END) TMP_UNITPRICE_FLG
FROM
	(SELECT 
		ITEM.ITEM_CD,ARTICLE_ATTRIBUTE_QUEUE.SELLING_PRICE 
	FROM 
		ITEM
		,	ARTICLE_ATTRIBUTE_QUEUE 
	WHERE 
		ITEM.ITEM_CD = /*itemCd*/'00000616'
		AND ITEM.ITEM_CD = ARTICLE_ATTRIBUTE_QUEUE.ITEM_CD(+)
		AND ITEM.VERSION = ARTICLE_ATTRIBUTE_QUEUE.VERSION(+)
	) ITEM_DATA
,	(SELECT 
		*
	FROM 
		ESTIMATE
	WHERE
		ESTIMATE.ESTIMATE_NO IS NOT NULL
	AND	ESTIMATE.BALANCE_CD = /*balanceCd*/'1'
	AND	ESTIMATE.ITEM_CD = /*itemCd*/'00000616'
/*IF (procDate != null) && (procDate != "")*/
	AND	ESTIMATE.ESTIMATE_VALID_DATE_FROM <= /*procDate*/'2009/03/19'
	AND 	ESTIMATE.ESTIMATE_VALID_DATE_TO >= /*procDate*/'2009/03/19'
/*END*/
/*IF (status != null) && (status != "")*/
	AND	ESTIMATE.ESTIMATE_STATUS = /*status*/'3'
/*END*/
	ORDER BY ESTIMATE.ESTIMATE_INPUT_DATE DESC
	) VALID_UNITPRICE
WHERE ITEM_DATA.ITEM_CD = VALID_UNITPRICE.ITEM_CD(+)
 

